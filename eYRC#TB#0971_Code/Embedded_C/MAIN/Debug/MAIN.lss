
MAIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  000040f2  00004186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800230  00800230  000041b6  2**0
                  ALLOC
  3 .stab         00002910  00000000  00000000  000041b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000952  00000000  00000000  00006ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00007420  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cbf  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002d0  00000000  00000000  0000919f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b08  00000000  00000000  0000946f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  00009f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050a  00000000  00000000  0000a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e89  00000000  00000000  0000abe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_5>
      18:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f0 e4       	ldi	r31, 0x40	; 64
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 33       	cpi	r26, 0x30	; 48
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e3       	ldi	r26, 0x30	; 48
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 36       	cpi	r26, 0x6B	; 107
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 45 1a 	call	0x348a	; 0x348a <main>
     122:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	a0 e8       	ldi	r26, 0x80	; 128
     14a:	bf e3       	ldi	r27, 0x3F	; 63
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	ab 83       	std	Y+3, r26	; 0x03
     152:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	26 e6       	ldi	r18, 0x66	; 102
     15e:	36 e6       	ldi	r19, 0x66	; 102
     160:	46 e6       	ldi	r20, 0x66	; 102
     162:	55 e4       	ldi	r21, 0x45	; 69
     164:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	9e 83       	std	Y+6, r25	; 0x06
     170:	af 83       	std	Y+7, r26	; 0x07
     172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     18a:	88 23       	and	r24, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <lcd_set_4bit+0x66>
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	11 23       	and	r17, r17
     192:	29 f0       	breq	.+10     	; 0x19e <lcd_set_4bit+0x74>
		__ticks = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	46 c0       	rjmp	.+140    	; 0x22a <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	3f ef       	ldi	r19, 0xFF	; 255
     1ac:	4f e7       	ldi	r20, 0x7F	; 127
     1ae:	57 e4       	ldi	r21, 0x47	; 71
     1b0:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <lcd_set_4bit+0x90>
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	11 23       	and	r17, r17
     1bc:	61 f1       	breq	.+88     	; 0x216 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1be:	69 81       	ldd	r22, Y+1	; 0x01
     1c0:	7a 81       	ldd	r23, Y+2	; 0x02
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	9a 87       	std	Y+10, r25	; 0x0a
     1e4:	89 87       	std	Y+9, r24	; 0x09
     1e6:	12 c0       	rjmp	.+36     	; 0x20c <lcd_set_4bit+0xe2>
     1e8:	80 e7       	ldi	r24, 0x70	; 112
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9c 87       	std	Y+12, r25	; 0x0c
     1ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f4:	8c 01       	movw	r16, r24
     1f6:	c8 01       	movw	r24, r16
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0xce>
     1fc:	8c 01       	movw	r16, r24
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
     200:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	51 f7       	brne	.-44     	; 0x1e8 <lcd_set_4bit+0xbe>
     214:	17 c0       	rjmp	.+46     	; 0x244 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	9e 87       	std	Y+14, r25	; 0x0e
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	8c 01       	movw	r16, r24
     238:	f8 01       	movw	r30, r16
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x110>
     23e:	8f 01       	movw	r16, r30
     240:	1e 87       	std	Y+14, r17	; 0x0e
     242:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e2       	ldi	r18, 0x28	; 40
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2e 7f       	andi	r18, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     256:	88 e2       	ldi	r24, 0x28	; 40
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e2       	ldi	r18, 0x28	; 40
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	2d 7f       	andi	r18, 0xFD	; 253
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     268:	88 e2       	ldi	r24, 0x28	; 40
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	28 e2       	ldi	r18, 0x28	; 40
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	24 60       	ori	r18, 0x04	; 4
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b0 e4       	ldi	r27, 0x40	; 64
     28c:	8f 87       	std	Y+15, r24	; 0x0f
     28e:	98 8b       	std	Y+16, r25	; 0x10
     290:	a9 8b       	std	Y+17, r26	; 0x11
     292:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     294:	6f 85       	ldd	r22, Y+15	; 0x0f
     296:	78 89       	ldd	r23, Y+16	; 0x10
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	9a 89       	ldd	r25, Y+18	; 0x12
     29c:	26 e6       	ldi	r18, 0x66	; 102
     29e:	36 e6       	ldi	r19, 0x66	; 102
     2a0:	46 e6       	ldi	r20, 0x66	; 102
     2a2:	55 e4       	ldi	r21, 0x45	; 69
     2a4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8b 8b       	std	Y+19, r24	; 0x13
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	ad 8b       	std	Y+21, r26	; 0x15
     2b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	6b 89       	ldd	r22, Y+19	; 0x13
     2b8:	7c 89       	ldd	r23, Y+20	; 0x14
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <lcd_set_4bit+0x1a6>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	29 f0       	breq	.+10     	; 0x2de <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	46 c0       	rjmp	.+140    	; 0x36a <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	7c 89       	ldd	r23, Y+20	; 0x14
     2e4:	8d 89       	ldd	r24, Y+21	; 0x15
     2e6:	9e 89       	ldd	r25, Y+22	; 0x16
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <lcd_set_4bit+0x1d0>
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	11 23       	and	r17, r17
     2fc:	61 f1       	breq	.+88     	; 0x356 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     300:	78 89       	ldd	r23, Y+16	; 0x10
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	9a 89       	ldd	r25, Y+18	; 0x12
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	8f 8b       	std	Y+23, r24	; 0x17
     326:	12 c0       	rjmp	.+36     	; 0x34c <lcd_set_4bit+0x222>
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9a 8f       	std	Y+26, r25	; 0x1a
     32e:	89 8f       	std	Y+25, r24	; 0x19
     330:	89 8d       	ldd	r24, Y+25	; 0x19
     332:	9a 8d       	ldd	r25, Y+26	; 0x1a
     334:	8c 01       	movw	r16, r24
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_set_4bit+0x20e>
     33c:	8c 01       	movw	r16, r24
     33e:	1a 8f       	std	Y+26, r17	; 0x1a
     340:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	8f 89       	ldd	r24, Y+23	; 0x17
     344:	98 8d       	ldd	r25, Y+24	; 0x18
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	98 8f       	std	Y+24, r25	; 0x18
     34a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	51 f7       	brne	.-44     	; 0x328 <lcd_set_4bit+0x1fe>
     354:	17 c0       	rjmp	.+46     	; 0x384 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	9c 8f       	std	Y+28, r25	; 0x1c
     370:	8b 8f       	std	Y+27, r24	; 0x1b
     372:	8b 8d       	ldd	r24, Y+27	; 0x1b
     374:	9c 8d       	ldd	r25, Y+28	; 0x1c
     376:	8c 01       	movw	r16, r24
     378:	f8 01       	movw	r30, r16
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_set_4bit+0x250>
     37e:	8f 01       	movw	r16, r30
     380:	1c 8f       	std	Y+28, r17	; 0x1c
     382:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 e2       	ldi	r18, 0x28	; 40
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2b 7f       	andi	r18, 0xFB	; 251
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e8       	ldi	r26, 0x80	; 128
     39c:	bf e3       	ldi	r27, 0x3F	; 63
     39e:	8d 8f       	std	Y+29, r24	; 0x1d
     3a0:	9e 8f       	std	Y+30, r25	; 0x1e
     3a2:	af 8f       	std	Y+31, r26	; 0x1f
     3a4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ac:	98 a1       	lds	r25, 0x48
     3ae:	26 e6       	ldi	r18, 0x66	; 102
     3b0:	36 e6       	ldi	r19, 0x66	; 102
     3b2:	46 e6       	ldi	r20, 0x66	; 102
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	89 a3       	lds	r24, 0x59
     3c0:	9a a3       	lds	r25, 0x5a
     3c2:	ab a3       	lds	r26, 0x5b
     3c4:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	69 a1       	lds	r22, 0x49
     3ca:	7a a1       	lds	r23, 0x4a
     3cc:	8b a1       	lds	r24, 0x4b
     3ce:	9c a1       	lds	r25, 0x4c
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_set_4bit+0x2b8>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e a3       	lds	r25, 0x5e
     3ec:	8d a3       	lds	r24, 0x5d
     3ee:	46 c0       	rjmp	.+140    	; 0x47c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	69 a1       	lds	r22, 0x49
     3f4:	7a a1       	lds	r23, 0x4a
     3f6:	8b a1       	lds	r24, 0x4b
     3f8:	9c a1       	lds	r25, 0x4c
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	3f ef       	ldi	r19, 0xFF	; 255
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	57 e4       	ldi	r21, 0x47	; 71
     402:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     406:	18 16       	cp	r1, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <lcd_set_4bit+0x2e2>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	11 23       	and	r17, r17
     40e:	61 f1       	breq	.+88     	; 0x468 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     410:	6d 8d       	ldd	r22, Y+29	; 0x1d
     412:	7e 8d       	ldd	r23, Y+30	; 0x1e
     414:	8f 8d       	ldd	r24, Y+31	; 0x1f
     416:	98 a1       	lds	r25, 0x48
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e a3       	lds	r25, 0x5e
     436:	8d a3       	lds	r24, 0x5d
     438:	12 c0       	rjmp	.+36     	; 0x45e <lcd_set_4bit+0x334>
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 a7       	lds	r25, 0x78
     440:	8f a3       	lds	r24, 0x5f
     442:	8f a1       	lds	r24, 0x4f
     444:	98 a5       	lds	r25, 0x68
     446:	8c 01       	movw	r16, r24
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_set_4bit+0x320>
     44e:	8c 01       	movw	r16, r24
     450:	18 a7       	lds	r17, 0x78
     452:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     454:	8d a1       	lds	r24, 0x4d
     456:	9e a1       	lds	r25, 0x4e
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	9e a3       	lds	r25, 0x5e
     45c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	8d a1       	lds	r24, 0x4d
     460:	9e a1       	lds	r25, 0x4e
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f7       	brne	.-44     	; 0x43a <lcd_set_4bit+0x310>
     466:	17 c0       	rjmp	.+46     	; 0x496 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     468:	69 a1       	lds	r22, 0x49
     46a:	7a a1       	lds	r23, 0x4a
     46c:	8b a1       	lds	r24, 0x4b
     46e:	9c a1       	lds	r25, 0x4c
     470:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	8d a1       	lds	r24, 0x4d
     47e:	9e a1       	lds	r25, 0x4e
     480:	9a a7       	lds	r25, 0x7a
     482:	89 a7       	lds	r24, 0x79
     484:	89 a5       	lds	r24, 0x69
     486:	9a a5       	lds	r25, 0x6a
     488:	8c 01       	movw	r16, r24
     48a:	f8 01       	movw	r30, r16
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x362>
     490:	8f 01       	movw	r16, r30
     492:	1a a7       	lds	r17, 0x7a
     494:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e2       	ldi	r18, 0x28	; 40
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e2       	ldi	r18, 0x28	; 40
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2d 7f       	andi	r18, 0xFD	; 253
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     4ba:	88 e2       	ldi	r24, 0x28	; 40
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     4c4:	88 e2       	ldi	r24, 0x28	; 40
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	20 81       	ld	r18, Z
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 ea       	ldi	r26, 0xA0	; 160
     4dc:	b0 e4       	ldi	r27, 0x40	; 64
     4de:	8b a7       	lds	r24, 0x7b
     4e0:	9c a7       	lds	r25, 0x7c
     4e2:	ad a7       	lds	r26, 0x7d
     4e4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	6b a5       	lds	r22, 0x6b
     4e8:	7c a5       	lds	r23, 0x6c
     4ea:	8d a5       	lds	r24, 0x6d
     4ec:	9e a5       	lds	r25, 0x6e
     4ee:	26 e6       	ldi	r18, 0x66	; 102
     4f0:	36 e6       	ldi	r19, 0x66	; 102
     4f2:	46 e6       	ldi	r20, 0x66	; 102
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	8f a7       	lds	r24, 0x7f
     500:	98 ab       	sts	0x58, r25
     502:	a9 ab       	sts	0x59, r26
     504:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     506:	11 e0       	ldi	r17, 0x01	; 1
     508:	6f a5       	lds	r22, 0x6f
     50a:	78 a9       	sts	0x48, r23
     50c:	89 a9       	sts	0x49, r24
     50e:	9a a9       	sts	0x4a, r25
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x3f8>
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	11 23       	and	r17, r17
     524:	29 f0       	breq	.+10     	; 0x530 <lcd_set_4bit+0x406>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c ab       	sts	0x5c, r25
     52c:	8b ab       	sts	0x5b, r24
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f a5       	lds	r22, 0x6f
     534:	78 a9       	sts	0x48, r23
     536:	89 a9       	sts	0x49, r24
     538:	9a a9       	sts	0x4a, r25
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <lcd_set_4bit+0x422>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	11 23       	and	r17, r17
     54e:	61 f1       	breq	.+88     	; 0x5a8 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     550:	6b a5       	lds	r22, 0x6b
     552:	7c a5       	lds	r23, 0x6c
     554:	8d a5       	lds	r24, 0x6d
     556:	9e a5       	lds	r25, 0x6e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	9c ab       	sts	0x5c, r25
     576:	8b ab       	sts	0x5b, r24
     578:	12 c0       	rjmp	.+36     	; 0x59e <lcd_set_4bit+0x474>
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9e ab       	sts	0x5e, r25
     580:	8d ab       	sts	0x5d, r24
     582:	8d a9       	sts	0x4d, r24
     584:	9e a9       	sts	0x4e, r25
     586:	8c 01       	movw	r16, r24
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_set_4bit+0x460>
     58e:	8c 01       	movw	r16, r24
     590:	1e ab       	sts	0x5e, r17
     592:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     594:	8b a9       	sts	0x4b, r24
     596:	9c a9       	sts	0x4c, r25
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	9c ab       	sts	0x5c, r25
     59c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	8b a9       	sts	0x4b, r24
     5a0:	9c a9       	sts	0x4c, r25
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	51 f7       	brne	.-44     	; 0x57a <lcd_set_4bit+0x450>
     5a6:	17 c0       	rjmp	.+46     	; 0x5d6 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	6f a5       	lds	r22, 0x6f
     5aa:	78 a9       	sts	0x48, r23
     5ac:	89 a9       	sts	0x49, r24
     5ae:	9a a9       	sts	0x4a, r25
     5b0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	8b a9       	sts	0x4b, r24
     5be:	9c a9       	sts	0x4c, r25
     5c0:	98 af       	sts	0x78, r25
     5c2:	8f ab       	sts	0x5f, r24
     5c4:	8f a9       	sts	0x4f, r24
     5c6:	98 ad       	sts	0x68, r25
     5c8:	8c 01       	movw	r16, r24
     5ca:	f8 01       	movw	r30, r16
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_set_4bit+0x4a2>
     5d0:	8f 01       	movw	r16, r30
     5d2:	18 af       	sts	0x78, r17
     5d4:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2b 7f       	andi	r18, 0xFB	; 251
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e8       	ldi	r26, 0x80	; 128
     5ee:	bf e3       	ldi	r27, 0x3F	; 63
     5f0:	89 af       	sts	0x79, r24
     5f2:	9a af       	sts	0x7a, r25
     5f4:	ab af       	sts	0x7b, r26
     5f6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	69 ad       	sts	0x69, r22
     5fa:	7a ad       	sts	0x6a, r23
     5fc:	8b ad       	sts	0x6b, r24
     5fe:	9c ad       	sts	0x6c, r25
     600:	26 e6       	ldi	r18, 0x66	; 102
     602:	36 e6       	ldi	r19, 0x66	; 102
     604:	46 e6       	ldi	r20, 0x66	; 102
     606:	55 e4       	ldi	r21, 0x45	; 69
     608:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	23 5c       	subi	r18, 0xC3	; 195
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	cd 96       	adiw	r24, 0x3d	; 61
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <lcd_set_4bit+0x518>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	11 23       	and	r17, r17
     644:	49 f0       	breq	.+18     	; 0x658 <lcd_set_4bit+0x52e>
		__ticks = 1;
     646:	ce 01       	movw	r24, r28
     648:	8f 5b       	subi	r24, 0xBF	; 191
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	6e c0       	rjmp	.+220    	; 0x734 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	cd 96       	adiw	r24, 0x3d	; 61
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	57 e4       	ldi	r21, 0x47	; 71
     670:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <lcd_set_4bit+0x550>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	11 23       	and	r17, r17
     67c:	09 f4       	brne	.+2      	; 0x680 <lcd_set_4bit+0x556>
     67e:	49 c0       	rjmp	.+146    	; 0x712 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	69 ad       	sts	0x69, r22
     682:	7a ad       	sts	0x6a, r23
     684:	8b ad       	sts	0x6b, r24
     686:	9c ad       	sts	0x6c, r25
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8e 01       	movw	r16, r28
     69a:	0f 5b       	subi	r16, 0xBF	; 191
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	f8 01       	movw	r30, r16
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	27 c0       	rjmp	.+78     	; 0x700 <lcd_set_4bit+0x5d6>
     6b2:	ce 01       	movw	r24, r28
     6b4:	8d 5b       	subi	r24, 0xBD	; 189
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	20 e7       	ldi	r18, 0x70	; 112
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
     6c2:	ce 01       	movw	r24, r28
     6c4:	8d 5b       	subi	r24, 0xBD	; 189
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	8c 01       	movw	r16, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_set_4bit+0x5a8>
     6d6:	8c 01       	movw	r16, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	8d 5b       	subi	r24, 0xBD	; 189
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	11 83       	std	Z+1, r17	; 0x01
     6e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	ce 01       	movw	r24, r28
     6e6:	8f 5b       	subi	r24, 0xBF	; 191
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	9e 01       	movw	r18, r28
     6ec:	2f 5b       	subi	r18, 0xBF	; 191
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	ce 01       	movw	r24, r28
     702:	8f 5b       	subi	r24, 0xBF	; 191
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f6       	brne	.-94     	; 0x6b2 <lcd_set_4bit+0x588>
     710:	2e c0       	rjmp	.+92     	; 0x76e <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	8e 01       	movw	r16, r28
     714:	0f 5b       	subi	r16, 0xBF	; 191
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	cd 96       	adiw	r24, 0x3d	; 61
     71c:	fc 01       	movw	r30, r24
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	ce 01       	movw	r24, r28
     736:	8b 5b       	subi	r24, 0xBB	; 187
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5b       	subi	r18, 0xBF	; 191
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
     74c:	ce 01       	movw	r24, r28
     74e:	8b 5b       	subi	r24, 0xBB	; 187
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	8c 01       	movw	r16, r24
     75a:	c8 01       	movw	r24, r16
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x632>
     760:	8c 01       	movw	r16, r24
     762:	ce 01       	movw	r24, r28
     764:	8b 5b       	subi	r24, 0xBB	; 187
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	11 83       	std	Z+1, r17	; 0x01
     76c:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	28 e2       	ldi	r18, 0x28	; 40
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	88 e2       	ldi	r24, 0x28	; 40
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 e2       	ldi	r18, 0x28	; 40
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	2d 7f       	andi	r18, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	24 60       	ori	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	9e 01       	movw	r18, r28
     7b0:	29 5b       	subi	r18, 0xB9	; 185
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 ea       	ldi	r26, 0xA0	; 160
     7ba:	b0 e4       	ldi	r27, 0x40	; 64
     7bc:	f9 01       	movw	r30, r18
     7be:	80 83       	st	Z, r24
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	a2 83       	std	Z+2, r26	; 0x02
     7c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	05 5b       	subi	r16, 0xB5	; 181
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	89 5b       	subi	r24, 0xB9	; 185
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 e6       	ldi	r20, 0x66	; 102
     7e2:	55 e4       	ldi	r21, 0x45	; 69
     7e4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 83       	st	Z, r24
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	a2 83       	std	Z+2, r26	; 0x02
     7f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7f6:	ce 01       	movw	r24, r28
     7f8:	85 5b       	subi	r24, 0xB5	; 181
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	93 81       	ldd	r25, Z+3	; 0x03
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <lcd_set_4bit+0x6f0>
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <lcd_set_4bit+0x706>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	74 c0       	rjmp	.+232    	; 0x918 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <lcd_set_4bit+0x72a>
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	11 23       	and	r17, r17
     856:	09 f4       	brne	.+2      	; 0x85a <lcd_set_4bit+0x730>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	ce 01       	movw	r24, r28
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <lcd_set_4bit+0x7b8>
     894:	ce 01       	movw	r24, r28
     896:	8f 5a       	subi	r24, 0xAF	; 175
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	20 e7       	ldi	r18, 0x70	; 112
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	fc 01       	movw	r30, r24
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ce 01       	movw	r24, r28
     8a6:	8f 5a       	subi	r24, 0xAF	; 175
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	8c 01       	movw	r16, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_set_4bit+0x78a>
     8b8:	8c 01       	movw	r16, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 83       	std	Z+1, r17	; 0x01
     8c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	ce 01       	movw	r24, r28
     8c8:	81 5b       	subi	r24, 0xB1	; 177
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	9e 01       	movw	r18, r28
     8ce:	21 5b       	subi	r18, 0xB1	; 177
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	ce 01       	movw	r24, r28
     8e4:	81 5b       	subi	r24, 0xB1	; 177
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	89 f6       	brne	.-94     	; 0x894 <lcd_set_4bit+0x76a>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	8e 01       	movw	r16, r28
     8f6:	01 5b       	subi	r16, 0xB1	; 177
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	85 5b       	subi	r24, 0xB5	; 181
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	ce 01       	movw	r24, r28
     91a:	8d 5a       	subi	r24, 0xAD	; 173
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	9e 01       	movw	r18, r28
     920:	21 5b       	subi	r18, 0xB1	; 177
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	ce 01       	movw	r24, r28
     932:	8d 5a       	subi	r24, 0xAD	; 173
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	8c 01       	movw	r16, r24
     93e:	c8 01       	movw	r24, r16
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <lcd_set_4bit+0x816>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	8d 5a       	subi	r24, 0xAD	; 173
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	11 83       	std	Z+1, r17	; 0x01
     950:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 e2       	ldi	r18, 0x28	; 40
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	9e 01       	movw	r18, r28
     966:	2b 5a       	subi	r18, 0xAB	; 171
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	8e 01       	movw	r16, r28
     97e:	07 5a       	subi	r16, 0xA7	; 167
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	8b 5a       	subi	r24, 0xAB	; 171
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	fc 01       	movw	r30, r24
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	26 e6       	ldi	r18, 0x66	; 102
     994:	36 e6       	ldi	r19, 0x66	; 102
     996:	46 e6       	ldi	r20, 0x66	; 102
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	a2 83       	std	Z+2, r26	; 0x02
     9aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 5a       	subi	r24, 0xA7	; 167
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	60 81       	ld	r22, Z
     9b8:	71 81       	ldd	r23, Z+1	; 0x01
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_set_4bit+0x8a6>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	11 23       	and	r17, r17
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5a       	subi	r24, 0xA3	; 163
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	74 c0       	rjmp	.+232    	; 0xace <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9e6:	ce 01       	movw	r24, r28
     9e8:	87 5a       	subi	r24, 0xA7	; 167
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f0       	brlt	.+2      	; 0xa0a <lcd_set_4bit+0x8e0>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	11 23       	and	r17, r17
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_set_4bit+0x8e6>
     a0e:	4d c0       	rjmp	.+154    	; 0xaaa <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5a       	subi	r24, 0xAB	; 171
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8e 01       	movw	r16, r28
     a32:	03 5a       	subi	r16, 0xA3	; 163
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	f8 01       	movw	r30, r16
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	27 c0       	rjmp	.+78     	; 0xa98 <lcd_set_4bit+0x96e>
     a4a:	ce 01       	movw	r24, r28
     a4c:	81 5a       	subi	r24, 0xA1	; 161
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ce 01       	movw	r24, r28
     a5c:	81 5a       	subi	r24, 0xA1	; 161
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	8c 01       	movw	r16, r24
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x940>
     a6e:	8c 01       	movw	r16, r24
     a70:	ce 01       	movw	r24, r28
     a72:	81 5a       	subi	r24, 0xA1	; 161
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	11 83       	std	Z+1, r17	; 0x01
     a7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 5a       	subi	r24, 0xA3	; 163
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	23 5a       	subi	r18, 0xA3	; 163
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	ce 01       	movw	r24, r28
     a9a:	83 5a       	subi	r24, 0xA3	; 163
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	89 f6       	brne	.-94     	; 0xa4a <lcd_set_4bit+0x920>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5a       	subi	r16, 0xA3	; 163
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5a       	subi	r24, 0xA7	; 167
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	f8 01       	movw	r30, r16
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	ce 01       	movw	r24, r28
     ad0:	8f 59       	subi	r24, 0x9F	; 159
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	9e 01       	movw	r18, r28
     ad6:	23 5a       	subi	r18, 0xA3	; 163
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	ce 01       	movw	r24, r28
     ae8:	8f 59       	subi	r24, 0x9F	; 159
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8c 01       	movw	r16, r24
     af4:	c8 01       	movw	r24, r16
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_set_4bit+0x9cc>
     afa:	8c 01       	movw	r16, r24
     afc:	ce 01       	movw	r24, r28
     afe:	8f 59       	subi	r24, 0x9F	; 159
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	11 83       	std	Z+1, r17	; 0x01
     b06:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	20 e2       	ldi	r18, 0x20	; 32
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	28 e2       	ldi	r18, 0x28	; 40
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	24 60       	ori	r18, 0x04	; 4
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	9e 01       	movw	r18, r28
     b4a:	2d 59       	subi	r18, 0x9D	; 157
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 ea       	ldi	r26, 0xA0	; 160
     b54:	b0 e4       	ldi	r27, 0x40	; 64
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	09 59       	subi	r16, 0x99	; 153
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ce 01       	movw	r24, r28
     b68:	8d 59       	subi	r24, 0x9D	; 157
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	26 e6       	ldi	r18, 0x66	; 102
     b78:	36 e6       	ldi	r19, 0x66	; 102
     b7a:	46 e6       	ldi	r20, 0x66	; 102
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	f8 01       	movw	r30, r16
     b88:	80 83       	st	Z, r24
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	a2 83       	std	Z+2, r26	; 0x02
     b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b90:	ce 01       	movw	r24, r28
     b92:	89 59       	subi	r24, 0x99	; 153
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <lcd_set_4bit+0xa8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	11 23       	and	r17, r17
     bb6:	49 f0       	breq	.+18     	; 0xbca <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	85 59       	subi	r24, 0x95	; 149
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	74 c0       	rjmp	.+232    	; 0xcb2 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	89 59       	subi	r24, 0x99	; 153
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <lcd_set_4bit+0xac4>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_set_4bit+0xaca>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 59       	subi	r24, 0x9D	; 157
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8e 01       	movw	r16, r28
     c16:	05 59       	subi	r16, 0x95	; 149
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <lcd_set_4bit+0xb52>
     c2e:	ce 01       	movw	r24, r28
     c30:	83 59       	subi	r24, 0x93	; 147
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	20 e7       	ldi	r18, 0x70	; 112
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	20 83       	st	Z, r18
     c3e:	ce 01       	movw	r24, r28
     c40:	83 59       	subi	r24, 0x93	; 147
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	8c 01       	movw	r16, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_set_4bit+0xb24>
     c52:	8c 01       	movw	r16, r24
     c54:	ce 01       	movw	r24, r28
     c56:	83 59       	subi	r24, 0x93	; 147
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 83       	std	Z+1, r17	; 0x01
     c5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	ce 01       	movw	r24, r28
     c62:	85 59       	subi	r24, 0x95	; 149
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	25 59       	subi	r18, 0x95	; 149
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 59       	subi	r24, 0x95	; 149
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	89 f6       	brne	.-94     	; 0xc2e <lcd_set_4bit+0xb04>
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 59       	subi	r16, 0x95	; 149
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	89 59       	subi	r24, 0x99	; 153
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	ce 01       	movw	r24, r28
     cb4:	81 59       	subi	r24, 0x91	; 145
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	25 59       	subi	r18, 0x95	; 149
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	ce 01       	movw	r24, r28
     ccc:	81 59       	subi	r24, 0x91	; 145
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	8c 01       	movw	r16, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <lcd_set_4bit+0xbb0>
     cde:	8c 01       	movw	r16, r24
     ce0:	ce 01       	movw	r24, r28
     ce2:	81 59       	subi	r24, 0x91	; 145
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 83       	std	Z+1, r17	; 0x01
     cea:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	28 e2       	ldi	r18, 0x28	; 40
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	2b 7f       	andi	r18, 0xFB	; 251
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
}
     cfe:	c0 59       	subi	r28, 0x90	; 144
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2e 97       	sbiw	r28, 0x0e	; 14
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e8       	ldi	r26, 0x80	; 128
     d34:	bf e3       	ldi	r27, 0x3F	; 63
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	ab 83       	std	Y+3, r26	; 0x03
     d3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d3e:	69 81       	ldd	r22, Y+1	; 0x01
     d40:	7a 81       	ldd	r23, Y+2	; 0x02
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	26 e6       	ldi	r18, 0x66	; 102
     d48:	36 e6       	ldi	r19, 0x66	; 102
     d4a:	46 e6       	ldi	r20, 0x66	; 102
     d4c:	55 e4       	ldi	r21, 0x45	; 69
     d4e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	af 83       	std	Y+7, r26	; 0x07
     d5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	6d 81       	ldd	r22, Y+5	; 0x05
     d62:	7e 81       	ldd	r23, Y+6	; 0x06
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	0c f0       	brlt	.+2      	; 0xd7a <lcd_init+0x64>
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	11 23       	and	r17, r17
     d7c:	29 f0       	breq	.+10     	; 0xd88 <lcd_init+0x72>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9a 87       	std	Y+10, r25	; 0x0a
     d84:	89 87       	std	Y+9, r24	; 0x09
     d86:	46 c0       	rjmp	.+140    	; 0xe14 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d88:	11 e0       	ldi	r17, 0x01	; 1
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	7e 81       	ldd	r23, Y+6	; 0x06
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	3f ef       	ldi	r19, 0xFF	; 255
     d96:	4f e7       	ldi	r20, 0x7F	; 127
     d98:	57 e4       	ldi	r21, 0x47	; 71
     d9a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     d9e:	18 16       	cp	r1, r24
     da0:	0c f0       	brlt	.+2      	; 0xda4 <lcd_init+0x8e>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	11 23       	and	r17, r17
     da6:	61 f1       	breq	.+88     	; 0xe00 <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	69 81       	ldd	r22, Y+1	; 0x01
     daa:	7a 81       	ldd	r23, Y+2	; 0x02
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9a 87       	std	Y+10, r25	; 0x0a
     dce:	89 87       	std	Y+9, r24	; 0x09
     dd0:	12 c0       	rjmp	.+36     	; 0xdf6 <lcd_init+0xe0>
     dd2:	80 e7       	ldi	r24, 0x70	; 112
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9c 87       	std	Y+12, r25	; 0x0c
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
     dda:	8b 85       	ldd	r24, Y+11	; 0x0b
     ddc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dde:	8c 01       	movw	r16, r24
     de0:	c8 01       	movw	r24, r16
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <lcd_init+0xcc>
     de6:	8c 01       	movw	r16, r24
     de8:	1c 87       	std	Y+12, r17	; 0x0c
     dea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9a 87       	std	Y+10, r25	; 0x0a
     df4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	51 f7       	brne	.-44     	; 0xdd2 <lcd_init+0xbc>
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9a 87       	std	Y+10, r25	; 0x0a
     e12:	89 87       	std	Y+9, r24	; 0x09
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	9e 87       	std	Y+14, r25	; 0x0e
     e1a:	8d 87       	std	Y+13, r24	; 0x0d
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	8c 01       	movw	r16, r24
     e22:	c8 01       	movw	r24, r16
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <lcd_init+0x10e>
     e28:	8c 01       	movw	r16, r24
     e2a:	1e 87       	std	Y+14, r17	; 0x0e
     e2c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     e3a:	86 e0       	ldi	r24, 0x06	; 6
     e3c:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     e40:	8e e0       	ldi	r24, 0x0E	; 14
     e42:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
}
     e4c:	2e 96       	adiw	r28, 0x0e	; 14
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	6e 97       	sbiw	r28, 0x1e	; 30
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e7e:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 7f       	andi	r24, 0xF0	; 240
     e84:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     e86:	88 e2       	ldi	r24, 0x28	; 40
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	28 e2       	ldi	r18, 0x28	; 40
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	f9 01       	movw	r30, r18
     e90:	20 81       	ld	r18, Z
     e92:	2f 70       	andi	r18, 0x0F	; 15
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
	lcd_port |= temp;
     e98:	88 e2       	ldi	r24, 0x28	; 40
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	28 e2       	ldi	r18, 0x28	; 40
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	f9 01       	movw	r30, r18
     ea2:	30 81       	ld	r19, Z
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	23 2b       	or	r18, r19
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     eac:	88 e2       	ldi	r24, 0x28	; 40
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	28 e2       	ldi	r18, 0x28	; 40
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	2e 7f       	andi	r18, 0xFE	; 254
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     ebe:	88 e2       	ldi	r24, 0x28	; 40
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	28 e2       	ldi	r18, 0x28	; 40
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	2d 7f       	andi	r18, 0xFD	; 253
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     ed0:	88 e2       	ldi	r24, 0x28	; 40
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	28 e2       	ldi	r18, 0x28	; 40
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	f9 01       	movw	r30, r18
     eda:	20 81       	ld	r18, Z
     edc:	24 60       	ori	r18, 0x04	; 4
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 ea       	ldi	r26, 0xA0	; 160
     ee8:	b0 e4       	ldi	r27, 0x40	; 64
     eea:	8a 83       	std	Y+2, r24	; 0x02
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	ac 83       	std	Y+4, r26	; 0x04
     ef0:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6a 81       	ldd	r22, Y+2	; 0x02
     ef4:	7b 81       	ldd	r23, Y+3	; 0x03
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	26 e6       	ldi	r18, 0x66	; 102
     efc:	36 e6       	ldi	r19, 0x66	; 102
     efe:	46 e6       	ldi	r20, 0x66	; 102
     f00:	55 e4       	ldi	r21, 0x45	; 69
     f02:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8e 83       	std	Y+6, r24	; 0x06
     f0c:	9f 83       	std	Y+7, r25	; 0x07
     f0e:	a8 87       	std	Y+8, r26	; 0x08
     f10:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f12:	11 e0       	ldi	r17, 0x01	; 1
     f14:	6e 81       	ldd	r22, Y+6	; 0x06
     f16:	7f 81       	ldd	r23, Y+7	; 0x07
     f18:	88 85       	ldd	r24, Y+8	; 0x08
     f1a:	99 85       	ldd	r25, Y+9	; 0x09
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
     f28:	88 23       	and	r24, r24
     f2a:	0c f0       	brlt	.+2      	; 0xf2e <lcd_wr_command+0xcc>
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	11 23       	and	r17, r17
     f30:	29 f0       	breq	.+10     	; 0xf3c <lcd_wr_command+0xda>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9b 87       	std	Y+11, r25	; 0x0b
     f38:	8a 87       	std	Y+10, r24	; 0x0a
     f3a:	46 c0       	rjmp	.+140    	; 0xfc8 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f3c:	11 e0       	ldi	r17, 0x01	; 1
     f3e:	6e 81       	ldd	r22, Y+6	; 0x06
     f40:	7f 81       	ldd	r23, Y+7	; 0x07
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	99 85       	ldd	r25, Y+9	; 0x09
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	0c f0       	brlt	.+2      	; 0xf58 <lcd_wr_command+0xf6>
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	11 23       	and	r17, r17
     f5a:	61 f1       	breq	.+88     	; 0xfb4 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	6a 81       	ldd	r22, Y+2	; 0x02
     f5e:	7b 81       	ldd	r23, Y+3	; 0x03
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9b 87       	std	Y+11, r25	; 0x0b
     f82:	8a 87       	std	Y+10, r24	; 0x0a
     f84:	12 c0       	rjmp	.+36     	; 0xfaa <lcd_wr_command+0x148>
     f86:	80 e7       	ldi	r24, 0x70	; 112
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	9d 87       	std	Y+13, r25	; 0x0d
     f8c:	8c 87       	std	Y+12, r24	; 0x0c
     f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f90:	9d 85       	ldd	r25, Y+13	; 0x0d
     f92:	8c 01       	movw	r16, r24
     f94:	c8 01       	movw	r24, r16
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <lcd_wr_command+0x134>
     f9a:	8c 01       	movw	r16, r24
     f9c:	1d 87       	std	Y+13, r17	; 0x0d
     f9e:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	9b 87       	std	Y+11, r25	; 0x0b
     fa8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	8a 85       	ldd	r24, Y+10	; 0x0a
     fac:	9b 85       	ldd	r25, Y+11	; 0x0b
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	51 f7       	brne	.-44     	; 0xf86 <lcd_wr_command+0x124>
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb4:	6e 81       	ldd	r22, Y+6	; 0x06
     fb6:	7f 81       	ldd	r23, Y+7	; 0x07
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9b 87       	std	Y+11, r25	; 0x0b
     fc6:	8a 87       	std	Y+10, r24	; 0x0a
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	9f 87       	std	Y+15, r25	; 0x0f
     fce:	8e 87       	std	Y+14, r24	; 0x0e
     fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd4:	8c 01       	movw	r16, r24
     fd6:	f8 01       	movw	r30, r16
     fd8:	31 97       	sbiw	r30, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <lcd_wr_command+0x176>
     fdc:	8f 01       	movw	r16, r30
     fde:	1f 87       	std	Y+15, r17	; 0x0f
     fe0:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe2:	88 e2       	ldi	r24, 0x28	; 40
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	28 e2       	ldi	r18, 0x28	; 40
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	2b 7f       	andi	r18, 0xFB	; 251
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
     ff4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffc:	82 95       	swap	r24
     ffe:	80 7f       	andi	r24, 0xF0	; 240
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1002:	88 e2       	ldi	r24, 0x28	; 40
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	28 e2       	ldi	r18, 0x28	; 40
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	2f 70       	andi	r18, 0x0F	; 15
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1014:	88 e2       	ldi	r24, 0x28	; 40
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	28 e2       	ldi	r18, 0x28	; 40
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	30 81       	ld	r19, Z
    1020:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1022:	23 2b       	or	r18, r19
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1028:	88 e2       	ldi	r24, 0x28	; 40
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	28 e2       	ldi	r18, 0x28	; 40
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	2e 7f       	andi	r18, 0xFE	; 254
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    103a:	88 e2       	ldi	r24, 0x28	; 40
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	28 e2       	ldi	r18, 0x28	; 40
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	2d 7f       	andi	r18, 0xFD	; 253
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    104c:	88 e2       	ldi	r24, 0x28	; 40
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	28 e2       	ldi	r18, 0x28	; 40
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	f9 01       	movw	r30, r18
    1056:	20 81       	ld	r18, Z
    1058:	24 60       	ori	r18, 0x04	; 4
    105a:	fc 01       	movw	r30, r24
    105c:	20 83       	st	Z, r18
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 ea       	ldi	r26, 0xA0	; 160
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	88 8b       	std	Y+16, r24	; 0x10
    1068:	99 8b       	std	Y+17, r25	; 0x11
    106a:	aa 8b       	std	Y+18, r26	; 0x12
    106c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    106e:	68 89       	ldd	r22, Y+16	; 0x10
    1070:	79 89       	ldd	r23, Y+17	; 0x11
    1072:	8a 89       	ldd	r24, Y+18	; 0x12
    1074:	9b 89       	ldd	r25, Y+19	; 0x13
    1076:	26 e6       	ldi	r18, 0x66	; 102
    1078:	36 e6       	ldi	r19, 0x66	; 102
    107a:	46 e6       	ldi	r20, 0x66	; 102
    107c:	55 e4       	ldi	r21, 0x45	; 69
    107e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8c 8b       	std	Y+20, r24	; 0x14
    1088:	9d 8b       	std	Y+21, r25	; 0x15
    108a:	ae 8b       	std	Y+22, r26	; 0x16
    108c:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    108e:	11 e0       	ldi	r17, 0x01	; 1
    1090:	6c 89       	ldd	r22, Y+20	; 0x14
    1092:	7d 89       	ldd	r23, Y+21	; 0x15
    1094:	8e 89       	ldd	r24, Y+22	; 0x16
    1096:	9f 89       	ldd	r25, Y+23	; 0x17
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    10a4:	88 23       	and	r24, r24
    10a6:	0c f0       	brlt	.+2      	; 0x10aa <lcd_wr_command+0x248>
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	11 23       	and	r17, r17
    10ac:	29 f0       	breq	.+10     	; 0x10b8 <lcd_wr_command+0x256>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	99 8f       	std	Y+25, r25	; 0x19
    10b4:	88 8f       	std	Y+24, r24	; 0x18
    10b6:	46 c0       	rjmp	.+140    	; 0x1144 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10b8:	11 e0       	ldi	r17, 0x01	; 1
    10ba:	6c 89       	ldd	r22, Y+20	; 0x14
    10bc:	7d 89       	ldd	r23, Y+21	; 0x15
    10be:	8e 89       	ldd	r24, Y+22	; 0x16
    10c0:	9f 89       	ldd	r25, Y+23	; 0x17
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <lcd_wr_command+0x272>
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	11 23       	and	r17, r17
    10d6:	61 f1       	breq	.+88     	; 0x1130 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	68 89       	ldd	r22, Y+16	; 0x10
    10da:	79 89       	ldd	r23, Y+17	; 0x11
    10dc:	8a 89       	ldd	r24, Y+18	; 0x12
    10de:	9b 89       	ldd	r25, Y+19	; 0x13
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	99 8f       	std	Y+25, r25	; 0x19
    10fe:	88 8f       	std	Y+24, r24	; 0x18
    1100:	12 c0       	rjmp	.+36     	; 0x1126 <lcd_wr_command+0x2c4>
    1102:	80 e7       	ldi	r24, 0x70	; 112
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	9b 8f       	std	Y+27, r25	; 0x1b
    1108:	8a 8f       	std	Y+26, r24	; 0x1a
    110a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    110c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    110e:	8c 01       	movw	r16, r24
    1110:	c8 01       	movw	r24, r16
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <lcd_wr_command+0x2b0>
    1116:	8c 01       	movw	r16, r24
    1118:	1b 8f       	std	Y+27, r17	; 0x1b
    111a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	88 8d       	ldd	r24, Y+24	; 0x18
    111e:	99 8d       	ldd	r25, Y+25	; 0x19
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	99 8f       	std	Y+25, r25	; 0x19
    1124:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	88 8d       	ldd	r24, Y+24	; 0x18
    1128:	99 8d       	ldd	r25, Y+25	; 0x19
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	51 f7       	brne	.-44     	; 0x1102 <lcd_wr_command+0x2a0>
    112e:	17 c0       	rjmp	.+46     	; 0x115e <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6c 89       	ldd	r22, Y+20	; 0x14
    1132:	7d 89       	ldd	r23, Y+21	; 0x15
    1134:	8e 89       	ldd	r24, Y+22	; 0x16
    1136:	9f 89       	ldd	r25, Y+23	; 0x17
    1138:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	99 8f       	std	Y+25, r25	; 0x19
    1142:	88 8f       	std	Y+24, r24	; 0x18
    1144:	88 8d       	ldd	r24, Y+24	; 0x18
    1146:	99 8d       	ldd	r25, Y+25	; 0x19
    1148:	9d 8f       	std	Y+29, r25	; 0x1d
    114a:	8c 8f       	std	Y+28, r24	; 0x1c
    114c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    114e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1150:	8c 01       	movw	r16, r24
    1152:	f8 01       	movw	r30, r16
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_command+0x2f2>
    1158:	8f 01       	movw	r16, r30
    115a:	1d 8f       	std	Y+29, r17	; 0x1d
    115c:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    115e:	88 e2       	ldi	r24, 0x28	; 40
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	28 e2       	ldi	r18, 0x28	; 40
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	2b 7f       	andi	r18, 0xFB	; 251
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
}
    1170:	6e 96       	adiw	r28, 0x1e	; 30
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	6e 97       	sbiw	r28, 0x1e	; 30
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a2:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	80 7f       	andi	r24, 0xF0	; 240
    11a8:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11aa:	88 e2       	ldi	r24, 0x28	; 40
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	28 e2       	ldi	r18, 0x28	; 40
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	2f 70       	andi	r18, 0x0F	; 15
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
	lcd_port |= temp;
    11bc:	88 e2       	ldi	r24, 0x28	; 40
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	28 e2       	ldi	r18, 0x28	; 40
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	f9 01       	movw	r30, r18
    11c6:	30 81       	ld	r19, Z
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	23 2b       	or	r18, r19
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    11d0:	88 e2       	ldi	r24, 0x28	; 40
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	28 e2       	ldi	r18, 0x28	; 40
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	f9 01       	movw	r30, r18
    11da:	20 81       	ld	r18, Z
    11dc:	21 60       	ori	r18, 0x01	; 1
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    11e2:	88 e2       	ldi	r24, 0x28	; 40
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	28 e2       	ldi	r18, 0x28	; 40
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	2d 7f       	andi	r18, 0xFD	; 253
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    11f4:	88 e2       	ldi	r24, 0x28	; 40
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	28 e2       	ldi	r18, 0x28	; 40
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f9 01       	movw	r30, r18
    11fe:	20 81       	ld	r18, Z
    1200:	24 60       	ori	r18, 0x04	; 4
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 ea       	ldi	r26, 0xA0	; 160
    120c:	b0 e4       	ldi	r27, 0x40	; 64
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	9b 83       	std	Y+3, r25	; 0x03
    1212:	ac 83       	std	Y+4, r26	; 0x04
    1214:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6a 81       	ldd	r22, Y+2	; 0x02
    1218:	7b 81       	ldd	r23, Y+3	; 0x03
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	26 e6       	ldi	r18, 0x66	; 102
    1220:	36 e6       	ldi	r19, 0x66	; 102
    1222:	46 e6       	ldi	r20, 0x66	; 102
    1224:	55 e4       	ldi	r21, 0x45	; 69
    1226:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8e 83       	std	Y+6, r24	; 0x06
    1230:	9f 83       	std	Y+7, r25	; 0x07
    1232:	a8 87       	std	Y+8, r26	; 0x08
    1234:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1236:	11 e0       	ldi	r17, 0x01	; 1
    1238:	6e 81       	ldd	r22, Y+6	; 0x06
    123a:	7f 81       	ldd	r23, Y+7	; 0x07
    123c:	88 85       	ldd	r24, Y+8	; 0x08
    123e:	99 85       	ldd	r25, Y+9	; 0x09
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    124c:	88 23       	and	r24, r24
    124e:	0c f0       	brlt	.+2      	; 0x1252 <lcd_wr_char+0xcc>
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	11 23       	and	r17, r17
    1254:	29 f0       	breq	.+10     	; 0x1260 <lcd_wr_char+0xda>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9b 87       	std	Y+11, r25	; 0x0b
    125c:	8a 87       	std	Y+10, r24	; 0x0a
    125e:	46 c0       	rjmp	.+140    	; 0x12ec <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1260:	11 e0       	ldi	r17, 0x01	; 1
    1262:	6e 81       	ldd	r22, Y+6	; 0x06
    1264:	7f 81       	ldd	r23, Y+7	; 0x07
    1266:	88 85       	ldd	r24, Y+8	; 0x08
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    1276:	18 16       	cp	r1, r24
    1278:	0c f0       	brlt	.+2      	; 0x127c <lcd_wr_char+0xf6>
    127a:	10 e0       	ldi	r17, 0x00	; 0
    127c:	11 23       	and	r17, r17
    127e:	61 f1       	breq	.+88     	; 0x12d8 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	6a 81       	ldd	r22, Y+2	; 0x02
    1282:	7b 81       	ldd	r23, Y+3	; 0x03
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9b 87       	std	Y+11, r25	; 0x0b
    12a6:	8a 87       	std	Y+10, r24	; 0x0a
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <lcd_wr_char+0x148>
    12aa:	80 e7       	ldi	r24, 0x70	; 112
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	9d 87       	std	Y+13, r25	; 0x0d
    12b0:	8c 87       	std	Y+12, r24	; 0x0c
    12b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b6:	8c 01       	movw	r16, r24
    12b8:	c8 01       	movw	r24, r16
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <lcd_wr_char+0x134>
    12be:	8c 01       	movw	r16, r24
    12c0:	1d 87       	std	Y+13, r17	; 0x0d
    12c2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9b 87       	std	Y+11, r25	; 0x0b
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	51 f7       	brne	.-44     	; 0x12aa <lcd_wr_char+0x124>
    12d6:	17 c0       	rjmp	.+46     	; 0x1306 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6e 81       	ldd	r22, Y+6	; 0x06
    12da:	7f 81       	ldd	r23, Y+7	; 0x07
    12dc:	88 85       	ldd	r24, Y+8	; 0x08
    12de:	99 85       	ldd	r25, Y+9	; 0x09
    12e0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9b 87       	std	Y+11, r25	; 0x0b
    12ea:	8a 87       	std	Y+10, r24	; 0x0a
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	9f 87       	std	Y+15, r25	; 0x0f
    12f2:	8e 87       	std	Y+14, r24	; 0x0e
    12f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f8:	8c 01       	movw	r16, r24
    12fa:	f8 01       	movw	r30, r16
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <lcd_wr_char+0x176>
    1300:	8f 01       	movw	r16, r30
    1302:	1f 87       	std	Y+15, r17	; 0x0f
    1304:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1306:	88 e2       	ldi	r24, 0x28	; 40
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	28 e2       	ldi	r18, 0x28	; 40
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	2b 7f       	andi	r18, 0xFB	; 251
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    1318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    131e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1320:	82 95       	swap	r24
    1322:	80 7f       	andi	r24, 0xF0	; 240
    1324:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1326:	88 e2       	ldi	r24, 0x28	; 40
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	28 e2       	ldi	r18, 0x28	; 40
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	f9 01       	movw	r30, r18
    1330:	20 81       	ld	r18, Z
    1332:	2f 70       	andi	r18, 0x0F	; 15
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
	lcd_port |= letter;
    1338:	88 e2       	ldi	r24, 0x28	; 40
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	28 e2       	ldi	r18, 0x28	; 40
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f9 01       	movw	r30, r18
    1342:	30 81       	ld	r19, Z
    1344:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1346:	23 2b       	or	r18, r19
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    134c:	88 e2       	ldi	r24, 0x28	; 40
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	28 e2       	ldi	r18, 0x28	; 40
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	21 60       	ori	r18, 0x01	; 1
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    135e:	88 e2       	ldi	r24, 0x28	; 40
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	28 e2       	ldi	r18, 0x28	; 40
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	f9 01       	movw	r30, r18
    1368:	20 81       	ld	r18, Z
    136a:	2d 7f       	andi	r18, 0xFD	; 253
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	28 e2       	ldi	r18, 0x28	; 40
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	24 60       	ori	r18, 0x04	; 4
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 ea       	ldi	r26, 0xA0	; 160
    1388:	b0 e4       	ldi	r27, 0x40	; 64
    138a:	88 8b       	std	Y+16, r24	; 0x10
    138c:	99 8b       	std	Y+17, r25	; 0x11
    138e:	aa 8b       	std	Y+18, r26	; 0x12
    1390:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1392:	68 89       	ldd	r22, Y+16	; 0x10
    1394:	79 89       	ldd	r23, Y+17	; 0x11
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	9b 89       	ldd	r25, Y+19	; 0x13
    139a:	26 e6       	ldi	r18, 0x66	; 102
    139c:	36 e6       	ldi	r19, 0x66	; 102
    139e:	46 e6       	ldi	r20, 0x66	; 102
    13a0:	55 e4       	ldi	r21, 0x45	; 69
    13a2:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8c 8b       	std	Y+20, r24	; 0x14
    13ac:	9d 8b       	std	Y+21, r25	; 0x15
    13ae:	ae 8b       	std	Y+22, r26	; 0x16
    13b0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13b2:	11 e0       	ldi	r17, 0x01	; 1
    13b4:	6c 89       	ldd	r22, Y+20	; 0x14
    13b6:	7d 89       	ldd	r23, Y+21	; 0x15
    13b8:	8e 89       	ldd	r24, Y+22	; 0x16
    13ba:	9f 89       	ldd	r25, Y+23	; 0x17
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <lcd_wr_char+0x248>
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	11 23       	and	r17, r17
    13d0:	29 f0       	breq	.+10     	; 0x13dc <lcd_wr_char+0x256>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	99 8f       	std	Y+25, r25	; 0x19
    13d8:	88 8f       	std	Y+24, r24	; 0x18
    13da:	46 c0       	rjmp	.+140    	; 0x1468 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13dc:	11 e0       	ldi	r17, 0x01	; 1
    13de:	6c 89       	ldd	r22, Y+20	; 0x14
    13e0:	7d 89       	ldd	r23, Y+21	; 0x15
    13e2:	8e 89       	ldd	r24, Y+22	; 0x16
    13e4:	9f 89       	ldd	r25, Y+23	; 0x17
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	4f e7       	ldi	r20, 0x7F	; 127
    13ec:	57 e4       	ldi	r21, 0x47	; 71
    13ee:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    13f2:	18 16       	cp	r1, r24
    13f4:	0c f0       	brlt	.+2      	; 0x13f8 <lcd_wr_char+0x272>
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	11 23       	and	r17, r17
    13fa:	61 f1       	breq	.+88     	; 0x1454 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	68 89       	ldd	r22, Y+16	; 0x10
    13fe:	79 89       	ldd	r23, Y+17	; 0x11
    1400:	8a 89       	ldd	r24, Y+18	; 0x12
    1402:	9b 89       	ldd	r25, Y+19	; 0x13
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	99 8f       	std	Y+25, r25	; 0x19
    1422:	88 8f       	std	Y+24, r24	; 0x18
    1424:	12 c0       	rjmp	.+36     	; 0x144a <lcd_wr_char+0x2c4>
    1426:	80 e7       	ldi	r24, 0x70	; 112
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	9b 8f       	std	Y+27, r25	; 0x1b
    142c:	8a 8f       	std	Y+26, r24	; 0x1a
    142e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1430:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1432:	8c 01       	movw	r16, r24
    1434:	c8 01       	movw	r24, r16
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <lcd_wr_char+0x2b0>
    143a:	8c 01       	movw	r16, r24
    143c:	1b 8f       	std	Y+27, r17	; 0x1b
    143e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	88 8d       	ldd	r24, Y+24	; 0x18
    1442:	99 8d       	ldd	r25, Y+25	; 0x19
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	99 8f       	std	Y+25, r25	; 0x19
    1448:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	88 8d       	ldd	r24, Y+24	; 0x18
    144c:	99 8d       	ldd	r25, Y+25	; 0x19
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	51 f7       	brne	.-44     	; 0x1426 <lcd_wr_char+0x2a0>
    1452:	17 c0       	rjmp	.+46     	; 0x1482 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6c 89       	ldd	r22, Y+20	; 0x14
    1456:	7d 89       	ldd	r23, Y+21	; 0x15
    1458:	8e 89       	ldd	r24, Y+22	; 0x16
    145a:	9f 89       	ldd	r25, Y+23	; 0x17
    145c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	99 8f       	std	Y+25, r25	; 0x19
    1466:	88 8f       	std	Y+24, r24	; 0x18
    1468:	88 8d       	ldd	r24, Y+24	; 0x18
    146a:	99 8d       	ldd	r25, Y+25	; 0x19
    146c:	9d 8f       	std	Y+29, r25	; 0x1d
    146e:	8c 8f       	std	Y+28, r24	; 0x1c
    1470:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1472:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1474:	8c 01       	movw	r16, r24
    1476:	f8 01       	movw	r30, r16
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <lcd_wr_char+0x2f2>
    147c:	8f 01       	movw	r16, r30
    147e:	1d 8f       	std	Y+29, r17	; 0x1d
    1480:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1482:	88 e2       	ldi	r24, 0x28	; 40
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	28 e2       	ldi	r18, 0x28	; 40
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	2b 7f       	andi	r18, 0xFB	; 251
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
}
    1494:	6e 96       	adiw	r28, 0x1e	; 30
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <lcd_home>:


void lcd_home()
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14b2:	80 e8       	ldi	r24, 0x80	; 128
    14b4:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	0f 92       	push	r0
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	fc 01       	movw	r30, r24
    14d6:	80 81       	ld	r24, Z
    14d8:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		str++;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	79 f7       	brne	.-34     	; 0x14d0 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	0f 92       	push	r0
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	91 05       	cpc	r25, r1
    1516:	99 f0       	breq	.+38     	; 0x153e <lcd_cursor+0x42>
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	24 f4       	brge	.+8      	; 0x1526 <lcd_cursor+0x2a>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	41 f0       	breq	.+16     	; 0x1534 <lcd_cursor+0x38>
    1524:	1b c0       	rjmp	.+54     	; 0x155c <lcd_cursor+0x60>
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	71 f0       	breq	.+28     	; 0x1548 <lcd_cursor+0x4c>
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <lcd_cursor+0x56>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	81 58       	subi	r24, 0x81	; 129
    1538:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    153c:	10 c0       	rjmp	.+32     	; 0x155e <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	81 54       	subi	r24, 0x41	; 65
    1542:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    1546:	0b c0       	rjmp	.+22     	; 0x155e <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	8d 56       	subi	r24, 0x6D	; 109
    154c:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    1550:	06 c0       	rjmp	.+12     	; 0x155e <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	8d 52       	subi	r24, 0x2D	; 45
    1556:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <lcd_cursor+0x62>
		default: break;
    155c:	00 00       	nop
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	27 97       	sbiw	r28, 0x07	; 7
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	6b 83       	std	Y+3, r22	; 0x03
    1580:	5d 83       	std	Y+5, r21	; 0x05
    1582:	4c 83       	std	Y+4, r20	; 0x04
    1584:	3f 83       	std	Y+7, r19	; 0x07
    1586:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1588:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	88 23       	and	r24, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <lcd_print+0x2e>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 23       	and	r24, r24
    1594:	19 f4       	brne	.+6      	; 0x159c <lcd_print+0x34>
	{
		lcd_home();
    1596:	0e 94 55 0a 	call	0x14aa	; 0x14aa <lcd_home>
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	6b 81       	ldd	r22, Y+3	; 0x03
    15a0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15a4:	8e 81       	ldd	r24, Y+6	; 0x06
    15a6:	9f 81       	ldd	r25, Y+7	; 0x07
    15a8:	85 30       	cpi	r24, 0x05	; 5
    15aa:	91 05       	cpc	r25, r1
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <lcd_print+0x4c>
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	b1 f4       	brne	.+44     	; 0x15e0 <lcd_print+0x78>
	{
		million=value/10000+48;
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	20 e1       	ldi	r18, 0x10	; 16
    15ba:	37 e2       	ldi	r19, 0x27	; 39
    15bc:	b9 01       	movw	r22, r18
    15be:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    15c2:	9b 01       	movw	r18, r22
    15c4:	c9 01       	movw	r24, r18
    15c6:	c0 96       	adiw	r24, 0x30	; 48
    15c8:	90 93 52 02 	sts	0x0252, r25
    15cc:	80 93 51 02 	sts	0x0251, r24
		lcd_wr_char(million);
    15d0:	80 91 51 02 	lds	r24, 0x0251
    15d4:	90 91 52 02 	lds	r25, 0x0252
    15d8:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	9f 81       	ldd	r25, Y+7	; 0x07
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	91 05       	cpc	r25, r1
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <lcd_print+0x88>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	19 f5       	brne	.+70     	; 0x1636 <lcd_print+0xce>
	{
		temp = value/1000;
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	28 ee       	ldi	r18, 0xE8	; 232
    15f6:	33 e0       	ldi	r19, 0x03	; 3
    15f8:	b9 01       	movw	r22, r18
    15fa:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    15fe:	9b 01       	movw	r18, r22
    1600:	c9 01       	movw	r24, r18
    1602:	90 93 56 02 	sts	0x0256, r25
    1606:	80 93 55 02 	sts	0x0255, r24
		thousand = temp%10 + 48;
    160a:	80 91 55 02 	lds	r24, 0x0255
    160e:	90 91 56 02 	lds	r25, 0x0256
    1612:	2a e0       	ldi	r18, 0x0A	; 10
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	b9 01       	movw	r22, r18
    1618:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    161c:	c0 96       	adiw	r24, 0x30	; 48
    161e:	90 93 6a 02 	sts	0x026A, r25
    1622:	80 93 69 02 	sts	0x0269, r24
		lcd_wr_char(thousand);
    1626:	80 91 69 02 	lds	r24, 0x0269
    162a:	90 91 6a 02 	lds	r25, 0x026A
    162e:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	19 f0       	breq	.+6      	; 0x1646 <lcd_print+0xde>
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	19 f5       	brne	.+70     	; 0x168c <lcd_print+0x124>
	{
		temp = value/100;
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	24 e6       	ldi	r18, 0x64	; 100
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b9 01       	movw	r22, r18
    1650:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    1654:	9b 01       	movw	r18, r22
    1656:	c9 01       	movw	r24, r18
    1658:	90 93 56 02 	sts	0x0256, r25
    165c:	80 93 55 02 	sts	0x0255, r24
		hundred = temp%10 + 48;
    1660:	80 91 55 02 	lds	r24, 0x0255
    1664:	90 91 56 02 	lds	r25, 0x0256
    1668:	2a e0       	ldi	r18, 0x0A	; 10
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	b9 01       	movw	r22, r18
    166e:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    1672:	c0 96       	adiw	r24, 0x30	; 48
    1674:	90 93 66 02 	sts	0x0266, r25
    1678:	80 93 65 02 	sts	0x0265, r24
		lcd_wr_char(hundred);
    167c:	80 91 65 02 	lds	r24, 0x0265
    1680:	90 91 66 02 	lds	r25, 0x0266
    1684:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	19 f0       	breq	.+6      	; 0x169c <lcd_print+0x134>
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	19 f5       	brne	.+70     	; 0x16e2 <lcd_print+0x17a>
	{
		temp = value/10;
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    16aa:	9b 01       	movw	r18, r22
    16ac:	c9 01       	movw	r24, r18
    16ae:	90 93 56 02 	sts	0x0256, r25
    16b2:	80 93 55 02 	sts	0x0255, r24
		tens = temp%10 + 48;
    16b6:	80 91 55 02 	lds	r24, 0x0255
    16ba:	90 91 56 02 	lds	r25, 0x0256
    16be:	2a e0       	ldi	r18, 0x0A	; 10
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    16c8:	c0 96       	adiw	r24, 0x30	; 48
    16ca:	90 93 5f 02 	sts	0x025F, r25
    16ce:	80 93 5e 02 	sts	0x025E, r24
		lcd_wr_char(tens);
    16d2:	80 91 5e 02 	lds	r24, 0x025E
    16d6:	90 91 5f 02 	lds	r25, 0x025F
    16da:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	9f 81       	ldd	r25, Y+7	; 0x07
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <lcd_print+0x18a>
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	91 f4       	brne	.+36     	; 0x1716 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	b9 01       	movw	r22, r18
    16fc:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodhi4>
    1700:	c0 96       	adiw	r24, 0x30	; 48
    1702:	90 93 68 02 	sts	0x0268, r25
    1706:	80 93 67 02 	sts	0x0267, r24
		lcd_wr_char(unit);
    170a:	80 91 67 02 	lds	r24, 0x0267
    170e:	90 91 68 02 	lds	r25, 0x0268
    1712:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
	}
	if(digits>5)
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	86 30       	cpi	r24, 0x06	; 6
    171c:	91 05       	cpc	r25, r1
    171e:	1c f0       	brlt	.+6      	; 0x1726 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1720:	85 e4       	ldi	r24, 0x45	; 69
    1722:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
	}
}
    1726:	27 96       	adiw	r28, 0x07	; 7
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <lcd_port_config>:
float BATT_Voltage;
int Line_Align;				// 0: It needs to turn RIGHT;		1: It needs to turn LEFT

//Function to configure LCD port
void lcd_port_config (void)
{
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1740:	87 e2       	ldi	r24, 0x27	; 39
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	27 e2       	ldi	r18, 0x27	; 39
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	f9 01       	movw	r30, r18
    174a:	20 81       	ld	r18, Z
    174c:	27 6f       	ori	r18, 0xF7	; 247
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1752:	88 e2       	ldi	r24, 0x28	; 40
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	28 e2       	ldi	r18, 0x28	; 40
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f9 01       	movw	r30, r18
    175c:	20 81       	ld	r18, Z
    175e:	20 78       	andi	r18, 0x80	; 128
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1772:	80 e3       	ldi	r24, 0x30	; 48
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	fc 01       	movw	r30, r24
    1778:	10 82       	st	Z, r1
 PORTF = 0x00;
    177a:	81 e3       	ldi	r24, 0x31	; 49
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	fc 01       	movw	r30, r24
    1780:	10 82       	st	Z, r1
 DDRK = 0x00;
    1782:	87 e0       	ldi	r24, 0x07	; 7
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	fc 01       	movw	r30, r24
    1788:	10 82       	st	Z, r1
 PORTK = 0x00;
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	fc 01       	movw	r30, r24
    1790:	10 82       	st	Z, r1
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    17a0:	81 e2       	ldi	r24, 0x21	; 33
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	21 e2       	ldi	r18, 0x21	; 33
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	20 81       	ld	r18, Z
    17ac:	2f 60       	ori	r18, 0x0F	; 15
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    17b2:	82 e2       	ldi	r24, 0x22	; 34
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	22 e2       	ldi	r18, 0x22	; 34
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	20 7f       	andi	r18, 0xF0	; 240
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	2a e0       	ldi	r18, 0x0A	; 10
    17ca:	31 e0       	ldi	r19, 0x01	; 1
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	28 61       	ori	r18, 0x18	; 24
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    17d6:	8b e0       	ldi	r24, 0x0B	; 11
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	2b e0       	ldi	r18, 0x0B	; 11
    17dc:	31 e0       	ldi	r19, 0x01	; 1
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	28 61       	ori	r18, 0x18	; 24
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    17f6:	84 e2       	ldi	r24, 0x24	; 36
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	24 e2       	ldi	r18, 0x24	; 36
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	f9 01       	movw	r30, r18
    1800:	20 81       	ld	r18, Z
    1802:	20 62       	ori	r18, 0x20	; 32
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1808:	85 e2       	ldi	r24, 0x25	; 37
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	25 e2       	ldi	r18, 0x25	; 37
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	20 62       	ori	r18, 0x20	; 32
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
}
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1828:	84 e2       	ldi	r24, 0x24	; 36
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	24 e2       	ldi	r18, 0x24	; 36
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	20 64       	ori	r18, 0x40	; 64
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    183a:	85 e2       	ldi	r24, 0x25	; 37
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	25 e2       	ldi	r18, 0x25	; 37
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	20 64       	ori	r18, 0x40	; 64
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    185a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <lcd_port_config>
	adc_pin_config();
    185e:	0e 94 b5 0b 	call	0x176a	; 0x176a <adc_pin_config>
	motion_pin_config();
    1862:	0e 94 cc 0b 	call	0x1798	; 0x1798 <motion_pin_config>
        servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1866:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <servo1_pin_config>
        servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    186a:	0e 94 10 0c 	call	0x1820	; 0x1820 <servo2_pin_config>
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    187c:	81 e8       	ldi	r24, 0x81	; 129
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1884:	85 e8       	ldi	r24, 0x85	; 133
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	2c ef       	ldi	r18, 0xFC	; 252
    188a:	fc 01       	movw	r30, r24
    188c:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    188e:	84 e8       	ldi	r24, 0x84	; 132
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1898:	89 e8       	ldi	r24, 0x89	; 137
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	23 e0       	ldi	r18, 0x03	; 3
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    18a2:	88 e8       	ldi	r24, 0x88	; 136
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	2f ef       	ldi	r18, 0xFF	; 255
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    18ac:	8b e8       	ldi	r24, 0x8B	; 139
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	23 e0       	ldi	r18, 0x03	; 3
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    18b6:	8a e8       	ldi	r24, 0x8A	; 138
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	2f ef       	ldi	r18, 0xFF	; 255
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    18c0:	8d e8       	ldi	r24, 0x8D	; 141
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	23 e0       	ldi	r18, 0x03	; 3
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    18ca:	8c e8       	ldi	r24, 0x8C	; 140
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	fc 01       	movw	r30, r24
    18d2:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    18d4:	87 e8       	ldi	r24, 0x87	; 135
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	23 e0       	ldi	r18, 0x03	; 3
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    18de:	86 e8       	ldi	r24, 0x86	; 134
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	2f ef       	ldi	r18, 0xFF	; 255
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    18e8:	80 e8       	ldi	r24, 0x80	; 128
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	2b ea       	ldi	r18, 0xAB	; 171
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    18f2:	82 e8       	ldi	r24, 0x82	; 130
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    18fa:	81 e8       	ldi	r24, 0x81	; 129
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2c e0       	ldi	r18, 0x0C	; 12
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	fc 01       	movw	r30, r24
    1918:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    191a:	85 e2       	ldi	r24, 0x25	; 37
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1924:	84 e2       	ldi	r24, 0x24	; 36
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    192e:	89 e2       	ldi	r24, 0x29	; 41
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	fc 01       	movw	r30, r24
    1934:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1936:	88 e2       	ldi	r24, 0x28	; 40
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	2f ef       	ldi	r18, 0xFF	; 255
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1940:	8b e2       	ldi	r24, 0x2B	; 43
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	fc 01       	movw	r30, r24
    1946:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1948:	8a e2       	ldi	r24, 0x2A	; 42
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	fc 01       	movw	r30, r24
    1950:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1952:	8d e2       	ldi	r24, 0x2D	; 45
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	fc 01       	movw	r30, r24
    1958:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    195a:	8c e2       	ldi	r24, 0x2C	; 44
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	2f ef       	ldi	r18, 0xFF	; 255
    1960:	fc 01       	movw	r30, r24
    1962:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	29 ea       	ldi	r18, 0xA9	; 169
    196a:	fc 01       	movw	r30, r24
    196c:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    196e:	81 e2       	ldi	r24, 0x21	; 33
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	2b e0       	ldi	r18, 0x0B	; 11
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <adc_init>:

//Fuction to initialize ADC
void adc_init()
{
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1986:	8a e7       	ldi	r24, 0x7A	; 122
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    198e:	8b e7       	ldi	r24, 0x7B	; 123
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1996:	8c e7       	ldi	r24, 0x7C	; 124
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	20 e2       	ldi	r18, 0x20	; 32
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
	ACSR = 0x80;
    19a0:	80 e5       	ldi	r24, 0x50	; 80
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	20 e8       	ldi	r18, 0x80	; 128
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    19aa:	8a e7       	ldi	r24, 0x7A	; 122
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	26 e8       	ldi	r18, 0x86	; 134
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	0f 92       	push	r0
    19c0:	0f 92       	push	r0
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	88 30       	cpi	r24, 0x08	; 8
    19cc:	28 f0       	brcs	.+10     	; 0x19d8 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    19ce:	8b e7       	ldi	r24, 0x7B	; 123
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	28 e0       	ldi	r18, 0x08	; 8
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	87 70       	andi	r24, 0x07	; 7
    19dc:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    19de:	8c e7       	ldi	r24, 0x7C	; 124
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	2a 81       	ldd	r18, Y+2	; 0x02
    19e4:	20 62       	ori	r18, 0x20	; 32
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    19ea:	8a e7       	ldi	r24, 0x7A	; 122
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	2a e7       	ldi	r18, 0x7A	; 122
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	20 81       	ld	r18, Z
    19f6:	20 64       	ori	r18, 0x40	; 64
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    19fc:	00 00       	nop
    19fe:	8a e7       	ldi	r24, 0x7A	; 122
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	fc 01       	movw	r30, r24
    1a04:	80 81       	ld	r24, Z
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	80 71       	andi	r24, 0x10	; 16
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	b1 f3       	breq	.-20     	; 0x19fe <ADC_Conversion+0x44>
	a=ADCH;
    1a12:	89 e7       	ldi	r24, 0x79	; 121
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	fc 01       	movw	r30, r24
    1a18:	80 81       	ld	r24, Z
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1a1c:	8a e7       	ldi	r24, 0x7A	; 122
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	2a e7       	ldi	r18, 0x7A	; 122
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	f9 01       	movw	r30, r18
    1a26:	20 81       	ld	r18, Z
    1a28:	20 61       	ori	r18, 0x10	; 16
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    1a2e:	8b e7       	ldi	r24, 0x7B	; 123
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	fc 01       	movw	r30, r24
    1a34:	10 82       	st	Z, r1
	return a;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	0f 92       	push	r0
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1a52:	88 e2       	ldi	r24, 0x28	; 40
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1a5c:	8a e2       	ldi	r24, 0x2A	; 42
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	2a 81       	ldd	r18, Y+2	; 0x02
    1a62:	fc 01       	movw	r30, r24
    1a64:	20 83       	st	Z, r18
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <encoder_pin_config>:

//Function to configure INT4/INT5 (PORTE 4) pin as input for the left position encoder
void encoder_pin_config (void)
{
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	DDRE  = 0b11001111;  //Set the direction of the PORTE 4 pin as input
    1a78:	8d e2       	ldi	r24, 0x2D	; 45
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	2f ec       	ldi	r18, 0xCF	; 207
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
	PORTE = 0b00110000; //Enable internal pull-up for PORTE 4 pin
    1a82:	8e e2       	ldi	r24, 0x2E	; 46
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	20 e3       	ldi	r18, 0x30	; 48
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <left_position_encoder_interrupt_init>:


//Interrupt 4 enable
void left_position_encoder_interrupt_init (void) 
{
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1a9a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1a9c:	8a e6       	ldi	r24, 0x6A	; 106
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	2a e6       	ldi	r18, 0x6A	; 106
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	f9 01       	movw	r30, r18
    1aa6:	20 81       	ld	r18, Z
    1aa8:	22 60       	ori	r18, 0x02	; 2
    1aaa:	fc 01       	movw	r30, r24
    1aac:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1aae:	8d e3       	ldi	r24, 0x3D	; 61
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	2d e3       	ldi	r18, 0x3D	; 61
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	20 81       	ld	r18, Z
    1aba:	20 61       	ori	r18, 0x10	; 16
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1ac0:	78 94       	sei
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <right_position_encoder_interrupt_init>:

//Interrupt 5 enable
void right_position_encoder_interrupt_init (void) 
{
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1ad0:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1ad2:	8a e6       	ldi	r24, 0x6A	; 106
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	2a e6       	ldi	r18, 0x6A	; 106
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	f9 01       	movw	r30, r18
    1adc:	20 81       	ld	r18, Z
    1ade:	28 60       	ori	r18, 0x08	; 8
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1ae4:	8d e3       	ldi	r24, 0x3D	; 61
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	2d e3       	ldi	r18, 0x3D	; 61
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	f9 01       	movw	r30, r18
    1aee:	20 81       	ld	r18, Z
    1af0:	20 62       	ori	r18, 0x20	; 32
    1af2:	fc 01       	movw	r30, r24
    1af4:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1af6:	78 94       	sei
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1b18:	80 91 4b 02 	lds	r24, 0x024B
    1b1c:	90 91 4c 02 	lds	r25, 0x024C
    1b20:	a0 91 4d 02 	lds	r26, 0x024D
    1b24:	b0 91 4e 02 	lds	r27, 0x024E
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	a1 1d       	adc	r26, r1
    1b2c:	b1 1d       	adc	r27, r1
    1b2e:	80 93 4b 02 	sts	0x024B, r24
    1b32:	90 93 4c 02 	sts	0x024C, r25
    1b36:	a0 93 4d 02 	sts	0x024D, r26
    1b3a:	b0 93 4e 02 	sts	0x024E, r27
}
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    1b6e:	80 91 47 02 	lds	r24, 0x0247
    1b72:	90 91 48 02 	lds	r25, 0x0248
    1b76:	a0 91 49 02 	lds	r26, 0x0249
    1b7a:	b0 91 4a 02 	lds	r27, 0x024A
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	b1 1d       	adc	r27, r1
    1b84:	80 93 47 02 	sts	0x0247, r24
    1b88:	90 93 48 02 	sts	0x0248, r25
    1b8c:	a0 93 49 02 	sts	0x0249, r26
    1b90:	b0 93 4a 02 	sts	0x024A, r27
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	bf 91       	pop	r27
    1b9a:	af 91       	pop	r26
    1b9c:	9f 91       	pop	r25
    1b9e:	8f 91       	pop	r24
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti

00001baa <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <print_sensor+0x6>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	6a 83       	std	Y+2, r22	; 0x02
    1bb8:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    1bc0:	80 93 57 02 	sts	0x0257, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1bc4:	80 91 57 02 	lds	r24, 0x0257
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd0:	a9 01       	movw	r20, r18
    1bd2:	23 e0       	ldi	r18, 0x03	; 3
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	2a 97       	sbiw	r28, 0x0a	; 10
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	9a 87       	std	Y+10, r25	; 0x0a
    1bfc:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	dc 01       	movw	r26, r24
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	ab 83       	std	Y+3, r26	; 0x03
    1c0a:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1c0c:	1d 82       	std	Y+5, r1	; 0x05
    1c0e:	1e 82       	std	Y+6, r1	; 0x06
    1c10:	1f 82       	std	Y+7, r1	; 0x07
    1c12:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	cc 01       	movw	r24, r24
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatunsisf>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	28 e4       	ldi	r18, 0x48	; 72
    1c30:	31 ee       	ldi	r19, 0xE1	; 225
    1c32:	42 e8       	ldi	r20, 0x82	; 130
    1c34:	50 e4       	ldi	r21, 0x40	; 64
    1c36:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	ab 83       	std	Y+3, r26	; 0x03
    1c44:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1c46:	69 81       	ldd	r22, Y+1	; 0x01
    1c48:	7a 81       	ldd	r23, Y+2	; 0x02
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	cc 01       	movw	r24, r24
    1c58:	a0 e0       	ldi	r26, 0x00	; 0
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	af 83       	std	Y+7, r26	; 0x07
    1c62:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    1c64:	10 92 4b 02 	sts	0x024B, r1
    1c68:	10 92 4c 02 	sts	0x024C, r1
    1c6c:	10 92 4d 02 	sts	0x024D, r1
    1c70:	10 92 4e 02 	sts	0x024E, r1
	ShaftCountLeft = 0;
    1c74:	10 92 47 02 	sts	0x0247, r1
    1c78:	10 92 48 02 	sts	0x0248, r1
    1c7c:	10 92 49 02 	sts	0x0249, r1
    1c80:	10 92 4a 02 	sts	0x024A, r1
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    1c86:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1c88:	20 91 4b 02 	lds	r18, 0x024B
    1c8c:	30 91 4c 02 	lds	r19, 0x024C
    1c90:	40 91 4d 02 	lds	r20, 0x024D
    1c94:	50 91 4e 02 	lds	r21, 0x024E
    1c98:	71 e0       	ldi	r23, 0x01	; 1
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	af 81       	ldd	r26, Y+7	; 0x07
    1ca0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ca2:	28 17       	cp	r18, r24
    1ca4:	39 07       	cpc	r19, r25
    1ca6:	4a 07       	cpc	r20, r26
    1ca8:	5b 07       	cpc	r21, r27
    1caa:	08 f4       	brcc	.+2      	; 0x1cae <angle_rotate+0xc8>
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	20 91 47 02 	lds	r18, 0x0247
    1cb2:	30 91 48 02 	lds	r19, 0x0248
    1cb6:	40 91 49 02 	lds	r20, 0x0249
    1cba:	50 91 4a 02 	lds	r21, 0x024A
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	af 81       	ldd	r26, Y+7	; 0x07
    1cc6:	b8 85       	ldd	r27, Y+8	; 0x08
    1cc8:	28 17       	cp	r18, r24
    1cca:	39 07       	cpc	r19, r25
    1ccc:	4a 07       	cpc	r20, r26
    1cce:	5b 07       	cpc	r21, r27
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <angle_rotate+0xee>
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	87 2f       	mov	r24, r23
    1cd6:	86 2b       	or	r24, r22
    1cd8:	88 23       	and	r24, r24
    1cda:	a9 f2       	breq	.-86     	; 0x1c86 <angle_rotate+0xa0>
		break;
    1cdc:	00 00       	nop
	}
}
    1cde:	2a 96       	adiw	r28, 0x0a	; 10
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	08 95       	ret

00001cf0 <linear_distance_mm>:

//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	2a 97       	sbiw	r28, 0x0a	; 10
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	9a 87       	std	Y+10, r25	; 0x0a
    1d06:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	ab 83       	std	Y+3, r26	; 0x03
    1d14:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1d16:	1d 82       	std	Y+5, r1	; 0x05
    1d18:	1e 82       	std	Y+6, r1	; 0x06
    1d1a:	1f 82       	std	Y+7, r1	; 0x07
    1d1c:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	cc 01       	movw	r24, r24
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatunsisf>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	25 ee       	ldi	r18, 0xE5	; 229
    1d3a:	30 ed       	ldi	r19, 0xD0	; 208
    1d3c:	4a ea       	ldi	r20, 0xAA	; 170
    1d3e:	50 e4       	ldi	r21, 0x40	; 64
    1d40:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	ab 83       	std	Y+3, r26	; 0x03
    1d4e:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1d50:	69 81       	ldd	r22, Y+1	; 0x01
    1d52:	7a 81       	ldd	r23, Y+2	; 0x02
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	af 83       	std	Y+7, r26	; 0x07
    1d66:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    1d68:	10 92 4b 02 	sts	0x024B, r1
    1d6c:	10 92 4c 02 	sts	0x024C, r1
    1d70:	10 92 4d 02 	sts	0x024D, r1
    1d74:	10 92 4e 02 	sts	0x024E, r1
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1d7a:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1d7c:	20 91 4b 02 	lds	r18, 0x024B
    1d80:	30 91 4c 02 	lds	r19, 0x024C
    1d84:	40 91 4d 02 	lds	r20, 0x024D
    1d88:	50 91 4e 02 	lds	r21, 0x024E
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	af 81       	ldd	r26, Y+7	; 0x07
    1d92:	b8 85       	ldd	r27, Y+8	; 0x08
    1d94:	82 17       	cp	r24, r18
    1d96:	93 07       	cpc	r25, r19
    1d98:	a4 07       	cpc	r26, r20
    1d9a:	b5 07       	cpc	r27, r21
    1d9c:	70 f7       	brcc	.-36     	; 0x1d7a <linear_distance_mm+0x8a>
		{
			break;
    1d9e:	00 00       	nop
		}
	}
}
    1da0:	2a 96       	adiw	r28, 0x0a	; 10
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <uart0_init>:

//Fuction to Initialize UART0
void uart0_init(void)
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00; //disable while setting baud rate
    1dba:	81 ec       	ldi	r24, 0xC1	; 193
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    1dc2:	80 ec       	ldi	r24, 0xC0	; 192
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    1dca:	82 ec       	ldi	r24, 0xC2	; 194
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	26 e0       	ldi	r18, 0x06	; 6
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
	UBRR0L = 0x5F; //set baud rate lo
    1dd4:	84 ec       	ldi	r24, 0xC4	; 196
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	2f e5       	ldi	r18, 0x5F	; 95
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
	UBRR0H = 0x00; //set baud rate hi
    1dde:	85 ec       	ldi	r24, 0xC5	; 197
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	fc 01       	movw	r30, r24
    1de4:	10 82       	st	Z, r1
	UCSR0B = 0x98;
    1de6:	81 ec       	ldi	r24, 0xC1	; 193
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	28 e9       	ldi	r18, 0x98	; 152
    1dec:	fc 01       	movw	r30, r24
    1dee:	20 83       	st	Z, r18
}
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <send>:

//Function to send Data
unsigned send (data)
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	0f 92       	push	r0
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
	UDR0=data;
    1e06:	86 ec       	ldi	r24, 0xC6	; 198
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	29 81       	ldd	r18, Y+1	; 0x01
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 83       	st	Z, r18
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <forward>:

void forward (void) //both wheels forward
{
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
  PORTA = 0x06;
    1e22:	82 e2       	ldi	r24, 0x22	; 34
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	26 e0       	ldi	r18, 0x06	; 6
    1e28:	fc 01       	movw	r30, r24
    1e2a:	20 83       	st	Z, r18
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <back>:

void back (void) //both wheels backward
{
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
  PORTA = 0x09;
    1e3a:	82 e2       	ldi	r24, 0x22	; 34
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	29 e0       	ldi	r18, 0x09	; 9
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
}
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
  PORTA = 0x05;
    1e52:	82 e2       	ldi	r24, 0x22	; 34
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	25 e0       	ldi	r18, 0x05	; 5
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18
}
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
  PORTA = 0x0A;
    1e6a:	82 e2       	ldi	r24, 0x22	; 34
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2a e0       	ldi	r18, 0x0A	; 10
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 83       	st	Z, r18
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <soft_left>:
void soft_left (void) //Left wheel stationary, Right wheel forward
{
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x04;
    1e82:	82 e2       	ldi	r24, 0x22	; 34
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	24 e0       	ldi	r18, 0x04	; 4
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x02;
    1e9a:	82 e2       	ldi	r24, 0x22	; 34
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	22 e0       	ldi	r18, 0x02	; 2
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 83       	st	Z, r18
}
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x01;
    1eb2:	82 e2       	ldi	r24, 0x22	; 34
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	fc 01       	movw	r30, r24
    1eba:	20 83       	st	Z, r18
}
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

00001ec2 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x08;
    1eca:	82 e2       	ldi	r24, 0x22	; 34
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	28 e0       	ldi	r18, 0x08	; 8
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
}
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	08 95       	ret

00001eda <stop>:

void stop (void) //hard stop
{
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
  PORTA = 0x00;
    1ee2:	82 e2       	ldi	r24, 0x22	; 34
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	10 82       	st	Z, r1
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <init_devices>:


void init_devices (void)
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    1ef8:	f8 94       	cli
	port_init();
    1efa:	0e 94 29 0c 	call	0x1852	; 0x1852 <port_init>
	uart0_init();
    1efe:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <uart0_init>
	adc_init();
    1f02:	0e 94 bf 0c 	call	0x197e	; 0x197e <adc_init>
	timer5_init();
    1f06:	0e 94 85 0c 	call	0x190a	; 0x190a <timer5_init>
	timer1_init();
    1f0a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <timer1_init>
	encoder_pin_config ();
    1f0e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <encoder_pin_config>
	left_position_encoder_interrupt_init();
    1f12:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1f16:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <right_position_encoder_interrupt_init>
	
	sei();   //Enables the global interrupts
    1f1a:	78 94       	sei
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <servo_1+0xa>
    1f2c:	0f 92       	push	r0
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	ab 83       	std	Y+3, r26	; 0x03
    1f42:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatunsisf>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	2b e7       	ldi	r18, 0x7B	; 123
    1f60:	34 e1       	ldi	r19, 0x14	; 20
    1f62:	4e ee       	ldi	r20, 0xEE	; 238
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4c e0       	ldi	r20, 0x0C	; 12
    1f78:	52 e4       	ldi	r21, 0x42	; 66
    1f7a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__addsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	ab 83       	std	Y+3, r26	; 0x03
    1f88:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    1f8a:	89 e8       	ldi	r24, 0x89	; 137
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	fc 01       	movw	r30, r24
    1f90:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    1f92:	08 e8       	ldi	r16, 0x88	; 136
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	69 81       	ldd	r22, Y+1	; 0x01
    1f98:	7a 81       	ldd	r23, Y+2	; 0x02
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 83       	st	Z, r24
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <servo_2+0xa>
    1fc8:	0f 92       	push	r0
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	ab 83       	std	Y+3, r26	; 0x03
    1fde:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e0       	ldi	r26, 0x00	; 0
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatunsisf>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	2b e7       	ldi	r18, 0x7B	; 123
    1ffc:	34 e1       	ldi	r19, 0x14	; 20
    1ffe:	4e ee       	ldi	r20, 0xEE	; 238
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4c e0       	ldi	r20, 0x0C	; 12
    2014:	52 e4       	ldi	r21, 0x42	; 66
    2016:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__addsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	ab 83       	std	Y+3, r26	; 0x03
    2024:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    2026:	8b e8       	ldi	r24, 0x8B	; 139
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	fc 01       	movw	r30, r24
    202c:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    202e:	0a e8       	ldi	r16, 0x8A	; 138
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	69 81       	ldd	r22, Y+1	; 0x01
    2034:	7a 81       	ldd	r23, Y+2	; 0x02
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	f8 01       	movw	r30, r16
    2044:	80 83       	st	Z, r24
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating
{
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    2062:	89 e8       	ldi	r24, 0x89	; 137
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	23 e0       	ldi	r18, 0x03	; 3
    2068:	fc 01       	movw	r30, r24
    206a:	20 83       	st	Z, r18
	OCR1AL = 0xFF; //Servo 1 off
    206c:	88 e8       	ldi	r24, 0x88	; 136
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	2f ef       	ldi	r18, 0xFF	; 255
    2072:	fc 01       	movw	r30, r24
    2074:	20 83       	st	Z, r18
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	08 95       	ret

0000207c <Pick>:

void Pick()
{
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	aa 97       	sbiw	r28, 0x2a	; 42
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
	back();
    2094:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <back>
	linear_distance_mm(15);
    2098:	8f e0       	ldi	r24, 0x0F	; 15
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <linear_distance_mm>
	stop();
    20a0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	
	send(5);
    20a4:	85 e0       	ldi	r24, 0x05	; 5
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	servo_1(Down_POSITION);
    20ac:	80 91 2b 02 	lds	r24, 0x022B
    20b0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <servo_1>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	aa e7       	ldi	r26, 0x7A	; 122
    20ba:	b4 e4       	ldi	r27, 0x44	; 68
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	ab 83       	std	Y+3, r26	; 0x03
    20c2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	69 81       	ldd	r22, Y+1	; 0x01
    20c6:	7a 81       	ldd	r23, Y+2	; 0x02
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	26 e6       	ldi	r18, 0x66	; 102
    20ce:	36 e6       	ldi	r19, 0x66	; 102
    20d0:	46 e6       	ldi	r20, 0x66	; 102
    20d2:	55 e4       	ldi	r21, 0x45	; 69
    20d4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	af 83       	std	Y+7, r26	; 0x07
    20e2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    20e4:	11 e0       	ldi	r17, 0x01	; 1
    20e6:	6d 81       	ldd	r22, Y+5	; 0x05
    20e8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ea:	8f 81       	ldd	r24, Y+7	; 0x07
    20ec:	98 85       	ldd	r25, Y+8	; 0x08
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <Pick+0x84>
    20fe:	10 e0       	ldi	r17, 0x00	; 0
    2100:	11 23       	and	r17, r17
    2102:	29 f0       	breq	.+10     	; 0x210e <Pick+0x92>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a 87       	std	Y+10, r25	; 0x0a
    210a:	89 87       	std	Y+9, r24	; 0x09
    210c:	46 c0       	rjmp	.+140    	; 0x219a <Pick+0x11e>
	else if (__tmp > 65535)
    210e:	11 e0       	ldi	r17, 0x01	; 1
    2110:	6d 81       	ldd	r22, Y+5	; 0x05
    2112:	7e 81       	ldd	r23, Y+6	; 0x06
    2114:	8f 81       	ldd	r24, Y+7	; 0x07
    2116:	98 85       	ldd	r25, Y+8	; 0x08
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    2124:	18 16       	cp	r1, r24
    2126:	0c f0       	brlt	.+2      	; 0x212a <Pick+0xae>
    2128:	10 e0       	ldi	r17, 0x00	; 0
    212a:	11 23       	and	r17, r17
    212c:	61 f1       	breq	.+88     	; 0x2186 <Pick+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	69 81       	ldd	r22, Y+1	; 0x01
    2130:	7a 81       	ldd	r23, Y+2	; 0x02
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9a 87       	std	Y+10, r25	; 0x0a
    2154:	89 87       	std	Y+9, r24	; 0x09
    2156:	12 c0       	rjmp	.+36     	; 0x217c <Pick+0x100>
    2158:	80 e7       	ldi	r24, 0x70	; 112
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	9c 87       	std	Y+12, r25	; 0x0c
    215e:	8b 87       	std	Y+11, r24	; 0x0b
    2160:	8b 85       	ldd	r24, Y+11	; 0x0b
    2162:	9c 85       	ldd	r25, Y+12	; 0x0c
    2164:	8c 01       	movw	r16, r24
    2166:	c8 01       	movw	r24, r16
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <Pick+0xec>
    216c:	8c 01       	movw	r16, r24
    216e:	1c 87       	std	Y+12, r17	; 0x0c
    2170:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9a 87       	std	Y+10, r25	; 0x0a
    217a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	51 f7       	brne	.-44     	; 0x2158 <Pick+0xdc>
    2184:	17 c0       	rjmp	.+46     	; 0x21b4 <Pick+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6d 81       	ldd	r22, Y+5	; 0x05
    2188:	7e 81       	ldd	r23, Y+6	; 0x06
    218a:	8f 81       	ldd	r24, Y+7	; 0x07
    218c:	98 85       	ldd	r25, Y+8	; 0x08
    218e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9a 87       	std	Y+10, r25	; 0x0a
    2198:	89 87       	std	Y+9, r24	; 0x09
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	9e 87       	std	Y+14, r25	; 0x0e
    21a0:	8d 87       	std	Y+13, r24	; 0x0d
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	8c 01       	movw	r16, r24
    21a8:	c8 01       	movw	r24, r16
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <Pick+0x12e>
    21ae:	8c 01       	movw	r16, r24
    21b0:	1e 87       	std	Y+14, r17	; 0x0e
    21b2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1000);
	servo_2(Grip_Angle);
    21b4:	80 91 2d 02 	lds	r24, 0x022D
    21b8:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo_2>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	aa e7       	ldi	r26, 0x7A	; 122
    21c2:	b4 e4       	ldi	r27, 0x44	; 68
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	a9 8b       	std	Y+17, r26	; 0x11
    21ca:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    21ce:	78 89       	ldd	r23, Y+16	; 0x10
    21d0:	89 89       	ldd	r24, Y+17	; 0x11
    21d2:	9a 89       	ldd	r25, Y+18	; 0x12
    21d4:	26 e6       	ldi	r18, 0x66	; 102
    21d6:	36 e6       	ldi	r19, 0x66	; 102
    21d8:	46 e6       	ldi	r20, 0x66	; 102
    21da:	55 e4       	ldi	r21, 0x45	; 69
    21dc:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	ad 8b       	std	Y+21, r26	; 0x15
    21ea:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    21ec:	11 e0       	ldi	r17, 0x01	; 1
    21ee:	6b 89       	ldd	r22, Y+19	; 0x13
    21f0:	7c 89       	ldd	r23, Y+20	; 0x14
    21f2:	8d 89       	ldd	r24, Y+21	; 0x15
    21f4:	9e 89       	ldd	r25, Y+22	; 0x16
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    2202:	88 23       	and	r24, r24
    2204:	0c f0       	brlt	.+2      	; 0x2208 <__stack+0x9>
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	11 23       	and	r17, r17
    220a:	29 f0       	breq	.+10     	; 0x2216 <__stack+0x17>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	98 8f       	std	Y+24, r25	; 0x18
    2212:	8f 8b       	std	Y+23, r24	; 0x17
    2214:	46 c0       	rjmp	.+140    	; 0x22a2 <__stack+0xa3>
	else if (__tmp > 65535)
    2216:	11 e0       	ldi	r17, 0x01	; 1
    2218:	6b 89       	ldd	r22, Y+19	; 0x13
    221a:	7c 89       	ldd	r23, Y+20	; 0x14
    221c:	8d 89       	ldd	r24, Y+21	; 0x15
    221e:	9e 89       	ldd	r25, Y+22	; 0x16
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    222c:	18 16       	cp	r1, r24
    222e:	0c f0       	brlt	.+2      	; 0x2232 <__stack+0x33>
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	11 23       	and	r17, r17
    2234:	61 f1       	breq	.+88     	; 0x228e <__stack+0x8f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6f 85       	ldd	r22, Y+15	; 0x0f
    2238:	78 89       	ldd	r23, Y+16	; 0x10
    223a:	89 89       	ldd	r24, Y+17	; 0x11
    223c:	9a 89       	ldd	r25, Y+18	; 0x12
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	98 8f       	std	Y+24, r25	; 0x18
    225c:	8f 8b       	std	Y+23, r24	; 0x17
    225e:	12 c0       	rjmp	.+36     	; 0x2284 <__stack+0x85>
    2260:	80 e7       	ldi	r24, 0x70	; 112
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	9a 8f       	std	Y+26, r25	; 0x1a
    2266:	89 8f       	std	Y+25, r24	; 0x19
    2268:	89 8d       	ldd	r24, Y+25	; 0x19
    226a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    226c:	8c 01       	movw	r16, r24
    226e:	c8 01       	movw	r24, r16
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <__stack+0x71>
    2274:	8c 01       	movw	r16, r24
    2276:	1a 8f       	std	Y+26, r17	; 0x1a
    2278:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227a:	8f 89       	ldd	r24, Y+23	; 0x17
    227c:	98 8d       	ldd	r25, Y+24	; 0x18
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	98 8f       	std	Y+24, r25	; 0x18
    2282:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	51 f7       	brne	.-44     	; 0x2260 <__stack+0x61>
    228c:	17 c0       	rjmp	.+46     	; 0x22bc <__stack+0xbd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	6b 89       	ldd	r22, Y+19	; 0x13
    2290:	7c 89       	ldd	r23, Y+20	; 0x14
    2292:	8d 89       	ldd	r24, Y+21	; 0x15
    2294:	9e 89       	ldd	r25, Y+22	; 0x16
    2296:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	98 8f       	std	Y+24, r25	; 0x18
    22a0:	8f 8b       	std	Y+23, r24	; 0x17
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	9c 8f       	std	Y+28, r25	; 0x1c
    22a8:	8b 8f       	std	Y+27, r24	; 0x1b
    22aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ae:	8c 01       	movw	r16, r24
    22b0:	c8 01       	movw	r24, r16
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__stack+0xb3>
    22b6:	8c 01       	movw	r16, r24
    22b8:	1c 8f       	std	Y+28, r17	; 0x1c
    22ba:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1000);
	servo_1(Up_POSITION);
    22bc:	80 91 2a 02 	lds	r24, 0x022A
    22c0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <servo_1>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	aa e7       	ldi	r26, 0x7A	; 122
    22ca:	b4 e4       	ldi	r27, 0x44	; 68
    22cc:	8d 8f       	std	Y+29, r24	; 0x1d
    22ce:	9e 8f       	std	Y+30, r25	; 0x1e
    22d0:	af 8f       	std	Y+31, r26	; 0x1f
    22d2:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22da:	98 a1       	lds	r25, 0x48
    22dc:	26 e6       	ldi	r18, 0x66	; 102
    22de:	36 e6       	ldi	r19, 0x66	; 102
    22e0:	46 e6       	ldi	r20, 0x66	; 102
    22e2:	55 e4       	ldi	r21, 0x45	; 69
    22e4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	89 a3       	lds	r24, 0x59
    22ee:	9a a3       	lds	r25, 0x5a
    22f0:	ab a3       	lds	r26, 0x5b
    22f2:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    22f4:	11 e0       	ldi	r17, 0x01	; 1
    22f6:	69 a1       	lds	r22, 0x49
    22f8:	7a a1       	lds	r23, 0x4a
    22fa:	8b a1       	lds	r24, 0x4b
    22fc:	9c a1       	lds	r25, 0x4c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    230a:	88 23       	and	r24, r24
    230c:	0c f0       	brlt	.+2      	; 0x2310 <__stack+0x111>
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	11 23       	and	r17, r17
    2312:	29 f0       	breq	.+10     	; 0x231e <__stack+0x11f>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e a3       	lds	r25, 0x5e
    231a:	8d a3       	lds	r24, 0x5d
    231c:	46 c0       	rjmp	.+140    	; 0x23aa <__stack+0x1ab>
	else if (__tmp > 65535)
    231e:	11 e0       	ldi	r17, 0x01	; 1
    2320:	69 a1       	lds	r22, 0x49
    2322:	7a a1       	lds	r23, 0x4a
    2324:	8b a1       	lds	r24, 0x4b
    2326:	9c a1       	lds	r25, 0x4c
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <__stack+0x13b>
    2338:	10 e0       	ldi	r17, 0x00	; 0
    233a:	11 23       	and	r17, r17
    233c:	61 f1       	breq	.+88     	; 0x2396 <__stack+0x197>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2340:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2342:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2344:	98 a1       	lds	r25, 0x48
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e2       	ldi	r20, 0x20	; 32
    234c:	51 e4       	ldi	r21, 0x41	; 65
    234e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e a3       	lds	r25, 0x5e
    2364:	8d a3       	lds	r24, 0x5d
    2366:	12 c0       	rjmp	.+36     	; 0x238c <__stack+0x18d>
    2368:	80 e7       	ldi	r24, 0x70	; 112
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	98 a7       	lds	r25, 0x78
    236e:	8f a3       	lds	r24, 0x5f
    2370:	8f a1       	lds	r24, 0x4f
    2372:	98 a5       	lds	r25, 0x68
    2374:	8c 01       	movw	r16, r24
    2376:	c8 01       	movw	r24, r16
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <__stack+0x179>
    237c:	8c 01       	movw	r16, r24
    237e:	18 a7       	lds	r17, 0x78
    2380:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	8d a1       	lds	r24, 0x4d
    2384:	9e a1       	lds	r25, 0x4e
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	9e a3       	lds	r25, 0x5e
    238a:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	8d a1       	lds	r24, 0x4d
    238e:	9e a1       	lds	r25, 0x4e
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	51 f7       	brne	.-44     	; 0x2368 <__stack+0x169>
    2394:	17 c0       	rjmp	.+46     	; 0x23c4 <__stack+0x1c5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	69 a1       	lds	r22, 0x49
    2398:	7a a1       	lds	r23, 0x4a
    239a:	8b a1       	lds	r24, 0x4b
    239c:	9c a1       	lds	r25, 0x4c
    239e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e a3       	lds	r25, 0x5e
    23a8:	8d a3       	lds	r24, 0x5d
    23aa:	8d a1       	lds	r24, 0x4d
    23ac:	9e a1       	lds	r25, 0x4e
    23ae:	9a a7       	lds	r25, 0x7a
    23b0:	89 a7       	lds	r24, 0x79
    23b2:	89 a5       	lds	r24, 0x69
    23b4:	9a a5       	lds	r25, 0x6a
    23b6:	8c 01       	movw	r16, r24
    23b8:	c8 01       	movw	r24, r16
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <__stack+0x1bb>
    23be:	8c 01       	movw	r16, r24
    23c0:	1a a7       	lds	r17, 0x7a
    23c2:	09 a7       	lds	r16, 0x79
	_delay_ms(1000);
	servo_1_free();
    23c4:	0e 94 2d 10 	call	0x205a	; 0x205a <servo_1_free>
}
    23c8:	aa 96       	adiw	r28, 0x2a	; 42
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	08 95       	ret

000023de <Drop>:
	
void Drop()
{
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	e8 97       	sbiw	r28, 0x38	; 56
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
	back();
    23f6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <back>
	linear_distance_mm(55);
    23fa:	87 e3       	ldi	r24, 0x37	; 55
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <linear_distance_mm>
	stop();
    2402:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	
	send(6);
    2406:	86 e0       	ldi	r24, 0x06	; 6
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	servo_1(Down_POSITION_Drop);
    240e:	80 91 2c 02 	lds	r24, 0x022C
    2412:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <servo_1>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	aa e7       	ldi	r26, 0x7A	; 122
    241c:	b4 e4       	ldi	r27, 0x44	; 68
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	ab 83       	std	Y+3, r26	; 0x03
    2424:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2426:	69 81       	ldd	r22, Y+1	; 0x01
    2428:	7a 81       	ldd	r23, Y+2	; 0x02
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	26 e6       	ldi	r18, 0x66	; 102
    2430:	36 e6       	ldi	r19, 0x66	; 102
    2432:	46 e6       	ldi	r20, 0x66	; 102
    2434:	55 e4       	ldi	r21, 0x45	; 69
    2436:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	af 83       	std	Y+7, r26	; 0x07
    2444:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2446:	11 e0       	ldi	r17, 0x01	; 1
    2448:	6d 81       	ldd	r22, Y+5	; 0x05
    244a:	7e 81       	ldd	r23, Y+6	; 0x06
    244c:	8f 81       	ldd	r24, Y+7	; 0x07
    244e:	98 85       	ldd	r25, Y+8	; 0x08
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    245c:	88 23       	and	r24, r24
    245e:	0c f0       	brlt	.+2      	; 0x2462 <Drop+0x84>
    2460:	10 e0       	ldi	r17, 0x00	; 0
    2462:	11 23       	and	r17, r17
    2464:	29 f0       	breq	.+10     	; 0x2470 <Drop+0x92>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9a 87       	std	Y+10, r25	; 0x0a
    246c:	89 87       	std	Y+9, r24	; 0x09
    246e:	46 c0       	rjmp	.+140    	; 0x24fc <Drop+0x11e>
	else if (__tmp > 65535)
    2470:	11 e0       	ldi	r17, 0x01	; 1
    2472:	6d 81       	ldd	r22, Y+5	; 0x05
    2474:	7e 81       	ldd	r23, Y+6	; 0x06
    2476:	8f 81       	ldd	r24, Y+7	; 0x07
    2478:	98 85       	ldd	r25, Y+8	; 0x08
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    2486:	18 16       	cp	r1, r24
    2488:	0c f0       	brlt	.+2      	; 0x248c <Drop+0xae>
    248a:	10 e0       	ldi	r17, 0x00	; 0
    248c:	11 23       	and	r17, r17
    248e:	61 f1       	breq	.+88     	; 0x24e8 <Drop+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	69 81       	ldd	r22, Y+1	; 0x01
    2492:	7a 81       	ldd	r23, Y+2	; 0x02
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9a 87       	std	Y+10, r25	; 0x0a
    24b6:	89 87       	std	Y+9, r24	; 0x09
    24b8:	12 c0       	rjmp	.+36     	; 0x24de <Drop+0x100>
    24ba:	80 e7       	ldi	r24, 0x70	; 112
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	9c 87       	std	Y+12, r25	; 0x0c
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
    24c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24c6:	8c 01       	movw	r16, r24
    24c8:	c8 01       	movw	r24, r16
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <Drop+0xec>
    24ce:	8c 01       	movw	r16, r24
    24d0:	1c 87       	std	Y+12, r17	; 0x0c
    24d2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9a 87       	std	Y+10, r25	; 0x0a
    24dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	51 f7       	brne	.-44     	; 0x24ba <Drop+0xdc>
    24e6:	17 c0       	rjmp	.+46     	; 0x2516 <Drop+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	6d 81       	ldd	r22, Y+5	; 0x05
    24ea:	7e 81       	ldd	r23, Y+6	; 0x06
    24ec:	8f 81       	ldd	r24, Y+7	; 0x07
    24ee:	98 85       	ldd	r25, Y+8	; 0x08
    24f0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9a 87       	std	Y+10, r25	; 0x0a
    24fa:	89 87       	std	Y+9, r24	; 0x09
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	9e 87       	std	Y+14, r25	; 0x0e
    2502:	8d 87       	std	Y+13, r24	; 0x0d
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	8c 01       	movw	r16, r24
    250a:	c8 01       	movw	r24, r16
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <Drop+0x12e>
    2510:	8c 01       	movw	r16, r24
    2512:	1e 87       	std	Y+14, r17	; 0x0e
    2514:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1000);
	servo_2(Loose_Angle_Drop);
    2516:	80 91 2e 02 	lds	r24, 0x022E
    251a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo_2>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	aa e7       	ldi	r26, 0x7A	; 122
    2524:	b4 e4       	ldi	r27, 0x44	; 68
    2526:	8f 87       	std	Y+15, r24	; 0x0f
    2528:	98 8b       	std	Y+16, r25	; 0x10
    252a:	a9 8b       	std	Y+17, r26	; 0x11
    252c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2530:	78 89       	ldd	r23, Y+16	; 0x10
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	9a 89       	ldd	r25, Y+18	; 0x12
    2536:	26 e6       	ldi	r18, 0x66	; 102
    2538:	36 e6       	ldi	r19, 0x66	; 102
    253a:	46 e6       	ldi	r20, 0x66	; 102
    253c:	55 e4       	ldi	r21, 0x45	; 69
    253e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	9c 8b       	std	Y+20, r25	; 0x14
    254a:	ad 8b       	std	Y+21, r26	; 0x15
    254c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    254e:	11 e0       	ldi	r17, 0x01	; 1
    2550:	6b 89       	ldd	r22, Y+19	; 0x13
    2552:	7c 89       	ldd	r23, Y+20	; 0x14
    2554:	8d 89       	ldd	r24, Y+21	; 0x15
    2556:	9e 89       	ldd	r25, Y+22	; 0x16
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    2564:	88 23       	and	r24, r24
    2566:	0c f0       	brlt	.+2      	; 0x256a <Drop+0x18c>
    2568:	10 e0       	ldi	r17, 0x00	; 0
    256a:	11 23       	and	r17, r17
    256c:	29 f0       	breq	.+10     	; 0x2578 <Drop+0x19a>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	98 8f       	std	Y+24, r25	; 0x18
    2574:	8f 8b       	std	Y+23, r24	; 0x17
    2576:	46 c0       	rjmp	.+140    	; 0x2604 <Drop+0x226>
	else if (__tmp > 65535)
    2578:	11 e0       	ldi	r17, 0x01	; 1
    257a:	6b 89       	ldd	r22, Y+19	; 0x13
    257c:	7c 89       	ldd	r23, Y+20	; 0x14
    257e:	8d 89       	ldd	r24, Y+21	; 0x15
    2580:	9e 89       	ldd	r25, Y+22	; 0x16
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    258e:	18 16       	cp	r1, r24
    2590:	0c f0       	brlt	.+2      	; 0x2594 <Drop+0x1b6>
    2592:	10 e0       	ldi	r17, 0x00	; 0
    2594:	11 23       	and	r17, r17
    2596:	61 f1       	breq	.+88     	; 0x25f0 <Drop+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6f 85       	ldd	r22, Y+15	; 0x0f
    259a:	78 89       	ldd	r23, Y+16	; 0x10
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	98 8f       	std	Y+24, r25	; 0x18
    25be:	8f 8b       	std	Y+23, r24	; 0x17
    25c0:	12 c0       	rjmp	.+36     	; 0x25e6 <Drop+0x208>
    25c2:	80 e7       	ldi	r24, 0x70	; 112
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	9a 8f       	std	Y+26, r25	; 0x1a
    25c8:	89 8f       	std	Y+25, r24	; 0x19
    25ca:	89 8d       	ldd	r24, Y+25	; 0x19
    25cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ce:	8c 01       	movw	r16, r24
    25d0:	c8 01       	movw	r24, r16
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <Drop+0x1f4>
    25d6:	8c 01       	movw	r16, r24
    25d8:	1a 8f       	std	Y+26, r17	; 0x1a
    25da:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8f 89       	ldd	r24, Y+23	; 0x17
    25de:	98 8d       	ldd	r25, Y+24	; 0x18
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	98 8f       	std	Y+24, r25	; 0x18
    25e4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	51 f7       	brne	.-44     	; 0x25c2 <Drop+0x1e4>
    25ee:	17 c0       	rjmp	.+46     	; 0x261e <Drop+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	6b 89       	ldd	r22, Y+19	; 0x13
    25f2:	7c 89       	ldd	r23, Y+20	; 0x14
    25f4:	8d 89       	ldd	r24, Y+21	; 0x15
    25f6:	9e 89       	ldd	r25, Y+22	; 0x16
    25f8:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	98 8f       	std	Y+24, r25	; 0x18
    2602:	8f 8b       	std	Y+23, r24	; 0x17
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	9c 8f       	std	Y+28, r25	; 0x1c
    260a:	8b 8f       	std	Y+27, r24	; 0x1b
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	8c 01       	movw	r16, r24
    2612:	c8 01       	movw	r24, r16
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <Drop+0x236>
    2618:	8c 01       	movw	r16, r24
    261a:	1c 8f       	std	Y+28, r17	; 0x1c
    261c:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1000);
	servo_1(Up_POSITION);
    261e:	80 91 2a 02 	lds	r24, 0x022A
    2622:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <servo_1>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	aa e7       	ldi	r26, 0x7A	; 122
    262c:	b4 e4       	ldi	r27, 0x44	; 68
    262e:	8d 8f       	std	Y+29, r24	; 0x1d
    2630:	9e 8f       	std	Y+30, r25	; 0x1e
    2632:	af 8f       	std	Y+31, r26	; 0x1f
    2634:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2636:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2638:	7e 8d       	ldd	r23, Y+30	; 0x1e
    263a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263c:	98 a1       	lds	r25, 0x48
    263e:	26 e6       	ldi	r18, 0x66	; 102
    2640:	36 e6       	ldi	r19, 0x66	; 102
    2642:	46 e6       	ldi	r20, 0x66	; 102
    2644:	55 e4       	ldi	r21, 0x45	; 69
    2646:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	89 a3       	lds	r24, 0x59
    2650:	9a a3       	lds	r25, 0x5a
    2652:	ab a3       	lds	r26, 0x5b
    2654:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2656:	11 e0       	ldi	r17, 0x01	; 1
    2658:	69 a1       	lds	r22, 0x49
    265a:	7a a1       	lds	r23, 0x4a
    265c:	8b a1       	lds	r24, 0x4b
    265e:	9c a1       	lds	r25, 0x4c
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    266c:	88 23       	and	r24, r24
    266e:	0c f0       	brlt	.+2      	; 0x2672 <Drop+0x294>
    2670:	10 e0       	ldi	r17, 0x00	; 0
    2672:	11 23       	and	r17, r17
    2674:	29 f0       	breq	.+10     	; 0x2680 <Drop+0x2a2>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9e a3       	lds	r25, 0x5e
    267c:	8d a3       	lds	r24, 0x5d
    267e:	46 c0       	rjmp	.+140    	; 0x270c <Drop+0x32e>
	else if (__tmp > 65535)
    2680:	11 e0       	ldi	r17, 0x01	; 1
    2682:	69 a1       	lds	r22, 0x49
    2684:	7a a1       	lds	r23, 0x4a
    2686:	8b a1       	lds	r24, 0x4b
    2688:	9c a1       	lds	r25, 0x4c
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    2696:	18 16       	cp	r1, r24
    2698:	0c f0       	brlt	.+2      	; 0x269c <Drop+0x2be>
    269a:	10 e0       	ldi	r17, 0x00	; 0
    269c:	11 23       	and	r17, r17
    269e:	61 f1       	breq	.+88     	; 0x26f8 <Drop+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a6:	98 a1       	lds	r25, 0x48
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e a3       	lds	r25, 0x5e
    26c6:	8d a3       	lds	r24, 0x5d
    26c8:	12 c0       	rjmp	.+36     	; 0x26ee <Drop+0x310>
    26ca:	80 e7       	ldi	r24, 0x70	; 112
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	98 a7       	lds	r25, 0x78
    26d0:	8f a3       	lds	r24, 0x5f
    26d2:	8f a1       	lds	r24, 0x4f
    26d4:	98 a5       	lds	r25, 0x68
    26d6:	8c 01       	movw	r16, r24
    26d8:	c8 01       	movw	r24, r16
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <Drop+0x2fc>
    26de:	8c 01       	movw	r16, r24
    26e0:	18 a7       	lds	r17, 0x78
    26e2:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8d a1       	lds	r24, 0x4d
    26e6:	9e a1       	lds	r25, 0x4e
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9e a3       	lds	r25, 0x5e
    26ec:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8d a1       	lds	r24, 0x4d
    26f0:	9e a1       	lds	r25, 0x4e
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	51 f7       	brne	.-44     	; 0x26ca <Drop+0x2ec>
    26f6:	17 c0       	rjmp	.+46     	; 0x2726 <Drop+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	69 a1       	lds	r22, 0x49
    26fa:	7a a1       	lds	r23, 0x4a
    26fc:	8b a1       	lds	r24, 0x4b
    26fe:	9c a1       	lds	r25, 0x4c
    2700:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e a3       	lds	r25, 0x5e
    270a:	8d a3       	lds	r24, 0x5d
    270c:	8d a1       	lds	r24, 0x4d
    270e:	9e a1       	lds	r25, 0x4e
    2710:	9a a7       	lds	r25, 0x7a
    2712:	89 a7       	lds	r24, 0x79
    2714:	89 a5       	lds	r24, 0x69
    2716:	9a a5       	lds	r25, 0x6a
    2718:	8c 01       	movw	r16, r24
    271a:	c8 01       	movw	r24, r16
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <Drop+0x33e>
    2720:	8c 01       	movw	r16, r24
    2722:	1a a7       	lds	r17, 0x7a
    2724:	09 a7       	lds	r16, 0x79
	_delay_ms(1000);
	servo_2(Loose_Angle);
    2726:	80 91 2f 02 	lds	r24, 0x022F
    272a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo_2>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	aa e7       	ldi	r26, 0x7A	; 122
    2734:	b4 e4       	ldi	r27, 0x44	; 68
    2736:	8b a7       	lds	r24, 0x7b
    2738:	9c a7       	lds	r25, 0x7c
    273a:	ad a7       	lds	r26, 0x7d
    273c:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6b a5       	lds	r22, 0x6b
    2740:	7c a5       	lds	r23, 0x6c
    2742:	8d a5       	lds	r24, 0x6d
    2744:	9e a5       	lds	r25, 0x6e
    2746:	26 e6       	ldi	r18, 0x66	; 102
    2748:	36 e6       	ldi	r19, 0x66	; 102
    274a:	46 e6       	ldi	r20, 0x66	; 102
    274c:	55 e4       	ldi	r21, 0x45	; 69
    274e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f a7       	lds	r24, 0x7f
    2758:	98 ab       	sts	0x58, r25
    275a:	a9 ab       	sts	0x59, r26
    275c:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    275e:	11 e0       	ldi	r17, 0x01	; 1
    2760:	6f a5       	lds	r22, 0x6f
    2762:	78 a9       	sts	0x48, r23
    2764:	89 a9       	sts	0x49, r24
    2766:	9a a9       	sts	0x4a, r25
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    2774:	88 23       	and	r24, r24
    2776:	0c f0       	brlt	.+2      	; 0x277a <Drop+0x39c>
    2778:	10 e0       	ldi	r17, 0x00	; 0
    277a:	11 23       	and	r17, r17
    277c:	29 f0       	breq	.+10     	; 0x2788 <Drop+0x3aa>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c ab       	sts	0x5c, r25
    2784:	8b ab       	sts	0x5b, r24
    2786:	46 c0       	rjmp	.+140    	; 0x2814 <Drop+0x436>
	else if (__tmp > 65535)
    2788:	11 e0       	ldi	r17, 0x01	; 1
    278a:	6f a5       	lds	r22, 0x6f
    278c:	78 a9       	sts	0x48, r23
    278e:	89 a9       	sts	0x49, r24
    2790:	9a a9       	sts	0x4a, r25
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	3f ef       	ldi	r19, 0xFF	; 255
    2796:	4f e7       	ldi	r20, 0x7F	; 127
    2798:	57 e4       	ldi	r21, 0x47	; 71
    279a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    279e:	18 16       	cp	r1, r24
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <Drop+0x3c6>
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	11 23       	and	r17, r17
    27a6:	61 f1       	breq	.+88     	; 0x2800 <Drop+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	6b a5       	lds	r22, 0x6b
    27aa:	7c a5       	lds	r23, 0x6c
    27ac:	8d a5       	lds	r24, 0x6d
    27ae:	9e a5       	lds	r25, 0x6e
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9c ab       	sts	0x5c, r25
    27ce:	8b ab       	sts	0x5b, r24
    27d0:	12 c0       	rjmp	.+36     	; 0x27f6 <Drop+0x418>
    27d2:	80 e7       	ldi	r24, 0x70	; 112
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	9e ab       	sts	0x5e, r25
    27d8:	8d ab       	sts	0x5d, r24
    27da:	8d a9       	sts	0x4d, r24
    27dc:	9e a9       	sts	0x4e, r25
    27de:	8c 01       	movw	r16, r24
    27e0:	c8 01       	movw	r24, r16
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <Drop+0x404>
    27e6:	8c 01       	movw	r16, r24
    27e8:	1e ab       	sts	0x5e, r17
    27ea:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8b a9       	sts	0x4b, r24
    27ee:	9c a9       	sts	0x4c, r25
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9c ab       	sts	0x5c, r25
    27f4:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8b a9       	sts	0x4b, r24
    27f8:	9c a9       	sts	0x4c, r25
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	51 f7       	brne	.-44     	; 0x27d2 <Drop+0x3f4>
    27fe:	17 c0       	rjmp	.+46     	; 0x282e <Drop+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6f a5       	lds	r22, 0x6f
    2802:	78 a9       	sts	0x48, r23
    2804:	89 a9       	sts	0x49, r24
    2806:	9a a9       	sts	0x4a, r25
    2808:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9c ab       	sts	0x5c, r25
    2812:	8b ab       	sts	0x5b, r24
    2814:	8b a9       	sts	0x4b, r24
    2816:	9c a9       	sts	0x4c, r25
    2818:	98 af       	sts	0x78, r25
    281a:	8f ab       	sts	0x5f, r24
    281c:	8f a9       	sts	0x4f, r24
    281e:	98 ad       	sts	0x68, r25
    2820:	8c 01       	movw	r16, r24
    2822:	c8 01       	movw	r24, r16
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <Drop+0x446>
    2828:	8c 01       	movw	r16, r24
    282a:	18 af       	sts	0x78, r17
    282c:	0f ab       	sts	0x5f, r16
	_delay_ms(1000);
	
	forward();
    282e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <forward>
	linear_distance_mm(55);
    2832:	87 e3       	ldi	r24, 0x37	; 55
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <linear_distance_mm>
	
}
    283a:	e8 96       	adiw	r28, 0x38	; 56
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <beep>:

void beep()
{
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	2e 97       	sbiw	r28, 0x0e	; 14
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
	SETBIT(PORTC,PC3);
    2868:	88 e2       	ldi	r24, 0x28	; 40
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	28 e2       	ldi	r18, 0x28	; 40
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	f9 01       	movw	r30, r18
    2872:	20 81       	ld	r18, Z
    2874:	28 60       	ori	r18, 0x08	; 8
    2876:	fc 01       	movw	r30, r24
    2878:	20 83       	st	Z, r18
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 e7       	ldi	r26, 0x70	; 112
    2880:	b1 e4       	ldi	r27, 0x41	; 65
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	ab 83       	std	Y+3, r26	; 0x03
    2888:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    288a:	69 81       	ldd	r22, Y+1	; 0x01
    288c:	7a 81       	ldd	r23, Y+2	; 0x02
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	26 e6       	ldi	r18, 0x66	; 102
    2894:	36 e6       	ldi	r19, 0x66	; 102
    2896:	46 e6       	ldi	r20, 0x66	; 102
    2898:	55 e4       	ldi	r21, 0x45	; 69
    289a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	8d 83       	std	Y+5, r24	; 0x05
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	af 83       	std	Y+7, r26	; 0x07
    28a8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28aa:	11 e0       	ldi	r17, 0x01	; 1
    28ac:	6d 81       	ldd	r22, Y+5	; 0x05
    28ae:	7e 81       	ldd	r23, Y+6	; 0x06
    28b0:	8f 81       	ldd	r24, Y+7	; 0x07
    28b2:	98 85       	ldd	r25, Y+8	; 0x08
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	0c f0       	brlt	.+2      	; 0x28c6 <beep+0x76>
    28c4:	10 e0       	ldi	r17, 0x00	; 0
    28c6:	11 23       	and	r17, r17
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <beep+0x84>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9a 87       	std	Y+10, r25	; 0x0a
    28d0:	89 87       	std	Y+9, r24	; 0x09
    28d2:	46 c0       	rjmp	.+140    	; 0x2960 <beep+0x110>
	else if (__tmp > 65535)
    28d4:	11 e0       	ldi	r17, 0x01	; 1
    28d6:	6d 81       	ldd	r22, Y+5	; 0x05
    28d8:	7e 81       	ldd	r23, Y+6	; 0x06
    28da:	8f 81       	ldd	r24, Y+7	; 0x07
    28dc:	98 85       	ldd	r25, Y+8	; 0x08
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	0c f0       	brlt	.+2      	; 0x28f0 <beep+0xa0>
    28ee:	10 e0       	ldi	r17, 0x00	; 0
    28f0:	11 23       	and	r17, r17
    28f2:	61 f1       	breq	.+88     	; 0x294c <beep+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f4:	69 81       	ldd	r22, Y+1	; 0x01
    28f6:	7a 81       	ldd	r23, Y+2	; 0x02
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e2       	ldi	r20, 0x20	; 32
    2902:	51 e4       	ldi	r21, 0x41	; 65
    2904:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9a 87       	std	Y+10, r25	; 0x0a
    291a:	89 87       	std	Y+9, r24	; 0x09
    291c:	12 c0       	rjmp	.+36     	; 0x2942 <beep+0xf2>
    291e:	80 e7       	ldi	r24, 0x70	; 112
    2920:	91 e0       	ldi	r25, 0x01	; 1
    2922:	9c 87       	std	Y+12, r25	; 0x0c
    2924:	8b 87       	std	Y+11, r24	; 0x0b
    2926:	8b 85       	ldd	r24, Y+11	; 0x0b
    2928:	9c 85       	ldd	r25, Y+12	; 0x0c
    292a:	8c 01       	movw	r16, r24
    292c:	c8 01       	movw	r24, r16
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <beep+0xde>
    2932:	8c 01       	movw	r16, r24
    2934:	1c 87       	std	Y+12, r17	; 0x0c
    2936:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9a 87       	std	Y+10, r25	; 0x0a
    2940:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	89 85       	ldd	r24, Y+9	; 0x09
    2944:	9a 85       	ldd	r25, Y+10	; 0x0a
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	51 f7       	brne	.-44     	; 0x291e <beep+0xce>
    294a:	17 c0       	rjmp	.+46     	; 0x297a <beep+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6d 81       	ldd	r22, Y+5	; 0x05
    294e:	7e 81       	ldd	r23, Y+6	; 0x06
    2950:	8f 81       	ldd	r24, Y+7	; 0x07
    2952:	98 85       	ldd	r25, Y+8	; 0x08
    2954:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9a 87       	std	Y+10, r25	; 0x0a
    295e:	89 87       	std	Y+9, r24	; 0x09
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	9e 87       	std	Y+14, r25	; 0x0e
    2966:	8d 87       	std	Y+13, r24	; 0x0d
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	8c 01       	movw	r16, r24
    296e:	f8 01       	movw	r30, r16
    2970:	31 97       	sbiw	r30, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <beep+0x120>
    2974:	8f 01       	movw	r16, r30
    2976:	1e 87       	std	Y+14, r17	; 0x0e
    2978:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(15);
	CLEARBIT(PORTC,PC3);
    297a:	88 e2       	ldi	r24, 0x28	; 40
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	28 e2       	ldi	r18, 0x28	; 40
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	f9 01       	movw	r30, r18
    2984:	20 81       	ld	r18, Z
    2986:	27 7f       	andi	r18, 0xF7	; 247
    2988:	fc 01       	movw	r30, r24
    298a:	20 83       	st	Z, r18

// 	PORTJ = 0xFF;
// 	_delay_ms(100);
// 	PORTJ = 0x00;
}
    298c:	2e 96       	adiw	r28, 0x0e	; 14
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	08 95       	ret

000029a2 <LINE_FOLLOW>:

void LINE_FOLLOW()
{
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
		lcd_print(1,7,ShaftCountRight,3);
    29aa:	80 91 4b 02 	lds	r24, 0x024B
    29ae:	90 91 4c 02 	lds	r25, 0x024C
    29b2:	a0 91 4d 02 	lds	r26, 0x024D
    29b6:	b0 91 4e 02 	lds	r27, 0x024E
    29ba:	9c 01       	movw	r18, r24
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	a9 01       	movw	r20, r18
    29c2:	23 e0       	ldi	r18, 0x03	; 3
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
		lcd_print(1,3,ShaftCountLeft,3);
    29ca:	80 91 47 02 	lds	r24, 0x0247
    29ce:	90 91 48 02 	lds	r25, 0x0248
    29d2:	a0 91 49 02 	lds	r26, 0x0249
    29d6:	b0 91 4a 02 	lds	r27, 0x024A
    29da:	9c 01       	movw	r18, r24
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	63 e0       	ldi	r22, 0x03	; 3
    29e0:	a9 01       	movw	r20, r18
    29e2:	23 e0       	ldi	r18, 0x03	; 3
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
		print_sensor(2,2,3);							//Prints value of White Line Sensor1
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	62 e0       	ldi	r22, 0x02	; 2
    29ee:	43 e0       	ldi	r20, 0x03	; 3
    29f0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_sensor>
		print_sensor(2,6,2);							//Prints Value of White Line Sensor2
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	66 e0       	ldi	r22, 0x06	; 6
    29f8:	42 e0       	ldi	r20, 0x02	; 2
    29fa:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_sensor>
		print_sensor(2,10,1);
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	6a e0       	ldi	r22, 0x0A	; 10
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_sensor>
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2a08:	83 e0       	ldi	r24, 0x03	; 3
    2a0a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2a0e:	80 93 44 02 	sts	0x0244, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2a18:	80 93 45 02 	sts	0x0245, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor		
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2a22:	80 93 46 02 	sts	0x0246, r24
		if((Center_white_line> threshold && Left_white_line> threshold) || (Center_white_line> threshold && Right_white_line> threshold) || Center_white_line> 120)
    2a26:	80 91 45 02 	lds	r24, 0x0245
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	80 91 26 02 	lds	r24, 0x0226
    2a32:	90 91 27 02 	lds	r25, 0x0227
    2a36:	82 17       	cp	r24, r18
    2a38:	93 07       	cpc	r25, r19
    2a3a:	5c f4       	brge	.+22     	; 0x2a52 <LINE_FOLLOW+0xb0>
    2a3c:	80 91 44 02 	lds	r24, 0x0244
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	80 91 26 02 	lds	r24, 0x0226
    2a48:	90 91 27 02 	lds	r25, 0x0227
    2a4c:	82 17       	cp	r24, r18
    2a4e:	93 07       	cpc	r25, r19
    2a50:	d4 f0       	brlt	.+52     	; 0x2a86 <LINE_FOLLOW+0xe4>
    2a52:	80 91 45 02 	lds	r24, 0x0245
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	80 91 26 02 	lds	r24, 0x0226
    2a5e:	90 91 27 02 	lds	r25, 0x0227
    2a62:	82 17       	cp	r24, r18
    2a64:	93 07       	cpc	r25, r19
    2a66:	5c f4       	brge	.+22     	; 0x2a7e <LINE_FOLLOW+0xdc>
    2a68:	80 91 46 02 	lds	r24, 0x0246
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	80 91 26 02 	lds	r24, 0x0226
    2a74:	90 91 27 02 	lds	r25, 0x0227
    2a78:	82 17       	cp	r24, r18
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	24 f0       	brlt	.+8      	; 0x2a86 <LINE_FOLLOW+0xe4>
    2a7e:	80 91 45 02 	lds	r24, 0x0245
    2a82:	89 37       	cpi	r24, 0x79	; 121
    2a84:	50 f1       	brcs	.+84     	; 0x2ada <LINE_FOLLOW+0x138>
		{
			if(ShaftCountRight > 20)
    2a86:	80 91 4b 02 	lds	r24, 0x024B
    2a8a:	90 91 4c 02 	lds	r25, 0x024C
    2a8e:	a0 91 4d 02 	lds	r26, 0x024D
    2a92:	b0 91 4e 02 	lds	r27, 0x024E
    2a96:	85 31       	cpi	r24, 0x15	; 21
    2a98:	91 05       	cpc	r25, r1
    2a9a:	a1 05       	cpc	r26, r1
    2a9c:	b1 05       	cpc	r27, r1
    2a9e:	e8 f0       	brcs	.+58     	; 0x2ada <LINE_FOLLOW+0x138>
			{
			ShaftCountRight= 0;
    2aa0:	10 92 4b 02 	sts	0x024B, r1
    2aa4:	10 92 4c 02 	sts	0x024C, r1
    2aa8:	10 92 4d 02 	sts	0x024D, r1
    2aac:	10 92 4e 02 	sts	0x024E, r1
			ShaftCountLeft= 0;
    2ab0:	10 92 47 02 	sts	0x0247, r1
    2ab4:	10 92 48 02 	sts	0x0248, r1
    2ab8:	10 92 49 02 	sts	0x0249, r1
    2abc:	10 92 4a 02 	sts	0x024A, r1
			forward();
    2ac0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <forward>
			--count;
    2ac4:	80 91 63 02 	lds	r24, 0x0263
    2ac8:	90 91 64 02 	lds	r25, 0x0264
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	90 93 64 02 	sts	0x0264, r25
    2ad2:	80 93 63 02 	sts	0x0263, r24
			beep();
    2ad6:	0e 94 28 14 	call	0x2850	; 0x2850 <beep>
			}
		}
		
		if((Center_white_line < threshold && Left_white_line < threshold && Right_white_line < threshold))
    2ada:	80 91 45 02 	lds	r24, 0x0245
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	80 91 26 02 	lds	r24, 0x0226
    2ae6:	90 91 27 02 	lds	r25, 0x0227
    2aea:	28 17       	cp	r18, r24
    2aec:	39 07       	cpc	r19, r25
    2aee:	c4 f4       	brge	.+48     	; 0x2b20 <LINE_FOLLOW+0x17e>
    2af0:	80 91 44 02 	lds	r24, 0x0244
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	80 91 26 02 	lds	r24, 0x0226
    2afc:	90 91 27 02 	lds	r25, 0x0227
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	6c f4       	brge	.+26     	; 0x2b20 <LINE_FOLLOW+0x17e>
    2b06:	80 91 46 02 	lds	r24, 0x0246
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	80 91 26 02 	lds	r24, 0x0226
    2b12:	90 91 27 02 	lds	r25, 0x0227
    2b16:	28 17       	cp	r18, r24
    2b18:	39 07       	cpc	r19, r25
    2b1a:	14 f4       	brge	.+4      	; 0x2b20 <LINE_FOLLOW+0x17e>
		{
			forward();
    2b1c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <forward>
		}
		
		if(Center_white_line > threshold )
    2b20:	80 91 45 02 	lds	r24, 0x0245
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	80 91 26 02 	lds	r24, 0x0226
    2b2c:	90 91 27 02 	lds	r25, 0x0227
    2b30:	82 17       	cp	r24, r18
    2b32:	93 07       	cpc	r25, r19
    2b34:	1c f4       	brge	.+6      	; 0x2b3c <LINE_FOLLOW+0x19a>
		{
			forward();
    2b36:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <forward>
    2b3a:	25 c0       	rjmp	.+74     	; 0x2b86 <LINE_FOLLOW+0x1e4>
		}

		else if(Left_white_line> threshold)
    2b3c:	80 91 44 02 	lds	r24, 0x0244
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	80 91 26 02 	lds	r24, 0x0226
    2b48:	90 91 27 02 	lds	r25, 0x0227
    2b4c:	82 17       	cp	r24, r18
    2b4e:	93 07       	cpc	r25, r19
    2b50:	3c f4       	brge	.+14     	; 0x2b60 <LINE_FOLLOW+0x1be>
		{
			soft_left();
    2b52:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <soft_left>
			Line_Align = 0;
    2b56:	10 92 54 02 	sts	0x0254, r1
    2b5a:	10 92 53 02 	sts	0x0253, r1
    2b5e:	13 c0       	rjmp	.+38     	; 0x2b86 <LINE_FOLLOW+0x1e4>
		}

		else if((Right_white_line> threshold))
    2b60:	80 91 46 02 	lds	r24, 0x0246
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	80 91 26 02 	lds	r24, 0x0226
    2b6c:	90 91 27 02 	lds	r25, 0x0227
    2b70:	82 17       	cp	r24, r18
    2b72:	93 07       	cpc	r25, r19
    2b74:	44 f4       	brge	.+16     	; 0x2b86 <LINE_FOLLOW+0x1e4>
		{
			soft_right();
    2b76:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <soft_right>
			Line_Align = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	90 93 54 02 	sts	0x0254, r25
    2b82:	80 93 53 02 	sts	0x0253, r24
		}
		else {}
		lcd_print(1,16,count,1);
    2b86:	80 91 63 02 	lds	r24, 0x0263
    2b8a:	90 91 64 02 	lds	r25, 0x0264
    2b8e:	9c 01       	movw	r18, r24
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	60 e1       	ldi	r22, 0x10	; 16
    2b94:	a9 01       	movw	r20, r18
    2b96:	21 e0       	ldi	r18, 0x01	; 1
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
}
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <turn>:

void turn(int val,int n)
{
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	27 97       	sbiw	r28, 0x07	; 7
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	9d 83       	std	Y+5, r25	; 0x05
    2bba:	8c 83       	std	Y+4, r24	; 0x04
    2bbc:	7f 83       	std	Y+7, r23	; 0x07
    2bbe:	6e 83       	std	Y+6, r22	; 0x06
	send(val);
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	unsigned char ch;
	if(val == 0)
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	9d 81       	ldd	r25, Y+5	; 0x05
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	19 f4       	brne	.+6      	; 0x2bd6 <turn+0x32>
	ch = 0x0A;
    2bd0:	8a e0       	ldi	r24, 0x0A	; 10
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <turn+0x36>
	else
	ch = 0x05;
    2bd6:	85 e0       	ldi	r24, 0x05	; 5
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	int i;
	for(i=1;i<=n;i++)
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9b 83       	std	Y+3, r25	; 0x03
    2be0:	8a 83       	std	Y+2, r24	; 0x02
    2be2:	1b c0       	rjmp	.+54     	; 0x2c1a <turn+0x76>
	{
		PORTA = ch;
    2be4:	82 e2       	ldi	r24, 0x22	; 34
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	29 81       	ldd	r18, Y+1	; 0x01
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18
		angle_rotate(35);
    2bee:	83 e2       	ldi	r24, 0x23	; 35
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
		while(ADC_Conversion(2) < threshold)
    2bf6:	00 00       	nop
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	80 91 26 02 	lds	r24, 0x0226
    2c06:	90 91 27 02 	lds	r25, 0x0227
    2c0a:	28 17       	cp	r18, r24
    2c0c:	39 07       	cpc	r19, r25
    2c0e:	a4 f3       	brlt	.-24     	; 0x2bf8 <turn+0x54>
	if(val == 0)
	ch = 0x0A;
	else
	ch = 0x05;
	int i;
	for(i=1;i<=n;i++)
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	9b 83       	std	Y+3, r25	; 0x03
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c1c:	3b 81       	ldd	r19, Y+3	; 0x03
    2c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c20:	9f 81       	ldd	r25, Y+7	; 0x07
    2c22:	82 17       	cp	r24, r18
    2c24:	93 07       	cpc	r25, r19
    2c26:	f4 f6       	brge	.-68     	; 0x2be4 <turn+0x40>
		angle_rotate(35);
		while(ADC_Conversion(2) < threshold)
		{	}
	}

	stop();
    2c28:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	beep();
    2c2c:	0e 94 28 14 	call	0x2850	; 0x2850 <beep>
}
    2c30:	27 96       	adiw	r28, 0x07	; 7
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <turn_Fourty_Five>:

void turn_Fourty_Five(int val,int n)
{
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	27 97       	sbiw	r28, 0x07	; 7
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	9d 83       	std	Y+5, r25	; 0x05
    2c58:	8c 83       	std	Y+4, r24	; 0x04
    2c5a:	7f 83       	std	Y+7, r23	; 0x07
    2c5c:	6e 83       	std	Y+6, r22	; 0x06
	send(7);
    2c5e:	87 e0       	ldi	r24, 0x07	; 7
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	unsigned char ch;
	if(val == 0)
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	19 f4       	brne	.+6      	; 0x2c74 <turn_Fourty_Five+0x32>
	ch = 0x0A;
    2c6e:	8a e0       	ldi	r24, 0x0A	; 10
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <turn_Fourty_Five+0x36>
	else
	ch = 0x05;
    2c74:	85 e0       	ldi	r24, 0x05	; 5
    2c76:	89 83       	std	Y+1, r24	; 0x01
	int i;
	for(i=1;i<=n;i++)
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9b 83       	std	Y+3, r25	; 0x03
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	1b c0       	rjmp	.+54     	; 0x2cb8 <turn_Fourty_Five+0x76>
	{
		PORTA = ch;
    2c82:	82 e2       	ldi	r24, 0x22	; 34
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	29 81       	ldd	r18, Y+1	; 0x01
    2c88:	fc 01       	movw	r30, r24
    2c8a:	20 83       	st	Z, r18
		angle_rotate(25);
    2c8c:	89 e1       	ldi	r24, 0x19	; 25
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
		while(ADC_Conversion(2) < threshold)
    2c94:	00 00       	nop
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	80 91 26 02 	lds	r24, 0x0226
    2ca4:	90 91 27 02 	lds	r25, 0x0227
    2ca8:	28 17       	cp	r18, r24
    2caa:	39 07       	cpc	r19, r25
    2cac:	a4 f3       	brlt	.-24     	; 0x2c96 <turn_Fourty_Five+0x54>
	if(val == 0)
	ch = 0x0A;
	else
	ch = 0x05;
	int i;
	for(i=1;i<=n;i++)
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	9b 83       	std	Y+3, r25	; 0x03
    2cb6:	8a 83       	std	Y+2, r24	; 0x02
    2cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cba:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc0:	82 17       	cp	r24, r18
    2cc2:	93 07       	cpc	r25, r19
    2cc4:	f4 f6       	brge	.-68     	; 0x2c82 <turn_Fourty_Five+0x40>
		angle_rotate(25);
		while(ADC_Conversion(2) < threshold)
	{	}
	}

	stop();
    2cc6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	beep();
    2cca:	0e 94 28 14 	call	0x2850	; 0x2850 <beep>
}
    2cce:	27 96       	adiw	r28, 0x07	; 7
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	08 95       	ret

00002ce0 <align>:

void align()
{
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
	while(ADC_Conversion(2) < threshold)
    2ce8:	00 00       	nop
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	80 91 26 02 	lds	r24, 0x0226
    2cf8:	90 91 27 02 	lds	r25, 0x0227
    2cfc:	28 17       	cp	r18, r24
    2cfe:	39 07       	cpc	r19, r25
    2d00:	a4 f3       	brlt	.-24     	; 0x2cea <align+0xa>
	{	}
}
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <Traverse>:

void Traverse(int x)
{
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	2c 97       	sbiw	r28, 0x0c	; 12
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	9c 87       	std	Y+12, r25	; 0x0c
    2d1e:	8b 87       	std	Y+11, r24	; 0x0b
    if(x != 0)
    2d20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d22:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <Traverse+0x22>
    2d28:	5d c1       	rjmp	.+698    	; 0x2fe4 <Traverse+0x2dc>
    {
    int pp=x;
    2d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d2e:	9c 83       	std	Y+4, r25	; 0x04
    2d30:	8b 83       	std	Y+3, r24	; 0x03
    double temp = pp/2.0;
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	9c 81       	ldd	r25, Y+4	; 0x04
    2d36:	aa 27       	eor	r26, r26
    2d38:	97 fd       	sbrc	r25, 7
    2d3a:	a0 95       	com	r26
    2d3c:	ba 2f       	mov	r27, r26
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__floatsisf>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	50 e4       	ldi	r21, 0x40	; 64
    2d56:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	af 83       	std	Y+7, r26	; 0x07
    2d64:	b8 87       	std	Y+8, r27	; 0x08
    int zone = ceil(temp);                  // selects zone number
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	af 81       	ldd	r26, Y+7	; 0x07
    2d6c:	b8 85       	ldd	r27, Y+8	; 0x08
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <ceil>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixsfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9a 87       	std	Y+10, r25	; 0x0a
    2d88:	89 87       	std	Y+9, r24	; 0x09
    int Node_pick = (zone + pp)%2;          // selects pickup point number
    2d8a:	29 85       	ldd	r18, Y+9	; 0x09
    2d8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	82 0f       	add	r24, r18
    2d94:	93 1f       	adc	r25, r19
    2d96:	22 e0       	ldi	r18, 0x02	; 2
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__divmodhi4>
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    dir = zone % 2;		                    //selects direction for turning :   0 for right  :   1 for left
    2da4:	89 85       	ldd	r24, Y+9	; 0x09
    2da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da8:	22 e0       	ldi	r18, 0x02	; 2
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	b9 01       	movw	r22, r18
    2dae:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__divmodhi4>
    2db2:	90 93 62 02 	sts	0x0262, r25
    2db6:	80 93 61 02 	sts	0x0261, r24
    lcd_print(1,12,pp,1);
    2dba:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	6c e0       	ldi	r22, 0x0C	; 12
    2dc2:	a9 01       	movw	r20, r18
    2dc4:	21 e0       	ldi	r18, 0x01	; 1
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    lcd_print(1,13,zone,1);
    2dcc:	29 85       	ldd	r18, Y+9	; 0x09
    2dce:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	6d e0       	ldi	r22, 0x0D	; 13
    2dd4:	a9 01       	movw	r20, r18
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    lcd_print(1,14,Node_pick,1);
    2dde:	29 81       	ldd	r18, Y+1	; 0x01
    2de0:	3a 81       	ldd	r19, Y+2	; 0x02
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	6e e0       	ldi	r22, 0x0E	; 14
    2de6:	a9 01       	movw	r20, r18
    2de8:	21 e0       	ldi	r18, 0x01	; 1
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    lcd_print(1,15,dir,1);
    2df0:	80 91 61 02 	lds	r24, 0x0261
    2df4:	90 91 62 02 	lds	r25, 0x0262
    2df8:	9c 01       	movw	r18, r24
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	6f e0       	ldi	r22, 0x0F	; 15
    2dfe:	a9 01       	movw	r20, r18
    2e00:	21 e0       	ldi	r18, 0x01	; 1
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    
	if(zone == 2)
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	82 30       	cpi	r24, 0x02	; 2
    2e0e:	91 05       	cpc	r25, r1
    2e10:	39 f4       	brne	.+14     	; 0x2e20 <Traverse+0x118>
        turn(1,2);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	62 e0       	ldi	r22, 0x02	; 2
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    2e1e:	0b c0       	rjmp	.+22     	; 0x2e36 <Traverse+0x12e>
    else if (zone == 5)
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	85 30       	cpi	r24, 0x05	; 5
    2e26:	91 05       	cpc	r25, r1
    2e28:	31 f4       	brne	.+12     	; 0x2e36 <Traverse+0x12e>
        turn(0,2);
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    else {}

    Move(2);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
    if(Node_pick == 0)                      // for farther pick up points, Node_pick gets the value "0"
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	21 f4       	brne	.+8      	; 0x2e4e <Traverse+0x146>
        Node_pick = 2;                      // Change Node_pick value to 2
    2e46:	82 e0       	ldi	r24, 0x02	; 2
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
	
	lcd_print(1,15,dir,1);
    2e4e:	80 91 61 02 	lds	r24, 0x0261
    2e52:	90 91 62 02 	lds	r25, 0x0262
    2e56:	9c 01       	movw	r18, r24
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	6f e0       	ldi	r22, 0x0F	; 15
    2e5c:	a9 01       	movw	r20, r18
    2e5e:	21 e0       	ldi	r18, 0x01	; 1
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
	
	turn(dir,1);
    2e66:	80 91 61 02 	lds	r24, 0x0261
    2e6a:	90 91 62 02 	lds	r25, 0x0262
    2e6e:	61 e0       	ldi	r22, 0x01	; 1
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    Move(Node_pick);
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
    dir = dir^1;
    2e7e:	20 91 61 02 	lds	r18, 0x0261
    2e82:	30 91 62 02 	lds	r19, 0x0262
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	82 27       	eor	r24, r18
    2e8c:	93 27       	eor	r25, r19
    2e8e:	90 93 62 02 	sts	0x0262, r25
    2e92:	80 93 61 02 	sts	0x0261, r24
    
    lcd_print(1,15,dir,1);
    2e96:	80 91 61 02 	lds	r24, 0x0261
    2e9a:	90 91 62 02 	lds	r25, 0x0262
    2e9e:	9c 01       	movw	r18, r24
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	6f e0       	ldi	r22, 0x0F	; 15
    2ea4:	a9 01       	movw	r20, r18
    2ea6:	21 e0       	ldi	r18, 0x01	; 1
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    
	turn(dir,1);
    2eae:	80 91 61 02 	lds	r24, 0x0261
    2eb2:	90 91 62 02 	lds	r25, 0x0262
    2eb6:	61 e0       	ldi	r22, 0x01	; 1
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    	
	send(c[x]);
    2ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	84 5f       	subi	r24, 0xF4	; 244
    2ec8:	9d 4f       	sbci	r25, 0xFD	; 253
    2eca:	fc 01       	movw	r30, r24
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	Pick();
    2ed4:	0e 94 3e 10 	call	0x207c	; 0x207c <Pick>
	
	lcd_print(1,15,dir,1);
    2ed8:	80 91 61 02 	lds	r24, 0x0261
    2edc:	90 91 62 02 	lds	r25, 0x0262
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	6f e0       	ldi	r22, 0x0F	; 15
    2ee6:	a9 01       	movw	r20, r18
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
	
	turn(dir,1);
    2ef0:	80 91 61 02 	lds	r24, 0x0261
    2ef4:	90 91 62 02 	lds	r25, 0x0262
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    Move(Node_pick);
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
    
    lcd_print(1,15,dir,1);
    2f08:	80 91 61 02 	lds	r24, 0x0261
    2f0c:	90 91 62 02 	lds	r25, 0x0262
    2f10:	9c 01       	movw	r18, r24
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	6f e0       	ldi	r22, 0x0F	; 15
    2f16:	a9 01       	movw	r20, r18
    2f18:	21 e0       	ldi	r18, 0x01	; 1
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
    
	turn(dir,1);
    2f20:	80 91 61 02 	lds	r24, 0x0261
    2f24:	90 91 62 02 	lds	r25, 0x0262
    2f28:	61 e0       	ldi	r22, 0x01	; 1
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    loc = 1;		// Approaching The Center
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	90 93 3d 02 	sts	0x023D, r25
    2f38:	80 93 3c 02 	sts	0x023C, r24
	Move(2);
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
    loc = 0;		// Resetting For Approaching Normal Node
    2f44:	10 92 3d 02 	sts	0x023D, r1
    2f48:	10 92 3c 02 	sts	0x023C, r1
	
	if(zone == 2 || zone == 5)
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	91 05       	cpc	r25, r1
    2f54:	29 f0       	breq	.+10     	; 0x2f60 <Traverse+0x258>
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	85 30       	cpi	r24, 0x05	; 5
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	a1 f4       	brne	.+40     	; 0x2f88 <Traverse+0x280>
    {
        dir = dir^1;
    2f60:	20 91 61 02 	lds	r18, 0x0261
    2f64:	30 91 62 02 	lds	r19, 0x0262
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	82 27       	eor	r24, r18
    2f6e:	93 27       	eor	r25, r19
    2f70:	90 93 62 02 	sts	0x0262, r25
    2f74:	80 93 61 02 	sts	0x0261, r24
        turn(dir,2);
    2f78:	80 91 61 02 	lds	r24, 0x0261
    2f7c:	90 91 62 02 	lds	r25, 0x0262
    2f80:	62 e0       	ldi	r22, 0x02	; 2
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    }
    
	loc = 2;		// Approaching The Dropping Point
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	90 93 3d 02 	sts	0x023D, r25
    2f90:	80 93 3c 02 	sts	0x023C, r24
    Move(2);
    2f94:	82 e0       	ldi	r24, 0x02	; 2
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
    loc = 0;		// Resetting For Approaching Normal Node
    2f9c:	10 92 3d 02 	sts	0x023D, r1
    2fa0:	10 92 3c 02 	sts	0x023C, r1
    
	Drop();
    2fa4:	0e 94 ef 11 	call	0x23de	; 0x23de <Drop>
	
    right();
    2fa8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <right>
	send(4);
    2fac:	84 e0       	ldi	r24, 0x04	; 4
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	angle_rotate(180);
    2fb4:	84 eb       	ldi	r24, 0xB4	; 180
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
	align();
    2fbc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <align>
	stop();
    2fc0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	loc = 1;		// Approaching The Center
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	90 93 3d 02 	sts	0x023D, r25
    2fcc:	80 93 3c 02 	sts	0x023C, r24
	Move(2);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
	loc = 0;		// Resetting For Approaching Normal Node
    2fd8:	10 92 3d 02 	sts	0x023D, r1
    2fdc:	10 92 3c 02 	sts	0x023C, r1
	stop();
    2fe0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
    }
}
    2fe4:	2c 96       	adiw	r28, 0x0c	; 12
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <Traverse_Last_Zones>:

void Traverse_Last_Zones(int x)
{
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	2c 97       	sbiw	r28, 0x0c	; 12
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	8b 87       	std	Y+11, r24	; 0x0b
	if(x != 0)
    300e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3010:	9c 85       	ldd	r25, Y+12	; 0x0c
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	09 f4       	brne	.+2      	; 0x3018 <Traverse_Last_Zones+0x22>
    3016:	a9 c1       	rjmp	.+850    	; 0x336a <Traverse_Last_Zones+0x374>
	{
		if(deposition_complete == 1)
    3018:	80 91 3e 02 	lds	r24, 0x023E
    301c:	90 91 3f 02 	lds	r25, 0x023F
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	91 05       	cpc	r25, r1
    3024:	09 f0       	breq	.+2      	; 0x3028 <Traverse_Last_Zones+0x32>
    3026:	70 c0       	rjmp	.+224    	; 0x3108 <Traverse_Last_Zones+0x112>
		{
			right();
    3028:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <right>
			send(4);
    302c:	84 e0       	ldi	r24, 0x04	; 4
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
			angle_rotate(180);
    3034:	84 eb       	ldi	r24, 0xB4	; 180
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
			align();
    303c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <align>
			stop();
    3040:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
			
			Move(1);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			dir = dir^1;
    304c:	20 91 61 02 	lds	r18, 0x0261
    3050:	30 91 62 02 	lds	r19, 0x0262
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	82 27       	eor	r24, r18
    305a:	93 27       	eor	r25, r19
    305c:	90 93 62 02 	sts	0x0262, r25
    3060:	80 93 61 02 	sts	0x0261, r24
			turn(dir,1);
    3064:	80 91 61 02 	lds	r24, 0x0261
    3068:	90 91 62 02 	lds	r25, 0x0262
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			Move(1);
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			dir = dir^1;
    307c:	20 91 61 02 	lds	r18, 0x0261
    3080:	30 91 62 02 	lds	r19, 0x0262
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	82 27       	eor	r24, r18
    308a:	93 27       	eor	r25, r19
    308c:	90 93 62 02 	sts	0x0262, r25
    3090:	80 93 61 02 	sts	0x0261, r24
			turn(dir,1);
    3094:	80 91 61 02 	lds	r24, 0x0261
    3098:	90 91 62 02 	lds	r25, 0x0262
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			
			send(c[x]);
    30a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    30a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	84 5f       	subi	r24, 0xF4	; 244
    30ae:	9d 4f       	sbci	r25, 0xFD	; 253
    30b0:	fc 01       	movw	r30, r24
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
			Pick();
    30ba:	0e 94 3e 10 	call	0x207c	; 0x207c <Pick>
		
			turn(dir,1);
    30be:	80 91 61 02 	lds	r24, 0x0261
    30c2:	90 91 62 02 	lds	r25, 0x0262
    30c6:	61 e0       	ldi	r22, 0x01	; 1
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			Move(1);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			turn(dir,1);
    30d6:	80 91 61 02 	lds	r24, 0x0261
    30da:	90 91 62 02 	lds	r25, 0x0262
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			
			loc = 2;		// Approaching The Dropping Point
    30e6:	82 e0       	ldi	r24, 0x02	; 2
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	90 93 3d 02 	sts	0x023D, r25
    30ee:	80 93 3c 02 	sts	0x023C, r24
			Move(1);
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			loc = 0;		// Resetting For Approaching Normal Node
    30fa:	10 92 3d 02 	sts	0x023D, r1
    30fe:	10 92 3c 02 	sts	0x023C, r1
			
			Drop();
    3102:	0e 94 ef 11 	call	0x23de	; 0x23de <Drop>
    3106:	31 c1       	rjmp	.+610    	; 0x336a <Traverse_Last_Zones+0x374>
		}
		else
		{			
			int pp=x;
    3108:	8b 85       	ldd	r24, Y+11	; 0x0b
    310a:	9c 85       	ldd	r25, Y+12	; 0x0c
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
			double temp = pp/2.0;
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	aa 27       	eor	r26, r26
    3116:	97 fd       	sbrc	r25, 7
    3118:	a0 95       	com	r26
    311a:	ba 2f       	mov	r27, r26
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__floatsisf>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	50 e4       	ldi	r21, 0x40	; 64
    3134:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__divsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	af 83       	std	Y+7, r26	; 0x07
    3142:	b8 87       	std	Y+8, r27	; 0x08
			int zone = ceil(temp);                  // selects zone number
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	af 81       	ldd	r26, Y+7	; 0x07
    314a:	b8 85       	ldd	r27, Y+8	; 0x08
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <ceil>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixsfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9a 87       	std	Y+10, r25	; 0x0a
    3166:	89 87       	std	Y+9, r24	; 0x09
			int Node_pick = (zone + pp)%2;          // selects pickup point number
    3168:	29 85       	ldd	r18, Y+9	; 0x09
    316a:	3a 85       	ldd	r19, Y+10	; 0x0a
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	22 e0       	ldi	r18, 0x02	; 2
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	b9 01       	movw	r22, r18
    317a:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__divmodhi4>
    317e:	9a 83       	std	Y+2, r25	; 0x02
    3180:	89 83       	std	Y+1, r24	; 0x01
			dir = zone % 2;                         //selects direction for turning :   0 for right  :   1 for left
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	22 e0       	ldi	r18, 0x02	; 2
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	b9 01       	movw	r22, r18
    318c:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__divmodhi4>
    3190:	90 93 62 02 	sts	0x0262, r25
    3194:	80 93 61 02 	sts	0x0261, r24
			lcd_print(1,12,pp,1);
    3198:	2b 81       	ldd	r18, Y+3	; 0x03
    319a:	3c 81       	ldd	r19, Y+4	; 0x04
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	6c e0       	ldi	r22, 0x0C	; 12
    31a0:	a9 01       	movw	r20, r18
    31a2:	21 e0       	ldi	r18, 0x01	; 1
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			lcd_print(1,13,zone,1);
    31aa:	29 85       	ldd	r18, Y+9	; 0x09
    31ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	6d e0       	ldi	r22, 0x0D	; 13
    31b2:	a9 01       	movw	r20, r18
    31b4:	21 e0       	ldi	r18, 0x01	; 1
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			lcd_print(1,14,Node_pick,1);
    31bc:	29 81       	ldd	r18, Y+1	; 0x01
    31be:	3a 81       	ldd	r19, Y+2	; 0x02
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	6e e0       	ldi	r22, 0x0E	; 14
    31c4:	a9 01       	movw	r20, r18
    31c6:	21 e0       	ldi	r18, 0x01	; 1
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			lcd_print(1,15,dir,1);
    31ce:	80 91 61 02 	lds	r24, 0x0261
    31d2:	90 91 62 02 	lds	r25, 0x0262
    31d6:	9c 01       	movw	r18, r24
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	6f e0       	ldi	r22, 0x0F	; 15
    31dc:	a9 01       	movw	r20, r18
    31de:	21 e0       	ldi	r18, 0x01	; 1
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			
			if (last_flag == 0)
    31e6:	80 91 40 02 	lds	r24, 0x0240
    31ea:	90 91 41 02 	lds	r25, 0x0241
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	49 f4       	brne	.+18     	; 0x3204 <Traverse_Last_Zones+0x20e>
			turn(dir,2);
    31f2:	80 91 61 02 	lds	r24, 0x0261
    31f6:	90 91 62 02 	lds	r25, 0x0262
    31fa:	62 e0       	ldi	r22, 0x02	; 2
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
    3202:	08 c0       	rjmp	.+16     	; 0x3214 <Traverse_Last_Zones+0x21e>
			else
			turn_Fourty_Five(dir,1);
    3204:	80 91 61 02 	lds	r24, 0x0261
    3208:	90 91 62 02 	lds	r25, 0x0262
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	0e 94 21 16 	call	0x2c42	; 0x2c42 <turn_Fourty_Five>

			Move(2);
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			turn(dir,1);
    321c:	80 91 61 02 	lds	r24, 0x0261
    3220:	90 91 62 02 	lds	r25, 0x0262
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			
			if(Node_pick == 0)                      // for farther pick up points, Node_pick gets the value "0"
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	21 f4       	brne	.+8      	; 0x323c <Traverse_Last_Zones+0x246>
			Node_pick = 2;                      // Change Node_pick value to 2
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01
			
			lcd_print(1,15,dir,1);
    323c:	80 91 61 02 	lds	r24, 0x0261
    3240:	90 91 62 02 	lds	r25, 0x0262
    3244:	9c 01       	movw	r18, r24
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	6f e0       	ldi	r22, 0x0F	; 15
    324a:	a9 01       	movw	r20, r18
    324c:	21 e0       	ldi	r18, 0x01	; 1
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			
			
			Move(Node_pick);
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			dir = dir^1;
    325c:	20 91 61 02 	lds	r18, 0x0261
    3260:	30 91 62 02 	lds	r19, 0x0262
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	82 27       	eor	r24, r18
    326a:	93 27       	eor	r25, r19
    326c:	90 93 62 02 	sts	0x0262, r25
    3270:	80 93 61 02 	sts	0x0261, r24
			
			lcd_print(1,15,dir,1);
    3274:	80 91 61 02 	lds	r24, 0x0261
    3278:	90 91 62 02 	lds	r25, 0x0262
    327c:	9c 01       	movw	r18, r24
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	6f e0       	ldi	r22, 0x0F	; 15
    3282:	a9 01       	movw	r20, r18
    3284:	21 e0       	ldi	r18, 0x01	; 1
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			
			turn(dir,1);
    328c:	80 91 61 02 	lds	r24, 0x0261
    3290:	90 91 62 02 	lds	r25, 0x0262
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			
			send(c[x]);
    329c:	8b 85       	ldd	r24, Y+11	; 0x0b
    329e:	9c 85       	ldd	r25, Y+12	; 0x0c
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	84 5f       	subi	r24, 0xF4	; 244
    32a6:	9d 4f       	sbci	r25, 0xFD	; 253
    32a8:	fc 01       	movw	r30, r24
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
			Pick();
    32b2:	0e 94 3e 10 	call	0x207c	; 0x207c <Pick>
		
			dir = dir^1;
    32b6:	20 91 61 02 	lds	r18, 0x0261
    32ba:	30 91 62 02 	lds	r19, 0x0262
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	82 27       	eor	r24, r18
    32c4:	93 27       	eor	r25, r19
    32c6:	90 93 62 02 	sts	0x0262, r25
    32ca:	80 93 61 02 	sts	0x0261, r24
			lcd_print(1,15,dir,1);
    32ce:	80 91 61 02 	lds	r24, 0x0261
    32d2:	90 91 62 02 	lds	r25, 0x0262
    32d6:	9c 01       	movw	r18, r24
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	6f e0       	ldi	r22, 0x0F	; 15
    32dc:	a9 01       	movw	r20, r18
    32de:	21 e0       	ldi	r18, 0x01	; 1
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			
			turn(dir,1);
    32e6:	80 91 61 02 	lds	r24, 0x0261
    32ea:	90 91 62 02 	lds	r25, 0x0262
    32ee:	61 e0       	ldi	r22, 0x01	; 1
    32f0:	70 e0       	ldi	r23, 0x00	; 0
    32f2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			Move(3-Node_pick);
    32f6:	23 e0       	ldi	r18, 0x03	; 3
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	9a 81       	ldd	r25, Y+2	; 0x02
    32fe:	a9 01       	movw	r20, r18
    3300:	48 1b       	sub	r20, r24
    3302:	59 0b       	sbc	r21, r25
    3304:	ca 01       	movw	r24, r20
    3306:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			
			lcd_print(1,15,dir,1);
    330a:	80 91 61 02 	lds	r24, 0x0261
    330e:	90 91 62 02 	lds	r25, 0x0262
    3312:	9c 01       	movw	r18, r24
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	6f e0       	ldi	r22, 0x0F	; 15
    3318:	a9 01       	movw	r20, r18
    331a:	21 e0       	ldi	r18, 0x01	; 1
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
			
			turn(dir,1);
    3322:	80 91 61 02 	lds	r24, 0x0261
    3326:	90 91 62 02 	lds	r25, 0x0262
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
			
			loc = 2;		// Approaching The Dropping Point
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	90 93 3d 02 	sts	0x023D, r25
    333a:	80 93 3c 02 	sts	0x023C, r24
			Move(1);
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
			loc = 0;		// Resetting For Approaching Normal Node
    3346:	10 92 3d 02 	sts	0x023D, r1
    334a:	10 92 3c 02 	sts	0x023C, r1
			Drop();
    334e:	0e 94 ef 11 	call	0x23de	; 0x23de <Drop>
			deposition_complete = 1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	90 93 3f 02 	sts	0x023F, r25
    335a:	80 93 3e 02 	sts	0x023E, r24
			last_flag = 1;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	90 93 41 02 	sts	0x0241, r25
    3366:	80 93 40 02 	sts	0x0240, r24
		}
	}
}	
    336a:	2c 96       	adiw	r28, 0x0c	; 12
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	08 95       	ret

0000337c <set_to_middle>:

void set_to_middle()
{
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
	if( (deposition_complete == 1) && (p11 == 11 || p12 == 12) )
    3384:	80 91 3e 02 	lds	r24, 0x023E
    3388:	90 91 3f 02 	lds	r25, 0x023F
    338c:	81 30       	cpi	r24, 0x01	; 1
    338e:	91 05       	cpc	r25, r1
    3390:	09 f0       	breq	.+2      	; 0x3394 <set_to_middle+0x18>
    3392:	3e c0       	rjmp	.+124    	; 0x3410 <set_to_middle+0x94>
    3394:	80 91 3a 02 	lds	r24, 0x023A
    3398:	90 91 3b 02 	lds	r25, 0x023B
    339c:	8b 30       	cpi	r24, 0x0B	; 11
    339e:	91 05       	cpc	r25, r1
    33a0:	39 f0       	breq	.+14     	; 0x33b0 <set_to_middle+0x34>
    33a2:	80 91 0a 02 	lds	r24, 0x020A
    33a6:	90 91 0b 02 	lds	r25, 0x020B
    33aa:	8c 30       	cpi	r24, 0x0C	; 12
    33ac:	91 05       	cpc	r25, r1
    33ae:	81 f5       	brne	.+96     	; 0x3410 <set_to_middle+0x94>
	{
		right();
    33b0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <right>
		send(4);
    33b4:	84 e0       	ldi	r24, 0x04	; 4
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
		angle_rotate(180);
    33bc:	84 eb       	ldi	r24, 0xB4	; 180
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
		align();
    33c4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <align>
		stop();
    33c8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
		
		Move(1);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
		turn(0,1);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	61 e0       	ldi	r22, 0x01	; 1
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <turn>
		turn_Fourty_Five(0,1);
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <turn_Fourty_Five>
		loc = 1;		// Approaching The Center
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	90 93 3d 02 	sts	0x023D, r25
    33f4:	80 93 3c 02 	sts	0x023C, r24
		Move(3);
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Move>
		loc = 0;		// Resetting For Approaching Normal Node
    3400:	10 92 3d 02 	sts	0x023D, r1
    3404:	10 92 3c 02 	sts	0x023C, r1
		deposition_complete = 0;
    3408:	10 92 3f 02 	sts	0x023F, r1
    340c:	10 92 3e 02 	sts	0x023E, r1
	}
}
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <Move>:

void Move(int value)
{
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	0f 92       	push	r0
    341c:	0f 92       	push	r0
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
	send(2);
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	count = value;
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	90 93 64 02 	sts	0x0264, r25
    3436:	80 93 63 02 	sts	0x0263, r24
    while(count != 0)
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <Move+0x2a>
    {
        LINE_FOLLOW();
    343c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LINE_FOLLOW>

void Move(int value)
{
	send(2);
	count = value;
    while(count != 0)
    3440:	80 91 63 02 	lds	r24, 0x0263
    3444:	90 91 64 02 	lds	r25, 0x0264
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	c1 f7       	brne	.-16     	; 0x343c <Move+0x26>
    {
        LINE_FOLLOW();
    }
	
	if(loc == 0)
    344c:	80 91 3c 02 	lds	r24, 0x023C
    3450:	90 91 3d 02 	lds	r25, 0x023D
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	29 f4       	brne	.+10     	; 0x3462 <Move+0x4c>
	{
		linear_distance_mm(45);
    3458:	8d e2       	ldi	r24, 0x2D	; 45
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <linear_distance_mm>
    3460:	0d c0       	rjmp	.+26     	; 0x347c <Move+0x66>
	}		
	else if (loc == 1)
    3462:	80 91 3c 02 	lds	r24, 0x023C
    3466:	90 91 3d 02 	lds	r25, 0x023D
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	91 05       	cpc	r25, r1
    346e:	31 f4       	brne	.+12     	; 0x347c <Move+0x66>
	{
		forward();
    3470:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <forward>
		linear_distance_mm(45);
    3474:	8d e2       	ldi	r24, 0x2D	; 45
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <linear_distance_mm>
// 			while (ADC_Conversion(2) < threshold)
// 			soft_left_2();
// 		}
// 		PORTJ = 0x00;
	}		
    stop();
    347c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	08 95       	ret

0000348a <main>:

//Main Function
int main()
{
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	c6 54       	subi	r28, 0x46	; 70
    3498:	d0 40       	sbci	r29, 0x00	; 0
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
	
	init_devices();
    34a4:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <init_devices>
	lcd_set_4bit();
    34a8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    34ac:	0e 94 8b 06 	call	0xd16	; 0xd16 <lcd_init>
	velocity(130,115);
    34b0:	82 e8       	ldi	r24, 0x82	; 130
    34b2:	63 e7       	ldi	r22, 0x73	; 115
    34b4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <velocity>
	BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <ADC_Conversion>
    34be:	48 2f       	mov	r20, r24
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	24 e6       	ldi	r18, 0x64	; 100
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	42 9f       	mul	r20, r18
    34c8:	c0 01       	movw	r24, r0
    34ca:	43 9f       	mul	r20, r19
    34cc:	90 0d       	add	r25, r0
    34ce:	52 9f       	mul	r21, r18
    34d0:	90 0d       	add	r25, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	aa 27       	eor	r26, r26
    34d6:	97 fd       	sbrc	r25, 7
    34d8:	a0 95       	com	r26
    34da:	ba 2f       	mov	r27, r26
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__floatsisf>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	2d e3       	ldi	r18, 0x3D	; 61
    34ee:	35 ed       	ldi	r19, 0xD5	; 213
    34f0:	41 ea       	ldi	r20, 0xA1	; 161
    34f2:	5d e3       	ldi	r21, 0x3D	; 61
    34f4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	23 e3       	ldi	r18, 0x33	; 51
    3502:	33 e3       	ldi	r19, 0x33	; 51
    3504:	43 e3       	ldi	r20, 0x33	; 51
    3506:	5f e3       	ldi	r21, 0x3F	; 63
    3508:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__addsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	80 93 5a 02 	sts	0x025A, r24
    3514:	90 93 5b 02 	sts	0x025B, r25
    3518:	a0 93 5c 02 	sts	0x025C, r26
    351c:	b0 93 5d 02 	sts	0x025D, r27
	lcd_print(1,1,BATT_Voltage,4);
    3520:	80 91 5a 02 	lds	r24, 0x025A
    3524:	90 91 5b 02 	lds	r25, 0x025B
    3528:	a0 91 5c 02 	lds	r26, 0x025C
    352c:	b0 91 5d 02 	lds	r27, 0x025D
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9c 01       	movw	r18, r24
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	a9 01       	movw	r20, r18
    3544:	24 e0       	ldi	r18, 0x04	; 4
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
	servo_1(Up_POSITION);
    354c:	80 91 2a 02 	lds	r24, 0x022A
    3550:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <servo_1>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	aa ef       	ldi	r26, 0xFA	; 250
    355a:	b3 e4       	ldi	r27, 0x43	; 67
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	9a 83       	std	Y+2, r25	; 0x02
    3560:	ab 83       	std	Y+3, r26	; 0x03
    3562:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3564:	69 81       	ldd	r22, Y+1	; 0x01
    3566:	7a 81       	ldd	r23, Y+2	; 0x02
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	26 e6       	ldi	r18, 0x66	; 102
    356e:	36 e6       	ldi	r19, 0x66	; 102
    3570:	46 e6       	ldi	r20, 0x66	; 102
    3572:	55 e4       	ldi	r21, 0x45	; 69
    3574:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	af 83       	std	Y+7, r26	; 0x07
    3582:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3584:	11 e0       	ldi	r17, 0x01	; 1
    3586:	6d 81       	ldd	r22, Y+5	; 0x05
    3588:	7e 81       	ldd	r23, Y+6	; 0x06
    358a:	8f 81       	ldd	r24, Y+7	; 0x07
    358c:	98 85       	ldd	r25, Y+8	; 0x08
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e8       	ldi	r20, 0x80	; 128
    3594:	5f e3       	ldi	r21, 0x3F	; 63
    3596:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    359a:	88 23       	and	r24, r24
    359c:	0c f0       	brlt	.+2      	; 0x35a0 <main+0x116>
    359e:	10 e0       	ldi	r17, 0x00	; 0
    35a0:	11 23       	and	r17, r17
    35a2:	29 f0       	breq	.+10     	; 0x35ae <main+0x124>
		__ticks = 1;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	9a 87       	std	Y+10, r25	; 0x0a
    35aa:	89 87       	std	Y+9, r24	; 0x09
    35ac:	46 c0       	rjmp	.+140    	; 0x363a <main+0x1b0>
	else if (__tmp > 65535)
    35ae:	11 e0       	ldi	r17, 0x01	; 1
    35b0:	6d 81       	ldd	r22, Y+5	; 0x05
    35b2:	7e 81       	ldd	r23, Y+6	; 0x06
    35b4:	8f 81       	ldd	r24, Y+7	; 0x07
    35b6:	98 85       	ldd	r25, Y+8	; 0x08
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	3f ef       	ldi	r19, 0xFF	; 255
    35bc:	4f e7       	ldi	r20, 0x7F	; 127
    35be:	57 e4       	ldi	r21, 0x47	; 71
    35c0:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	0c f0       	brlt	.+2      	; 0x35ca <main+0x140>
    35c8:	10 e0       	ldi	r17, 0x00	; 0
    35ca:	11 23       	and	r17, r17
    35cc:	61 f1       	breq	.+88     	; 0x3626 <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ce:	69 81       	ldd	r22, Y+1	; 0x01
    35d0:	7a 81       	ldd	r23, Y+2	; 0x02
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e2       	ldi	r20, 0x20	; 32
    35dc:	51 e4       	ldi	r21, 0x41	; 65
    35de:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9a 87       	std	Y+10, r25	; 0x0a
    35f4:	89 87       	std	Y+9, r24	; 0x09
    35f6:	12 c0       	rjmp	.+36     	; 0x361c <main+0x192>
    35f8:	80 e7       	ldi	r24, 0x70	; 112
    35fa:	91 e0       	ldi	r25, 0x01	; 1
    35fc:	9c 87       	std	Y+12, r25	; 0x0c
    35fe:	8b 87       	std	Y+11, r24	; 0x0b
    3600:	8b 85       	ldd	r24, Y+11	; 0x0b
    3602:	9c 85       	ldd	r25, Y+12	; 0x0c
    3604:	8c 01       	movw	r16, r24
    3606:	c8 01       	movw	r24, r16
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <main+0x17e>
    360c:	8c 01       	movw	r16, r24
    360e:	1c 87       	std	Y+12, r17	; 0x0c
    3610:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	9a 87       	std	Y+10, r25	; 0x0a
    361a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361c:	89 85       	ldd	r24, Y+9	; 0x09
    361e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	51 f7       	brne	.-44     	; 0x35f8 <main+0x16e>
    3624:	17 c0       	rjmp	.+46     	; 0x3654 <main+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3626:	6d 81       	ldd	r22, Y+5	; 0x05
    3628:	7e 81       	ldd	r23, Y+6	; 0x06
    362a:	8f 81       	ldd	r24, Y+7	; 0x07
    362c:	98 85       	ldd	r25, Y+8	; 0x08
    362e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9a 87       	std	Y+10, r25	; 0x0a
    3638:	89 87       	std	Y+9, r24	; 0x09
    363a:	89 85       	ldd	r24, Y+9	; 0x09
    363c:	9a 85       	ldd	r25, Y+10	; 0x0a
    363e:	9e 87       	std	Y+14, r25	; 0x0e
    3640:	8d 87       	std	Y+13, r24	; 0x0d
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	8c 01       	movw	r16, r24
    3648:	f8 01       	movw	r30, r16
    364a:	31 97       	sbiw	r30, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <main+0x1c0>
    364e:	8f 01       	movw	r16, r30
    3650:	1e 87       	std	Y+14, r17	; 0x0e
    3652:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	servo_2(Loose_Angle);
    3654:	80 91 2f 02 	lds	r24, 0x022F
    3658:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo_2>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	aa ef       	ldi	r26, 0xFA	; 250
    3662:	b4 e4       	ldi	r27, 0x44	; 68
    3664:	8f 87       	std	Y+15, r24	; 0x0f
    3666:	98 8b       	std	Y+16, r25	; 0x10
    3668:	a9 8b       	std	Y+17, r26	; 0x11
    366a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    366c:	6f 85       	ldd	r22, Y+15	; 0x0f
    366e:	78 89       	ldd	r23, Y+16	; 0x10
    3670:	89 89       	ldd	r24, Y+17	; 0x11
    3672:	9a 89       	ldd	r25, Y+18	; 0x12
    3674:	26 e6       	ldi	r18, 0x66	; 102
    3676:	36 e6       	ldi	r19, 0x66	; 102
    3678:	46 e6       	ldi	r20, 0x66	; 102
    367a:	55 e4       	ldi	r21, 0x45	; 69
    367c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8b 8b       	std	Y+19, r24	; 0x13
    3686:	9c 8b       	std	Y+20, r25	; 0x14
    3688:	ad 8b       	std	Y+21, r26	; 0x15
    368a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    368c:	11 e0       	ldi	r17, 0x01	; 1
    368e:	6b 89       	ldd	r22, Y+19	; 0x13
    3690:	7c 89       	ldd	r23, Y+20	; 0x14
    3692:	8d 89       	ldd	r24, Y+21	; 0x15
    3694:	9e 89       	ldd	r25, Y+22	; 0x16
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	5f e3       	ldi	r21, 0x3F	; 63
    369e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    36a2:	88 23       	and	r24, r24
    36a4:	0c f0       	brlt	.+2      	; 0x36a8 <main+0x21e>
    36a6:	10 e0       	ldi	r17, 0x00	; 0
    36a8:	11 23       	and	r17, r17
    36aa:	29 f0       	breq	.+10     	; 0x36b6 <main+0x22c>
		__ticks = 1;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	98 8f       	std	Y+24, r25	; 0x18
    36b2:	8f 8b       	std	Y+23, r24	; 0x17
    36b4:	46 c0       	rjmp	.+140    	; 0x3742 <main+0x2b8>
	else if (__tmp > 65535)
    36b6:	11 e0       	ldi	r17, 0x01	; 1
    36b8:	6b 89       	ldd	r22, Y+19	; 0x13
    36ba:	7c 89       	ldd	r23, Y+20	; 0x14
    36bc:	8d 89       	ldd	r24, Y+21	; 0x15
    36be:	9e 89       	ldd	r25, Y+22	; 0x16
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	3f ef       	ldi	r19, 0xFF	; 255
    36c4:	4f e7       	ldi	r20, 0x7F	; 127
    36c6:	57 e4       	ldi	r21, 0x47	; 71
    36c8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    36cc:	18 16       	cp	r1, r24
    36ce:	0c f0       	brlt	.+2      	; 0x36d2 <main+0x248>
    36d0:	10 e0       	ldi	r17, 0x00	; 0
    36d2:	11 23       	and	r17, r17
    36d4:	61 f1       	breq	.+88     	; 0x372e <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    36d8:	78 89       	ldd	r23, Y+16	; 0x10
    36da:	89 89       	ldd	r24, Y+17	; 0x11
    36dc:	9a 89       	ldd	r25, Y+18	; 0x12
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e2       	ldi	r20, 0x20	; 32
    36e4:	51 e4       	ldi	r21, 0x41	; 65
    36e6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	98 8f       	std	Y+24, r25	; 0x18
    36fc:	8f 8b       	std	Y+23, r24	; 0x17
    36fe:	12 c0       	rjmp	.+36     	; 0x3724 <main+0x29a>
    3700:	80 e7       	ldi	r24, 0x70	; 112
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	9a 8f       	std	Y+26, r25	; 0x1a
    3706:	89 8f       	std	Y+25, r24	; 0x19
    3708:	89 8d       	ldd	r24, Y+25	; 0x19
    370a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    370c:	8c 01       	movw	r16, r24
    370e:	c8 01       	movw	r24, r16
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <main+0x286>
    3714:	8c 01       	movw	r16, r24
    3716:	1a 8f       	std	Y+26, r17	; 0x1a
    3718:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	8f 89       	ldd	r24, Y+23	; 0x17
    371c:	98 8d       	ldd	r25, Y+24	; 0x18
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	98 8f       	std	Y+24, r25	; 0x18
    3722:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	8f 89       	ldd	r24, Y+23	; 0x17
    3726:	98 8d       	ldd	r25, Y+24	; 0x18
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	51 f7       	brne	.-44     	; 0x3700 <main+0x276>
    372c:	17 c0       	rjmp	.+46     	; 0x375c <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6b 89       	ldd	r22, Y+19	; 0x13
    3730:	7c 89       	ldd	r23, Y+20	; 0x14
    3732:	8d 89       	ldd	r24, Y+21	; 0x15
    3734:	9e 89       	ldd	r25, Y+22	; 0x16
    3736:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	98 8f       	std	Y+24, r25	; 0x18
    3740:	8f 8b       	std	Y+23, r24	; 0x17
    3742:	8f 89       	ldd	r24, Y+23	; 0x17
    3744:	98 8d       	ldd	r25, Y+24	; 0x18
    3746:	9c 8f       	std	Y+28, r25	; 0x1c
    3748:	8b 8f       	std	Y+27, r24	; 0x1b
    374a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    374e:	8c 01       	movw	r16, r24
    3750:	f8 01       	movw	r30, r16
    3752:	31 97       	sbiw	r30, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <main+0x2c8>
    3756:	8f 01       	movw	r16, r30
    3758:	1c 8f       	std	Y+28, r17	; 0x1c
    375a:	0b 8f       	std	Y+27, r16	; 0x1b
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	aa ef       	ldi	r26, 0xFA	; 250
    3762:	b4 e4       	ldi	r27, 0x44	; 68
    3764:	8d 8f       	std	Y+29, r24	; 0x1d
    3766:	9e 8f       	std	Y+30, r25	; 0x1e
    3768:	af 8f       	std	Y+31, r26	; 0x1f
    376a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    376c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    376e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3770:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3772:	98 a1       	lds	r25, 0x48
    3774:	26 e6       	ldi	r18, 0x66	; 102
    3776:	36 e6       	ldi	r19, 0x66	; 102
    3778:	46 e6       	ldi	r20, 0x66	; 102
    377a:	55 e4       	ldi	r21, 0x45	; 69
    377c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	89 a3       	lds	r24, 0x59
    3786:	9a a3       	lds	r25, 0x5a
    3788:	ab a3       	lds	r26, 0x5b
    378a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    378c:	11 e0       	ldi	r17, 0x01	; 1
    378e:	69 a1       	lds	r22, 0x49
    3790:	7a a1       	lds	r23, 0x4a
    3792:	8b a1       	lds	r24, 0x4b
    3794:	9c a1       	lds	r25, 0x4c
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e8       	ldi	r20, 0x80	; 128
    379c:	5f e3       	ldi	r21, 0x3F	; 63
    379e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    37a2:	88 23       	and	r24, r24
    37a4:	0c f0       	brlt	.+2      	; 0x37a8 <main+0x31e>
    37a6:	10 e0       	ldi	r17, 0x00	; 0
    37a8:	11 23       	and	r17, r17
    37aa:	29 f0       	breq	.+10     	; 0x37b6 <main+0x32c>
		__ticks = 1;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	9e a3       	lds	r25, 0x5e
    37b2:	8d a3       	lds	r24, 0x5d
    37b4:	46 c0       	rjmp	.+140    	; 0x3842 <main+0x3b8>
	else if (__tmp > 65535)
    37b6:	11 e0       	ldi	r17, 0x01	; 1
    37b8:	69 a1       	lds	r22, 0x49
    37ba:	7a a1       	lds	r23, 0x4a
    37bc:	8b a1       	lds	r24, 0x4b
    37be:	9c a1       	lds	r25, 0x4c
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	3f ef       	ldi	r19, 0xFF	; 255
    37c4:	4f e7       	ldi	r20, 0x7F	; 127
    37c6:	57 e4       	ldi	r21, 0x47	; 71
    37c8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    37cc:	18 16       	cp	r1, r24
    37ce:	0c f0       	brlt	.+2      	; 0x37d2 <main+0x348>
    37d0:	10 e0       	ldi	r17, 0x00	; 0
    37d2:	11 23       	and	r17, r17
    37d4:	61 f1       	breq	.+88     	; 0x382e <main+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37d8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    37da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37dc:	98 a1       	lds	r25, 0x48
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e2       	ldi	r20, 0x20	; 32
    37e4:	51 e4       	ldi	r21, 0x41	; 65
    37e6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9e a3       	lds	r25, 0x5e
    37fc:	8d a3       	lds	r24, 0x5d
    37fe:	12 c0       	rjmp	.+36     	; 0x3824 <main+0x39a>
    3800:	80 e7       	ldi	r24, 0x70	; 112
    3802:	91 e0       	ldi	r25, 0x01	; 1
    3804:	98 a7       	lds	r25, 0x78
    3806:	8f a3       	lds	r24, 0x5f
    3808:	8f a1       	lds	r24, 0x4f
    380a:	98 a5       	lds	r25, 0x68
    380c:	8c 01       	movw	r16, r24
    380e:	c8 01       	movw	r24, r16
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <main+0x386>
    3814:	8c 01       	movw	r16, r24
    3816:	18 a7       	lds	r17, 0x78
    3818:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381a:	8d a1       	lds	r24, 0x4d
    381c:	9e a1       	lds	r25, 0x4e
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	9e a3       	lds	r25, 0x5e
    3822:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3824:	8d a1       	lds	r24, 0x4d
    3826:	9e a1       	lds	r25, 0x4e
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	51 f7       	brne	.-44     	; 0x3800 <main+0x376>
    382c:	17 c0       	rjmp	.+46     	; 0x385c <main+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382e:	69 a1       	lds	r22, 0x49
    3830:	7a a1       	lds	r23, 0x4a
    3832:	8b a1       	lds	r24, 0x4b
    3834:	9c a1       	lds	r25, 0x4c
    3836:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	9e a3       	lds	r25, 0x5e
    3840:	8d a3       	lds	r24, 0x5d
    3842:	8d a1       	lds	r24, 0x4d
    3844:	9e a1       	lds	r25, 0x4e
    3846:	9a a7       	lds	r25, 0x7a
    3848:	89 a7       	lds	r24, 0x79
    384a:	89 a5       	lds	r24, 0x69
    384c:	9a a5       	lds	r25, 0x6a
    384e:	8c 01       	movw	r16, r24
    3850:	f8 01       	movw	r30, r16
    3852:	31 97       	sbiw	r30, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <main+0x3c8>
    3856:	8f 01       	movw	r16, r30
    3858:	1a a7       	lds	r17, 0x7a
    385a:	09 a7       	lds	r16, 0x79
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	aa ef       	ldi	r26, 0xFA	; 250
    3862:	b4 e4       	ldi	r27, 0x44	; 68
    3864:	8b a7       	lds	r24, 0x7b
    3866:	9c a7       	lds	r25, 0x7c
    3868:	ad a7       	lds	r26, 0x7d
    386a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6b a5       	lds	r22, 0x6b
    386e:	7c a5       	lds	r23, 0x6c
    3870:	8d a5       	lds	r24, 0x6d
    3872:	9e a5       	lds	r25, 0x6e
    3874:	26 e6       	ldi	r18, 0x66	; 102
    3876:	36 e6       	ldi	r19, 0x66	; 102
    3878:	46 e6       	ldi	r20, 0x66	; 102
    387a:	55 e4       	ldi	r21, 0x45	; 69
    387c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	8f a7       	lds	r24, 0x7f
    3886:	98 ab       	sts	0x58, r25
    3888:	a9 ab       	sts	0x59, r26
    388a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    388c:	11 e0       	ldi	r17, 0x01	; 1
    388e:	6f a5       	lds	r22, 0x6f
    3890:	78 a9       	sts	0x48, r23
    3892:	89 a9       	sts	0x49, r24
    3894:	9a a9       	sts	0x4a, r25
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	5f e3       	ldi	r21, 0x3F	; 63
    389e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    38a2:	88 23       	and	r24, r24
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <main+0x41e>
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	11 23       	and	r17, r17
    38aa:	29 f0       	breq	.+10     	; 0x38b6 <main+0x42c>
		__ticks = 1;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	9c ab       	sts	0x5c, r25
    38b2:	8b ab       	sts	0x5b, r24
    38b4:	46 c0       	rjmp	.+140    	; 0x3942 <main+0x4b8>
	else if (__tmp > 65535)
    38b6:	11 e0       	ldi	r17, 0x01	; 1
    38b8:	6f a5       	lds	r22, 0x6f
    38ba:	78 a9       	sts	0x48, r23
    38bc:	89 a9       	sts	0x49, r24
    38be:	9a a9       	sts	0x4a, r25
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	3f ef       	ldi	r19, 0xFF	; 255
    38c4:	4f e7       	ldi	r20, 0x7F	; 127
    38c6:	57 e4       	ldi	r21, 0x47	; 71
    38c8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    38cc:	18 16       	cp	r1, r24
    38ce:	0c f0       	brlt	.+2      	; 0x38d2 <main+0x448>
    38d0:	10 e0       	ldi	r17, 0x00	; 0
    38d2:	11 23       	and	r17, r17
    38d4:	61 f1       	breq	.+88     	; 0x392e <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d6:	6b a5       	lds	r22, 0x6b
    38d8:	7c a5       	lds	r23, 0x6c
    38da:	8d a5       	lds	r24, 0x6d
    38dc:	9e a5       	lds	r25, 0x6e
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e2       	ldi	r20, 0x20	; 32
    38e4:	51 e4       	ldi	r21, 0x41	; 65
    38e6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	bc 01       	movw	r22, r24
    38f0:	cd 01       	movw	r24, r26
    38f2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	9c ab       	sts	0x5c, r25
    38fc:	8b ab       	sts	0x5b, r24
    38fe:	12 c0       	rjmp	.+36     	; 0x3924 <main+0x49a>
    3900:	80 e7       	ldi	r24, 0x70	; 112
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	9e ab       	sts	0x5e, r25
    3906:	8d ab       	sts	0x5d, r24
    3908:	8d a9       	sts	0x4d, r24
    390a:	9e a9       	sts	0x4e, r25
    390c:	8c 01       	movw	r16, r24
    390e:	c8 01       	movw	r24, r16
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <main+0x486>
    3914:	8c 01       	movw	r16, r24
    3916:	1e ab       	sts	0x5e, r17
    3918:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391a:	8b a9       	sts	0x4b, r24
    391c:	9c a9       	sts	0x4c, r25
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	9c ab       	sts	0x5c, r25
    3922:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3924:	8b a9       	sts	0x4b, r24
    3926:	9c a9       	sts	0x4c, r25
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	51 f7       	brne	.-44     	; 0x3900 <main+0x476>
    392c:	17 c0       	rjmp	.+46     	; 0x395c <main+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392e:	6f a5       	lds	r22, 0x6f
    3930:	78 a9       	sts	0x48, r23
    3932:	89 a9       	sts	0x49, r24
    3934:	9a a9       	sts	0x4a, r25
    3936:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	9c ab       	sts	0x5c, r25
    3940:	8b ab       	sts	0x5b, r24
    3942:	8b a9       	sts	0x4b, r24
    3944:	9c a9       	sts	0x4c, r25
    3946:	98 af       	sts	0x78, r25
    3948:	8f ab       	sts	0x5f, r24
    394a:	8f a9       	sts	0x4f, r24
    394c:	98 ad       	sts	0x68, r25
    394e:	8c 01       	movw	r16, r24
    3950:	f8 01       	movw	r30, r16
    3952:	31 97       	sbiw	r30, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <main+0x4c8>
    3956:	8f 01       	movw	r16, r30
    3958:	18 af       	sts	0x78, r17
    395a:	0f ab       	sts	0x5f, r16
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	aa ef       	ldi	r26, 0xFA	; 250
    3962:	b4 e4       	ldi	r27, 0x44	; 68
    3964:	89 af       	sts	0x79, r24
    3966:	9a af       	sts	0x7a, r25
    3968:	ab af       	sts	0x7b, r26
    396a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    396c:	69 ad       	sts	0x69, r22
    396e:	7a ad       	sts	0x6a, r23
    3970:	8b ad       	sts	0x6b, r24
    3972:	9c ad       	sts	0x6c, r25
    3974:	26 e6       	ldi	r18, 0x66	; 102
    3976:	36 e6       	ldi	r19, 0x66	; 102
    3978:	46 e6       	ldi	r20, 0x66	; 102
    397a:	55 e4       	ldi	r21, 0x45	; 69
    397c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	9e 01       	movw	r18, r28
    3986:	23 5c       	subi	r18, 0xC3	; 195
    3988:	3f 4f       	sbci	r19, 0xFF	; 255
    398a:	f9 01       	movw	r30, r18
    398c:	80 83       	st	Z, r24
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	a2 83       	std	Z+2, r26	; 0x02
    3992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3994:	11 e0       	ldi	r17, 0x01	; 1
    3996:	ce 01       	movw	r24, r28
    3998:	cd 96       	adiw	r24, 0x3d	; 61
    399a:	fc 01       	movw	r30, r24
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e8       	ldi	r20, 0x80	; 128
    39aa:	5f e3       	ldi	r21, 0x3F	; 63
    39ac:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__cmpsf2>
    39b0:	88 23       	and	r24, r24
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <main+0x52c>
    39b4:	10 e0       	ldi	r17, 0x00	; 0
    39b6:	11 23       	and	r17, r17
    39b8:	49 f0       	breq	.+18     	; 0x39cc <main+0x542>
		__ticks = 1;
    39ba:	ce 01       	movw	r24, r28
    39bc:	8f 5b       	subi	r24, 0xBF	; 191
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	21 e0       	ldi	r18, 0x01	; 1
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	fc 01       	movw	r30, r24
    39c6:	31 83       	std	Z+1, r19	; 0x01
    39c8:	20 83       	st	Z, r18
    39ca:	6e c0       	rjmp	.+220    	; 0x3aa8 <main+0x61e>
	else if (__tmp > 65535)
    39cc:	11 e0       	ldi	r17, 0x01	; 1
    39ce:	ce 01       	movw	r24, r28
    39d0:	cd 96       	adiw	r24, 0x3d	; 61
    39d2:	fc 01       	movw	r30, r24
    39d4:	60 81       	ld	r22, Z
    39d6:	71 81       	ldd	r23, Z+1	; 0x01
    39d8:	82 81       	ldd	r24, Z+2	; 0x02
    39da:	93 81       	ldd	r25, Z+3	; 0x03
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	3f ef       	ldi	r19, 0xFF	; 255
    39e0:	4f e7       	ldi	r20, 0x7F	; 127
    39e2:	57 e4       	ldi	r21, 0x47	; 71
    39e4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__gesf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	0c f0       	brlt	.+2      	; 0x39ee <main+0x564>
    39ec:	10 e0       	ldi	r17, 0x00	; 0
    39ee:	11 23       	and	r17, r17
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <main+0x56a>
    39f2:	49 c0       	rjmp	.+146    	; 0x3a86 <main+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	69 ad       	sts	0x69, r22
    39f6:	7a ad       	sts	0x6a, r23
    39f8:	8b ad       	sts	0x6b, r24
    39fa:	9c ad       	sts	0x6c, r25
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	8e 01       	movw	r16, r28
    3a0e:	0f 5b       	subi	r16, 0xBF	; 191
    3a10:	1f 4f       	sbci	r17, 0xFF	; 255
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	f8 01       	movw	r30, r16
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	80 83       	st	Z, r24
    3a24:	27 c0       	rjmp	.+78     	; 0x3a74 <main+0x5ea>
    3a26:	ce 01       	movw	r24, r28
    3a28:	8d 5b       	subi	r24, 0xBD	; 189
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	20 e7       	ldi	r18, 0x70	; 112
    3a2e:	31 e0       	ldi	r19, 0x01	; 1
    3a30:	fc 01       	movw	r30, r24
    3a32:	31 83       	std	Z+1, r19	; 0x01
    3a34:	20 83       	st	Z, r18
    3a36:	ce 01       	movw	r24, r28
    3a38:	8d 5b       	subi	r24, 0xBD	; 189
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	8c 01       	movw	r16, r24
    3a44:	c8 01       	movw	r24, r16
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <main+0x5bc>
    3a4a:	8c 01       	movw	r16, r24
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	8d 5b       	subi	r24, 0xBD	; 189
    3a50:	9f 4f       	sbci	r25, 0xFF	; 255
    3a52:	fc 01       	movw	r30, r24
    3a54:	11 83       	std	Z+1, r17	; 0x01
    3a56:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a58:	ce 01       	movw	r24, r28
    3a5a:	8f 5b       	subi	r24, 0xBF	; 191
    3a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5e:	9e 01       	movw	r18, r28
    3a60:	2f 5b       	subi	r18, 0xBF	; 191
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	f9 01       	movw	r30, r18
    3a66:	20 81       	ld	r18, Z
    3a68:	31 81       	ldd	r19, Z+1	; 0x01
    3a6a:	21 50       	subi	r18, 0x01	; 1
    3a6c:	30 40       	sbci	r19, 0x00	; 0
    3a6e:	fc 01       	movw	r30, r24
    3a70:	31 83       	std	Z+1, r19	; 0x01
    3a72:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a74:	ce 01       	movw	r24, r28
    3a76:	8f 5b       	subi	r24, 0xBF	; 191
    3a78:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	80 81       	ld	r24, Z
    3a7e:	91 81       	ldd	r25, Z+1	; 0x01
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	89 f6       	brne	.-94     	; 0x3a26 <main+0x59c>
    3a84:	2e c0       	rjmp	.+92     	; 0x3ae2 <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a86:	8e 01       	movw	r16, r28
    3a88:	0f 5b       	subi	r16, 0xBF	; 191
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	cd 96       	adiw	r24, 0x3d	; 61
    3a90:	fc 01       	movw	r30, r24
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fixunssfsi>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	8b 5b       	subi	r24, 0xBB	; 187
    3aac:	9f 4f       	sbci	r25, 0xFF	; 255
    3aae:	9e 01       	movw	r18, r28
    3ab0:	2f 5b       	subi	r18, 0xBF	; 191
    3ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab4:	f9 01       	movw	r30, r18
    3ab6:	20 81       	ld	r18, Z
    3ab8:	31 81       	ldd	r19, Z+1	; 0x01
    3aba:	fc 01       	movw	r30, r24
    3abc:	31 83       	std	Z+1, r19	; 0x01
    3abe:	20 83       	st	Z, r18
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	8b 5b       	subi	r24, 0xBB	; 187
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	8c 01       	movw	r16, r24
    3ace:	c8 01       	movw	r24, r16
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <main+0x646>
    3ad4:	8c 01       	movw	r16, r24
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	8b 5b       	subi	r24, 0xBB	; 187
    3ada:	9f 4f       	sbci	r25, 0xFF	; 255
    3adc:	fc 01       	movw	r30, r24
    3ade:	11 83       	std	Z+1, r17	; 0x01
    3ae0:	00 83       	st	Z, r16
	_delay_ms(2000);
	_delay_ms(2000);
	_delay_ms(2000);
	_delay_ms(2000);
	send(4);
    3ae2:	84 e0       	ldi	r24, 0x04	; 4
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <send>
	right();
    3aea:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <right>
	angle_rotate(180);
    3aee:	84 eb       	ldi	r24, 0xB4	; 180
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <angle_rotate>
	align();
    3af6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <align>
	stop();
    3afa:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	Traverse(p5);
    3afe:	80 91 04 02 	lds	r24, 0x0204
    3b02:	90 91 05 02 	lds	r25, 0x0205
    3b06:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p6);
    3b0a:	80 91 34 02 	lds	r24, 0x0234
    3b0e:	90 91 35 02 	lds	r25, 0x0235
    3b12:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p7);
    3b16:	80 91 06 02 	lds	r24, 0x0206
    3b1a:	90 91 07 02 	lds	r25, 0x0207
    3b1e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p8);
    3b22:	80 91 36 02 	lds	r24, 0x0236
    3b26:	90 91 37 02 	lds	r25, 0x0237
    3b2a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p3);
    3b2e:	80 91 02 02 	lds	r24, 0x0202
    3b32:	90 91 03 02 	lds	r25, 0x0203
    3b36:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p4);
    3b3a:	80 91 32 02 	lds	r24, 0x0232
    3b3e:	90 91 33 02 	lds	r25, 0x0233
    3b42:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p9);
    3b46:	80 91 08 02 	lds	r24, 0x0208
    3b4a:	90 91 09 02 	lds	r25, 0x0209
    3b4e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse(p10);
    3b52:	80 91 38 02 	lds	r24, 0x0238
    3b56:	90 91 39 02 	lds	r25, 0x0239
    3b5a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Traverse>
	Traverse_Last_Zones(p2);
    3b5e:	80 91 30 02 	lds	r24, 0x0230
    3b62:	90 91 31 02 	lds	r25, 0x0231
    3b66:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Traverse_Last_Zones>
	Traverse_Last_Zones(p1);
    3b6a:	80 91 00 02 	lds	r24, 0x0200
    3b6e:	90 91 01 02 	lds	r25, 0x0201
    3b72:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Traverse_Last_Zones>
	set_to_middle();
    3b76:	0e 94 be 19 	call	0x337c	; 0x337c <set_to_middle>
	Traverse_Last_Zones(p11);
    3b7a:	80 91 3a 02 	lds	r24, 0x023A
    3b7e:	90 91 3b 02 	lds	r25, 0x023B
    3b82:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Traverse_Last_Zones>
	Traverse_Last_Zones(p12);
    3b86:	80 91 0a 02 	lds	r24, 0x020A
    3b8a:	90 91 0b 02 	lds	r25, 0x020B
    3b8e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Traverse_Last_Zones>
	stop();
    3b92:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <stop>
	SETBIT(PORTC,PC3);
    3b96:	88 e2       	ldi	r24, 0x28	; 40
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	28 e2       	ldi	r18, 0x28	; 40
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	f9 01       	movw	r30, r18
    3ba0:	20 81       	ld	r18, Z
    3ba2:	28 60       	ori	r18, 0x08	; 8
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	20 83       	st	Z, r18
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	ca 5b       	subi	r28, 0xBA	; 186
    3bae:	df 4f       	sbci	r29, 0xFF	; 255
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	08 95       	ret

00003bc4 <__subsf3>:
    3bc4:	50 58       	subi	r21, 0x80	; 128

00003bc6 <__addsf3>:
    3bc6:	bb 27       	eor	r27, r27
    3bc8:	aa 27       	eor	r26, r26
    3bca:	0e d0       	rcall	.+28     	; 0x3be8 <__addsf3x>
    3bcc:	b1 c1       	rjmp	.+866    	; 0x3f30 <__fp_round>
    3bce:	a2 d1       	rcall	.+836    	; 0x3f14 <__fp_pscA>
    3bd0:	30 f0       	brcs	.+12     	; 0x3bde <__addsf3+0x18>
    3bd2:	a7 d1       	rcall	.+846    	; 0x3f22 <__fp_pscB>
    3bd4:	20 f0       	brcs	.+8      	; 0x3bde <__addsf3+0x18>
    3bd6:	31 f4       	brne	.+12     	; 0x3be4 <__addsf3+0x1e>
    3bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    3bda:	11 f4       	brne	.+4      	; 0x3be0 <__addsf3+0x1a>
    3bdc:	1e f4       	brtc	.+6      	; 0x3be4 <__addsf3+0x1e>
    3bde:	97 c1       	rjmp	.+814    	; 0x3f0e <__fp_nan>
    3be0:	0e f4       	brtc	.+2      	; 0x3be4 <__addsf3+0x1e>
    3be2:	e0 95       	com	r30
    3be4:	e7 fb       	bst	r30, 7
    3be6:	64 c1       	rjmp	.+712    	; 0x3eb0 <__fp_inf>

00003be8 <__addsf3x>:
    3be8:	e9 2f       	mov	r30, r25
    3bea:	b3 d1       	rcall	.+870    	; 0x3f52 <__fp_split3>
    3bec:	80 f3       	brcs	.-32     	; 0x3bce <__addsf3+0x8>
    3bee:	ba 17       	cp	r27, r26
    3bf0:	62 07       	cpc	r22, r18
    3bf2:	73 07       	cpc	r23, r19
    3bf4:	84 07       	cpc	r24, r20
    3bf6:	95 07       	cpc	r25, r21
    3bf8:	18 f0       	brcs	.+6      	; 0x3c00 <__addsf3x+0x18>
    3bfa:	71 f4       	brne	.+28     	; 0x3c18 <__addsf3x+0x30>
    3bfc:	9e f5       	brtc	.+102    	; 0x3c64 <__addsf3x+0x7c>
    3bfe:	e2 c1       	rjmp	.+964    	; 0x3fc4 <__fp_zero>
    3c00:	0e f4       	brtc	.+2      	; 0x3c04 <__addsf3x+0x1c>
    3c02:	e0 95       	com	r30
    3c04:	0b 2e       	mov	r0, r27
    3c06:	ba 2f       	mov	r27, r26
    3c08:	a0 2d       	mov	r26, r0
    3c0a:	0b 01       	movw	r0, r22
    3c0c:	b9 01       	movw	r22, r18
    3c0e:	90 01       	movw	r18, r0
    3c10:	0c 01       	movw	r0, r24
    3c12:	ca 01       	movw	r24, r20
    3c14:	a0 01       	movw	r20, r0
    3c16:	11 24       	eor	r1, r1
    3c18:	ff 27       	eor	r31, r31
    3c1a:	59 1b       	sub	r21, r25
    3c1c:	99 f0       	breq	.+38     	; 0x3c44 <__addsf3x+0x5c>
    3c1e:	59 3f       	cpi	r21, 0xF9	; 249
    3c20:	50 f4       	brcc	.+20     	; 0x3c36 <__addsf3x+0x4e>
    3c22:	50 3e       	cpi	r21, 0xE0	; 224
    3c24:	68 f1       	brcs	.+90     	; 0x3c80 <__addsf3x+0x98>
    3c26:	1a 16       	cp	r1, r26
    3c28:	f0 40       	sbci	r31, 0x00	; 0
    3c2a:	a2 2f       	mov	r26, r18
    3c2c:	23 2f       	mov	r18, r19
    3c2e:	34 2f       	mov	r19, r20
    3c30:	44 27       	eor	r20, r20
    3c32:	58 5f       	subi	r21, 0xF8	; 248
    3c34:	f3 cf       	rjmp	.-26     	; 0x3c1c <__addsf3x+0x34>
    3c36:	46 95       	lsr	r20
    3c38:	37 95       	ror	r19
    3c3a:	27 95       	ror	r18
    3c3c:	a7 95       	ror	r26
    3c3e:	f0 40       	sbci	r31, 0x00	; 0
    3c40:	53 95       	inc	r21
    3c42:	c9 f7       	brne	.-14     	; 0x3c36 <__addsf3x+0x4e>
    3c44:	7e f4       	brtc	.+30     	; 0x3c64 <__addsf3x+0x7c>
    3c46:	1f 16       	cp	r1, r31
    3c48:	ba 0b       	sbc	r27, r26
    3c4a:	62 0b       	sbc	r22, r18
    3c4c:	73 0b       	sbc	r23, r19
    3c4e:	84 0b       	sbc	r24, r20
    3c50:	ba f0       	brmi	.+46     	; 0x3c80 <__addsf3x+0x98>
    3c52:	91 50       	subi	r25, 0x01	; 1
    3c54:	a1 f0       	breq	.+40     	; 0x3c7e <__addsf3x+0x96>
    3c56:	ff 0f       	add	r31, r31
    3c58:	bb 1f       	adc	r27, r27
    3c5a:	66 1f       	adc	r22, r22
    3c5c:	77 1f       	adc	r23, r23
    3c5e:	88 1f       	adc	r24, r24
    3c60:	c2 f7       	brpl	.-16     	; 0x3c52 <__addsf3x+0x6a>
    3c62:	0e c0       	rjmp	.+28     	; 0x3c80 <__addsf3x+0x98>
    3c64:	ba 0f       	add	r27, r26
    3c66:	62 1f       	adc	r22, r18
    3c68:	73 1f       	adc	r23, r19
    3c6a:	84 1f       	adc	r24, r20
    3c6c:	48 f4       	brcc	.+18     	; 0x3c80 <__addsf3x+0x98>
    3c6e:	87 95       	ror	r24
    3c70:	77 95       	ror	r23
    3c72:	67 95       	ror	r22
    3c74:	b7 95       	ror	r27
    3c76:	f7 95       	ror	r31
    3c78:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7a:	08 f0       	brcs	.+2      	; 0x3c7e <__addsf3x+0x96>
    3c7c:	b3 cf       	rjmp	.-154    	; 0x3be4 <__addsf3+0x1e>
    3c7e:	93 95       	inc	r25
    3c80:	88 0f       	add	r24, r24
    3c82:	08 f0       	brcs	.+2      	; 0x3c86 <__addsf3x+0x9e>
    3c84:	99 27       	eor	r25, r25
    3c86:	ee 0f       	add	r30, r30
    3c88:	97 95       	ror	r25
    3c8a:	87 95       	ror	r24
    3c8c:	08 95       	ret

00003c8e <ceil>:
    3c8e:	83 d1       	rcall	.+774    	; 0x3f96 <__fp_trunc>
    3c90:	80 f0       	brcs	.+32     	; 0x3cb2 <ceil+0x24>
    3c92:	9f 37       	cpi	r25, 0x7F	; 127
    3c94:	40 f4       	brcc	.+16     	; 0x3ca6 <ceil+0x18>
    3c96:	91 11       	cpse	r25, r1
    3c98:	0e f4       	brtc	.+2      	; 0x3c9c <ceil+0xe>
    3c9a:	95 c1       	rjmp	.+810    	; 0x3fc6 <__fp_szero>
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	80 e8       	ldi	r24, 0x80	; 128
    3ca2:	9f e3       	ldi	r25, 0x3F	; 63
    3ca4:	08 95       	ret
    3ca6:	26 f0       	brts	.+8      	; 0x3cb0 <ceil+0x22>
    3ca8:	1b 16       	cp	r1, r27
    3caa:	61 1d       	adc	r22, r1
    3cac:	71 1d       	adc	r23, r1
    3cae:	81 1d       	adc	r24, r1
    3cb0:	05 c1       	rjmp	.+522    	; 0x3ebc <__fp_mintl>
    3cb2:	1f c1       	rjmp	.+574    	; 0x3ef2 <__fp_mpack>

00003cb4 <__cmpsf2>:
    3cb4:	d9 d0       	rcall	.+434    	; 0x3e68 <__fp_cmp>
    3cb6:	08 f4       	brcc	.+2      	; 0x3cba <__cmpsf2+0x6>
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	08 95       	ret

00003cbc <__divsf3>:
    3cbc:	0c d0       	rcall	.+24     	; 0x3cd6 <__divsf3x>
    3cbe:	38 c1       	rjmp	.+624    	; 0x3f30 <__fp_round>
    3cc0:	30 d1       	rcall	.+608    	; 0x3f22 <__fp_pscB>
    3cc2:	40 f0       	brcs	.+16     	; 0x3cd4 <__divsf3+0x18>
    3cc4:	27 d1       	rcall	.+590    	; 0x3f14 <__fp_pscA>
    3cc6:	30 f0       	brcs	.+12     	; 0x3cd4 <__divsf3+0x18>
    3cc8:	21 f4       	brne	.+8      	; 0x3cd2 <__divsf3+0x16>
    3cca:	5f 3f       	cpi	r21, 0xFF	; 255
    3ccc:	19 f0       	breq	.+6      	; 0x3cd4 <__divsf3+0x18>
    3cce:	f0 c0       	rjmp	.+480    	; 0x3eb0 <__fp_inf>
    3cd0:	51 11       	cpse	r21, r1
    3cd2:	79 c1       	rjmp	.+754    	; 0x3fc6 <__fp_szero>
    3cd4:	1c c1       	rjmp	.+568    	; 0x3f0e <__fp_nan>

00003cd6 <__divsf3x>:
    3cd6:	3d d1       	rcall	.+634    	; 0x3f52 <__fp_split3>
    3cd8:	98 f3       	brcs	.-26     	; 0x3cc0 <__divsf3+0x4>

00003cda <__divsf3_pse>:
    3cda:	99 23       	and	r25, r25
    3cdc:	c9 f3       	breq	.-14     	; 0x3cd0 <__divsf3+0x14>
    3cde:	55 23       	and	r21, r21
    3ce0:	b1 f3       	breq	.-20     	; 0x3cce <__divsf3+0x12>
    3ce2:	95 1b       	sub	r25, r21
    3ce4:	55 0b       	sbc	r21, r21
    3ce6:	bb 27       	eor	r27, r27
    3ce8:	aa 27       	eor	r26, r26
    3cea:	62 17       	cp	r22, r18
    3cec:	73 07       	cpc	r23, r19
    3cee:	84 07       	cpc	r24, r20
    3cf0:	38 f0       	brcs	.+14     	; 0x3d00 <__divsf3_pse+0x26>
    3cf2:	9f 5f       	subi	r25, 0xFF	; 255
    3cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf6:	22 0f       	add	r18, r18
    3cf8:	33 1f       	adc	r19, r19
    3cfa:	44 1f       	adc	r20, r20
    3cfc:	aa 1f       	adc	r26, r26
    3cfe:	a9 f3       	breq	.-22     	; 0x3cea <__divsf3_pse+0x10>
    3d00:	33 d0       	rcall	.+102    	; 0x3d68 <__divsf3_pse+0x8e>
    3d02:	0e 2e       	mov	r0, r30
    3d04:	3a f0       	brmi	.+14     	; 0x3d14 <__divsf3_pse+0x3a>
    3d06:	e0 e8       	ldi	r30, 0x80	; 128
    3d08:	30 d0       	rcall	.+96     	; 0x3d6a <__divsf3_pse+0x90>
    3d0a:	91 50       	subi	r25, 0x01	; 1
    3d0c:	50 40       	sbci	r21, 0x00	; 0
    3d0e:	e6 95       	lsr	r30
    3d10:	00 1c       	adc	r0, r0
    3d12:	ca f7       	brpl	.-14     	; 0x3d06 <__divsf3_pse+0x2c>
    3d14:	29 d0       	rcall	.+82     	; 0x3d68 <__divsf3_pse+0x8e>
    3d16:	fe 2f       	mov	r31, r30
    3d18:	27 d0       	rcall	.+78     	; 0x3d68 <__divsf3_pse+0x8e>
    3d1a:	66 0f       	add	r22, r22
    3d1c:	77 1f       	adc	r23, r23
    3d1e:	88 1f       	adc	r24, r24
    3d20:	bb 1f       	adc	r27, r27
    3d22:	26 17       	cp	r18, r22
    3d24:	37 07       	cpc	r19, r23
    3d26:	48 07       	cpc	r20, r24
    3d28:	ab 07       	cpc	r26, r27
    3d2a:	b0 e8       	ldi	r27, 0x80	; 128
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <__divsf3_pse+0x56>
    3d2e:	bb 0b       	sbc	r27, r27
    3d30:	80 2d       	mov	r24, r0
    3d32:	bf 01       	movw	r22, r30
    3d34:	ff 27       	eor	r31, r31
    3d36:	93 58       	subi	r25, 0x83	; 131
    3d38:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3a:	2a f0       	brmi	.+10     	; 0x3d46 <__divsf3_pse+0x6c>
    3d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d3e:	51 05       	cpc	r21, r1
    3d40:	68 f0       	brcs	.+26     	; 0x3d5c <__divsf3_pse+0x82>
    3d42:	b6 c0       	rjmp	.+364    	; 0x3eb0 <__fp_inf>
    3d44:	40 c1       	rjmp	.+640    	; 0x3fc6 <__fp_szero>
    3d46:	5f 3f       	cpi	r21, 0xFF	; 255
    3d48:	ec f3       	brlt	.-6      	; 0x3d44 <__divsf3_pse+0x6a>
    3d4a:	98 3e       	cpi	r25, 0xE8	; 232
    3d4c:	dc f3       	brlt	.-10     	; 0x3d44 <__divsf3_pse+0x6a>
    3d4e:	86 95       	lsr	r24
    3d50:	77 95       	ror	r23
    3d52:	67 95       	ror	r22
    3d54:	b7 95       	ror	r27
    3d56:	f7 95       	ror	r31
    3d58:	9f 5f       	subi	r25, 0xFF	; 255
    3d5a:	c9 f7       	brne	.-14     	; 0x3d4e <__divsf3_pse+0x74>
    3d5c:	88 0f       	add	r24, r24
    3d5e:	91 1d       	adc	r25, r1
    3d60:	96 95       	lsr	r25
    3d62:	87 95       	ror	r24
    3d64:	97 f9       	bld	r25, 7
    3d66:	08 95       	ret
    3d68:	e1 e0       	ldi	r30, 0x01	; 1
    3d6a:	66 0f       	add	r22, r22
    3d6c:	77 1f       	adc	r23, r23
    3d6e:	88 1f       	adc	r24, r24
    3d70:	bb 1f       	adc	r27, r27
    3d72:	62 17       	cp	r22, r18
    3d74:	73 07       	cpc	r23, r19
    3d76:	84 07       	cpc	r24, r20
    3d78:	ba 07       	cpc	r27, r26
    3d7a:	20 f0       	brcs	.+8      	; 0x3d84 <__divsf3_pse+0xaa>
    3d7c:	62 1b       	sub	r22, r18
    3d7e:	73 0b       	sbc	r23, r19
    3d80:	84 0b       	sbc	r24, r20
    3d82:	ba 0b       	sbc	r27, r26
    3d84:	ee 1f       	adc	r30, r30
    3d86:	88 f7       	brcc	.-30     	; 0x3d6a <__divsf3_pse+0x90>
    3d88:	e0 95       	com	r30
    3d8a:	08 95       	ret

00003d8c <__fixsfsi>:
    3d8c:	04 d0       	rcall	.+8      	; 0x3d96 <__fixunssfsi>
    3d8e:	68 94       	set
    3d90:	b1 11       	cpse	r27, r1
    3d92:	19 c1       	rjmp	.+562    	; 0x3fc6 <__fp_szero>
    3d94:	08 95       	ret

00003d96 <__fixunssfsi>:
    3d96:	e5 d0       	rcall	.+458    	; 0x3f62 <__fp_splitA>
    3d98:	88 f0       	brcs	.+34     	; 0x3dbc <__fixunssfsi+0x26>
    3d9a:	9f 57       	subi	r25, 0x7F	; 127
    3d9c:	90 f0       	brcs	.+36     	; 0x3dc2 <__fixunssfsi+0x2c>
    3d9e:	b9 2f       	mov	r27, r25
    3da0:	99 27       	eor	r25, r25
    3da2:	b7 51       	subi	r27, 0x17	; 23
    3da4:	a0 f0       	brcs	.+40     	; 0x3dce <__fixunssfsi+0x38>
    3da6:	d1 f0       	breq	.+52     	; 0x3ddc <__fixunssfsi+0x46>
    3da8:	66 0f       	add	r22, r22
    3daa:	77 1f       	adc	r23, r23
    3dac:	88 1f       	adc	r24, r24
    3dae:	99 1f       	adc	r25, r25
    3db0:	1a f0       	brmi	.+6      	; 0x3db8 <__fixunssfsi+0x22>
    3db2:	ba 95       	dec	r27
    3db4:	c9 f7       	brne	.-14     	; 0x3da8 <__fixunssfsi+0x12>
    3db6:	12 c0       	rjmp	.+36     	; 0x3ddc <__fixunssfsi+0x46>
    3db8:	b1 30       	cpi	r27, 0x01	; 1
    3dba:	81 f0       	breq	.+32     	; 0x3ddc <__fixunssfsi+0x46>
    3dbc:	03 d1       	rcall	.+518    	; 0x3fc4 <__fp_zero>
    3dbe:	b1 e0       	ldi	r27, 0x01	; 1
    3dc0:	08 95       	ret
    3dc2:	00 c1       	rjmp	.+512    	; 0x3fc4 <__fp_zero>
    3dc4:	67 2f       	mov	r22, r23
    3dc6:	78 2f       	mov	r23, r24
    3dc8:	88 27       	eor	r24, r24
    3dca:	b8 5f       	subi	r27, 0xF8	; 248
    3dcc:	39 f0       	breq	.+14     	; 0x3ddc <__fixunssfsi+0x46>
    3dce:	b9 3f       	cpi	r27, 0xF9	; 249
    3dd0:	cc f3       	brlt	.-14     	; 0x3dc4 <__fixunssfsi+0x2e>
    3dd2:	86 95       	lsr	r24
    3dd4:	77 95       	ror	r23
    3dd6:	67 95       	ror	r22
    3dd8:	b3 95       	inc	r27
    3dda:	d9 f7       	brne	.-10     	; 0x3dd2 <__fixunssfsi+0x3c>
    3ddc:	3e f4       	brtc	.+14     	; 0x3dec <__fixunssfsi+0x56>
    3dde:	90 95       	com	r25
    3de0:	80 95       	com	r24
    3de2:	70 95       	com	r23
    3de4:	61 95       	neg	r22
    3de6:	7f 4f       	sbci	r23, 0xFF	; 255
    3de8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dea:	9f 4f       	sbci	r25, 0xFF	; 255
    3dec:	08 95       	ret

00003dee <__floatunsisf>:
    3dee:	e8 94       	clt
    3df0:	09 c0       	rjmp	.+18     	; 0x3e04 <__floatsisf+0x12>

00003df2 <__floatsisf>:
    3df2:	97 fb       	bst	r25, 7
    3df4:	3e f4       	brtc	.+14     	; 0x3e04 <__floatsisf+0x12>
    3df6:	90 95       	com	r25
    3df8:	80 95       	com	r24
    3dfa:	70 95       	com	r23
    3dfc:	61 95       	neg	r22
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	8f 4f       	sbci	r24, 0xFF	; 255
    3e02:	9f 4f       	sbci	r25, 0xFF	; 255
    3e04:	99 23       	and	r25, r25
    3e06:	a9 f0       	breq	.+42     	; 0x3e32 <__floatsisf+0x40>
    3e08:	f9 2f       	mov	r31, r25
    3e0a:	96 e9       	ldi	r25, 0x96	; 150
    3e0c:	bb 27       	eor	r27, r27
    3e0e:	93 95       	inc	r25
    3e10:	f6 95       	lsr	r31
    3e12:	87 95       	ror	r24
    3e14:	77 95       	ror	r23
    3e16:	67 95       	ror	r22
    3e18:	b7 95       	ror	r27
    3e1a:	f1 11       	cpse	r31, r1
    3e1c:	f8 cf       	rjmp	.-16     	; 0x3e0e <__floatsisf+0x1c>
    3e1e:	fa f4       	brpl	.+62     	; 0x3e5e <__floatsisf+0x6c>
    3e20:	bb 0f       	add	r27, r27
    3e22:	11 f4       	brne	.+4      	; 0x3e28 <__floatsisf+0x36>
    3e24:	60 ff       	sbrs	r22, 0
    3e26:	1b c0       	rjmp	.+54     	; 0x3e5e <__floatsisf+0x6c>
    3e28:	6f 5f       	subi	r22, 0xFF	; 255
    3e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e30:	16 c0       	rjmp	.+44     	; 0x3e5e <__floatsisf+0x6c>
    3e32:	88 23       	and	r24, r24
    3e34:	11 f0       	breq	.+4      	; 0x3e3a <__floatsisf+0x48>
    3e36:	96 e9       	ldi	r25, 0x96	; 150
    3e38:	11 c0       	rjmp	.+34     	; 0x3e5c <__floatsisf+0x6a>
    3e3a:	77 23       	and	r23, r23
    3e3c:	21 f0       	breq	.+8      	; 0x3e46 <__floatsisf+0x54>
    3e3e:	9e e8       	ldi	r25, 0x8E	; 142
    3e40:	87 2f       	mov	r24, r23
    3e42:	76 2f       	mov	r23, r22
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <__floatsisf+0x5e>
    3e46:	66 23       	and	r22, r22
    3e48:	71 f0       	breq	.+28     	; 0x3e66 <__floatsisf+0x74>
    3e4a:	96 e8       	ldi	r25, 0x86	; 134
    3e4c:	86 2f       	mov	r24, r22
    3e4e:	70 e0       	ldi	r23, 0x00	; 0
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	2a f0       	brmi	.+10     	; 0x3e5e <__floatsisf+0x6c>
    3e54:	9a 95       	dec	r25
    3e56:	66 0f       	add	r22, r22
    3e58:	77 1f       	adc	r23, r23
    3e5a:	88 1f       	adc	r24, r24
    3e5c:	da f7       	brpl	.-10     	; 0x3e54 <__floatsisf+0x62>
    3e5e:	88 0f       	add	r24, r24
    3e60:	96 95       	lsr	r25
    3e62:	87 95       	ror	r24
    3e64:	97 f9       	bld	r25, 7
    3e66:	08 95       	ret

00003e68 <__fp_cmp>:
    3e68:	99 0f       	add	r25, r25
    3e6a:	00 08       	sbc	r0, r0
    3e6c:	55 0f       	add	r21, r21
    3e6e:	aa 0b       	sbc	r26, r26
    3e70:	e0 e8       	ldi	r30, 0x80	; 128
    3e72:	fe ef       	ldi	r31, 0xFE	; 254
    3e74:	16 16       	cp	r1, r22
    3e76:	17 06       	cpc	r1, r23
    3e78:	e8 07       	cpc	r30, r24
    3e7a:	f9 07       	cpc	r31, r25
    3e7c:	c0 f0       	brcs	.+48     	; 0x3eae <__fp_cmp+0x46>
    3e7e:	12 16       	cp	r1, r18
    3e80:	13 06       	cpc	r1, r19
    3e82:	e4 07       	cpc	r30, r20
    3e84:	f5 07       	cpc	r31, r21
    3e86:	98 f0       	brcs	.+38     	; 0x3eae <__fp_cmp+0x46>
    3e88:	62 1b       	sub	r22, r18
    3e8a:	73 0b       	sbc	r23, r19
    3e8c:	84 0b       	sbc	r24, r20
    3e8e:	95 0b       	sbc	r25, r21
    3e90:	39 f4       	brne	.+14     	; 0x3ea0 <__fp_cmp+0x38>
    3e92:	0a 26       	eor	r0, r26
    3e94:	61 f0       	breq	.+24     	; 0x3eae <__fp_cmp+0x46>
    3e96:	23 2b       	or	r18, r19
    3e98:	24 2b       	or	r18, r20
    3e9a:	25 2b       	or	r18, r21
    3e9c:	21 f4       	brne	.+8      	; 0x3ea6 <__fp_cmp+0x3e>
    3e9e:	08 95       	ret
    3ea0:	0a 26       	eor	r0, r26
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <__fp_cmp+0x3e>
    3ea4:	a1 40       	sbci	r26, 0x01	; 1
    3ea6:	a6 95       	lsr	r26
    3ea8:	8f ef       	ldi	r24, 0xFF	; 255
    3eaa:	81 1d       	adc	r24, r1
    3eac:	81 1d       	adc	r24, r1
    3eae:	08 95       	ret

00003eb0 <__fp_inf>:
    3eb0:	97 f9       	bld	r25, 7
    3eb2:	9f 67       	ori	r25, 0x7F	; 127
    3eb4:	80 e8       	ldi	r24, 0x80	; 128
    3eb6:	70 e0       	ldi	r23, 0x00	; 0
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	08 95       	ret

00003ebc <__fp_mintl>:
    3ebc:	88 23       	and	r24, r24
    3ebe:	71 f4       	brne	.+28     	; 0x3edc <__fp_mintl+0x20>
    3ec0:	77 23       	and	r23, r23
    3ec2:	21 f0       	breq	.+8      	; 0x3ecc <__fp_mintl+0x10>
    3ec4:	98 50       	subi	r25, 0x08	; 8
    3ec6:	87 2b       	or	r24, r23
    3ec8:	76 2f       	mov	r23, r22
    3eca:	07 c0       	rjmp	.+14     	; 0x3eda <__fp_mintl+0x1e>
    3ecc:	66 23       	and	r22, r22
    3ece:	11 f4       	brne	.+4      	; 0x3ed4 <__fp_mintl+0x18>
    3ed0:	99 27       	eor	r25, r25
    3ed2:	0d c0       	rjmp	.+26     	; 0x3eee <__fp_mintl+0x32>
    3ed4:	90 51       	subi	r25, 0x10	; 16
    3ed6:	86 2b       	or	r24, r22
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	2a f0       	brmi	.+10     	; 0x3ee8 <__fp_mintl+0x2c>
    3ede:	9a 95       	dec	r25
    3ee0:	66 0f       	add	r22, r22
    3ee2:	77 1f       	adc	r23, r23
    3ee4:	88 1f       	adc	r24, r24
    3ee6:	da f7       	brpl	.-10     	; 0x3ede <__fp_mintl+0x22>
    3ee8:	88 0f       	add	r24, r24
    3eea:	96 95       	lsr	r25
    3eec:	87 95       	ror	r24
    3eee:	97 f9       	bld	r25, 7
    3ef0:	08 95       	ret

00003ef2 <__fp_mpack>:
    3ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef4:	31 f0       	breq	.+12     	; 0x3f02 <__fp_mpack_finite+0xc>

00003ef6 <__fp_mpack_finite>:
    3ef6:	91 50       	subi	r25, 0x01	; 1
    3ef8:	20 f4       	brcc	.+8      	; 0x3f02 <__fp_mpack_finite+0xc>
    3efa:	87 95       	ror	r24
    3efc:	77 95       	ror	r23
    3efe:	67 95       	ror	r22
    3f00:	b7 95       	ror	r27
    3f02:	88 0f       	add	r24, r24
    3f04:	91 1d       	adc	r25, r1
    3f06:	96 95       	lsr	r25
    3f08:	87 95       	ror	r24
    3f0a:	97 f9       	bld	r25, 7
    3f0c:	08 95       	ret

00003f0e <__fp_nan>:
    3f0e:	9f ef       	ldi	r25, 0xFF	; 255
    3f10:	80 ec       	ldi	r24, 0xC0	; 192
    3f12:	08 95       	ret

00003f14 <__fp_pscA>:
    3f14:	00 24       	eor	r0, r0
    3f16:	0a 94       	dec	r0
    3f18:	16 16       	cp	r1, r22
    3f1a:	17 06       	cpc	r1, r23
    3f1c:	18 06       	cpc	r1, r24
    3f1e:	09 06       	cpc	r0, r25
    3f20:	08 95       	ret

00003f22 <__fp_pscB>:
    3f22:	00 24       	eor	r0, r0
    3f24:	0a 94       	dec	r0
    3f26:	12 16       	cp	r1, r18
    3f28:	13 06       	cpc	r1, r19
    3f2a:	14 06       	cpc	r1, r20
    3f2c:	05 06       	cpc	r0, r21
    3f2e:	08 95       	ret

00003f30 <__fp_round>:
    3f30:	09 2e       	mov	r0, r25
    3f32:	03 94       	inc	r0
    3f34:	00 0c       	add	r0, r0
    3f36:	11 f4       	brne	.+4      	; 0x3f3c <__fp_round+0xc>
    3f38:	88 23       	and	r24, r24
    3f3a:	52 f0       	brmi	.+20     	; 0x3f50 <__fp_round+0x20>
    3f3c:	bb 0f       	add	r27, r27
    3f3e:	40 f4       	brcc	.+16     	; 0x3f50 <__fp_round+0x20>
    3f40:	bf 2b       	or	r27, r31
    3f42:	11 f4       	brne	.+4      	; 0x3f48 <__fp_round+0x18>
    3f44:	60 ff       	sbrs	r22, 0
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <__fp_round+0x20>
    3f48:	6f 5f       	subi	r22, 0xFF	; 255
    3f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f50:	08 95       	ret

00003f52 <__fp_split3>:
    3f52:	57 fd       	sbrc	r21, 7
    3f54:	90 58       	subi	r25, 0x80	; 128
    3f56:	44 0f       	add	r20, r20
    3f58:	55 1f       	adc	r21, r21
    3f5a:	59 f0       	breq	.+22     	; 0x3f72 <__fp_splitA+0x10>
    3f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f5e:	71 f0       	breq	.+28     	; 0x3f7c <__fp_splitA+0x1a>
    3f60:	47 95       	ror	r20

00003f62 <__fp_splitA>:
    3f62:	88 0f       	add	r24, r24
    3f64:	97 fb       	bst	r25, 7
    3f66:	99 1f       	adc	r25, r25
    3f68:	61 f0       	breq	.+24     	; 0x3f82 <__fp_splitA+0x20>
    3f6a:	9f 3f       	cpi	r25, 0xFF	; 255
    3f6c:	79 f0       	breq	.+30     	; 0x3f8c <__fp_splitA+0x2a>
    3f6e:	87 95       	ror	r24
    3f70:	08 95       	ret
    3f72:	12 16       	cp	r1, r18
    3f74:	13 06       	cpc	r1, r19
    3f76:	14 06       	cpc	r1, r20
    3f78:	55 1f       	adc	r21, r21
    3f7a:	f2 cf       	rjmp	.-28     	; 0x3f60 <__fp_split3+0xe>
    3f7c:	46 95       	lsr	r20
    3f7e:	f1 df       	rcall	.-30     	; 0x3f62 <__fp_splitA>
    3f80:	08 c0       	rjmp	.+16     	; 0x3f92 <__fp_splitA+0x30>
    3f82:	16 16       	cp	r1, r22
    3f84:	17 06       	cpc	r1, r23
    3f86:	18 06       	cpc	r1, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	f1 cf       	rjmp	.-30     	; 0x3f6e <__fp_splitA+0xc>
    3f8c:	86 95       	lsr	r24
    3f8e:	71 05       	cpc	r23, r1
    3f90:	61 05       	cpc	r22, r1
    3f92:	08 94       	sec
    3f94:	08 95       	ret

00003f96 <__fp_trunc>:
    3f96:	e5 df       	rcall	.-54     	; 0x3f62 <__fp_splitA>
    3f98:	a0 f0       	brcs	.+40     	; 0x3fc2 <__fp_trunc+0x2c>
    3f9a:	be e7       	ldi	r27, 0x7E	; 126
    3f9c:	b9 17       	cp	r27, r25
    3f9e:	88 f4       	brcc	.+34     	; 0x3fc2 <__fp_trunc+0x2c>
    3fa0:	bb 27       	eor	r27, r27
    3fa2:	9f 38       	cpi	r25, 0x8F	; 143
    3fa4:	60 f4       	brcc	.+24     	; 0x3fbe <__fp_trunc+0x28>
    3fa6:	16 16       	cp	r1, r22
    3fa8:	b1 1d       	adc	r27, r1
    3faa:	67 2f       	mov	r22, r23
    3fac:	78 2f       	mov	r23, r24
    3fae:	88 27       	eor	r24, r24
    3fb0:	98 5f       	subi	r25, 0xF8	; 248
    3fb2:	f7 cf       	rjmp	.-18     	; 0x3fa2 <__fp_trunc+0xc>
    3fb4:	86 95       	lsr	r24
    3fb6:	77 95       	ror	r23
    3fb8:	67 95       	ror	r22
    3fba:	b1 1d       	adc	r27, r1
    3fbc:	93 95       	inc	r25
    3fbe:	96 39       	cpi	r25, 0x96	; 150
    3fc0:	c8 f3       	brcs	.-14     	; 0x3fb4 <__fp_trunc+0x1e>
    3fc2:	08 95       	ret

00003fc4 <__fp_zero>:
    3fc4:	e8 94       	clt

00003fc6 <__fp_szero>:
    3fc6:	bb 27       	eor	r27, r27
    3fc8:	66 27       	eor	r22, r22
    3fca:	77 27       	eor	r23, r23
    3fcc:	cb 01       	movw	r24, r22
    3fce:	97 f9       	bld	r25, 7
    3fd0:	08 95       	ret

00003fd2 <__gesf2>:
    3fd2:	4a df       	rcall	.-364    	; 0x3e68 <__fp_cmp>
    3fd4:	08 f4       	brcc	.+2      	; 0x3fd8 <__gesf2+0x6>
    3fd6:	8f ef       	ldi	r24, 0xFF	; 255
    3fd8:	08 95       	ret

00003fda <__mulsf3>:
    3fda:	0b d0       	rcall	.+22     	; 0x3ff2 <__mulsf3x>
    3fdc:	a9 cf       	rjmp	.-174    	; 0x3f30 <__fp_round>
    3fde:	9a df       	rcall	.-204    	; 0x3f14 <__fp_pscA>
    3fe0:	28 f0       	brcs	.+10     	; 0x3fec <__mulsf3+0x12>
    3fe2:	9f df       	rcall	.-194    	; 0x3f22 <__fp_pscB>
    3fe4:	18 f0       	brcs	.+6      	; 0x3fec <__mulsf3+0x12>
    3fe6:	95 23       	and	r25, r21
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <__mulsf3+0x12>
    3fea:	62 cf       	rjmp	.-316    	; 0x3eb0 <__fp_inf>
    3fec:	90 cf       	rjmp	.-224    	; 0x3f0e <__fp_nan>
    3fee:	11 24       	eor	r1, r1
    3ff0:	ea cf       	rjmp	.-44     	; 0x3fc6 <__fp_szero>

00003ff2 <__mulsf3x>:
    3ff2:	af df       	rcall	.-162    	; 0x3f52 <__fp_split3>
    3ff4:	a0 f3       	brcs	.-24     	; 0x3fde <__mulsf3+0x4>

00003ff6 <__mulsf3_pse>:
    3ff6:	95 9f       	mul	r25, r21
    3ff8:	d1 f3       	breq	.-12     	; 0x3fee <__mulsf3+0x14>
    3ffa:	95 0f       	add	r25, r21
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	55 1f       	adc	r21, r21
    4000:	62 9f       	mul	r22, r18
    4002:	f0 01       	movw	r30, r0
    4004:	72 9f       	mul	r23, r18
    4006:	bb 27       	eor	r27, r27
    4008:	f0 0d       	add	r31, r0
    400a:	b1 1d       	adc	r27, r1
    400c:	63 9f       	mul	r22, r19
    400e:	aa 27       	eor	r26, r26
    4010:	f0 0d       	add	r31, r0
    4012:	b1 1d       	adc	r27, r1
    4014:	aa 1f       	adc	r26, r26
    4016:	64 9f       	mul	r22, r20
    4018:	66 27       	eor	r22, r22
    401a:	b0 0d       	add	r27, r0
    401c:	a1 1d       	adc	r26, r1
    401e:	66 1f       	adc	r22, r22
    4020:	82 9f       	mul	r24, r18
    4022:	22 27       	eor	r18, r18
    4024:	b0 0d       	add	r27, r0
    4026:	a1 1d       	adc	r26, r1
    4028:	62 1f       	adc	r22, r18
    402a:	73 9f       	mul	r23, r19
    402c:	b0 0d       	add	r27, r0
    402e:	a1 1d       	adc	r26, r1
    4030:	62 1f       	adc	r22, r18
    4032:	83 9f       	mul	r24, r19
    4034:	a0 0d       	add	r26, r0
    4036:	61 1d       	adc	r22, r1
    4038:	22 1f       	adc	r18, r18
    403a:	74 9f       	mul	r23, r20
    403c:	33 27       	eor	r19, r19
    403e:	a0 0d       	add	r26, r0
    4040:	61 1d       	adc	r22, r1
    4042:	23 1f       	adc	r18, r19
    4044:	84 9f       	mul	r24, r20
    4046:	60 0d       	add	r22, r0
    4048:	21 1d       	adc	r18, r1
    404a:	82 2f       	mov	r24, r18
    404c:	76 2f       	mov	r23, r22
    404e:	6a 2f       	mov	r22, r26
    4050:	11 24       	eor	r1, r1
    4052:	9f 57       	subi	r25, 0x7F	; 127
    4054:	50 40       	sbci	r21, 0x00	; 0
    4056:	8a f0       	brmi	.+34     	; 0x407a <__mulsf3_pse+0x84>
    4058:	e1 f0       	breq	.+56     	; 0x4092 <__mulsf3_pse+0x9c>
    405a:	88 23       	and	r24, r24
    405c:	4a f0       	brmi	.+18     	; 0x4070 <__mulsf3_pse+0x7a>
    405e:	ee 0f       	add	r30, r30
    4060:	ff 1f       	adc	r31, r31
    4062:	bb 1f       	adc	r27, r27
    4064:	66 1f       	adc	r22, r22
    4066:	77 1f       	adc	r23, r23
    4068:	88 1f       	adc	r24, r24
    406a:	91 50       	subi	r25, 0x01	; 1
    406c:	50 40       	sbci	r21, 0x00	; 0
    406e:	a9 f7       	brne	.-22     	; 0x405a <__mulsf3_pse+0x64>
    4070:	9e 3f       	cpi	r25, 0xFE	; 254
    4072:	51 05       	cpc	r21, r1
    4074:	70 f0       	brcs	.+28     	; 0x4092 <__mulsf3_pse+0x9c>
    4076:	1c cf       	rjmp	.-456    	; 0x3eb0 <__fp_inf>
    4078:	a6 cf       	rjmp	.-180    	; 0x3fc6 <__fp_szero>
    407a:	5f 3f       	cpi	r21, 0xFF	; 255
    407c:	ec f3       	brlt	.-6      	; 0x4078 <__mulsf3_pse+0x82>
    407e:	98 3e       	cpi	r25, 0xE8	; 232
    4080:	dc f3       	brlt	.-10     	; 0x4078 <__mulsf3_pse+0x82>
    4082:	86 95       	lsr	r24
    4084:	77 95       	ror	r23
    4086:	67 95       	ror	r22
    4088:	b7 95       	ror	r27
    408a:	f7 95       	ror	r31
    408c:	e7 95       	ror	r30
    408e:	9f 5f       	subi	r25, 0xFF	; 255
    4090:	c1 f7       	brne	.-16     	; 0x4082 <__mulsf3_pse+0x8c>
    4092:	fe 2b       	or	r31, r30
    4094:	88 0f       	add	r24, r24
    4096:	91 1d       	adc	r25, r1
    4098:	96 95       	lsr	r25
    409a:	87 95       	ror	r24
    409c:	97 f9       	bld	r25, 7
    409e:	08 95       	ret

000040a0 <__udivmodhi4>:
    40a0:	aa 1b       	sub	r26, r26
    40a2:	bb 1b       	sub	r27, r27
    40a4:	51 e1       	ldi	r21, 0x11	; 17
    40a6:	07 c0       	rjmp	.+14     	; 0x40b6 <__udivmodhi4_ep>

000040a8 <__udivmodhi4_loop>:
    40a8:	aa 1f       	adc	r26, r26
    40aa:	bb 1f       	adc	r27, r27
    40ac:	a6 17       	cp	r26, r22
    40ae:	b7 07       	cpc	r27, r23
    40b0:	10 f0       	brcs	.+4      	; 0x40b6 <__udivmodhi4_ep>
    40b2:	a6 1b       	sub	r26, r22
    40b4:	b7 0b       	sbc	r27, r23

000040b6 <__udivmodhi4_ep>:
    40b6:	88 1f       	adc	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	5a 95       	dec	r21
    40bc:	a9 f7       	brne	.-22     	; 0x40a8 <__udivmodhi4_loop>
    40be:	80 95       	com	r24
    40c0:	90 95       	com	r25
    40c2:	bc 01       	movw	r22, r24
    40c4:	cd 01       	movw	r24, r26
    40c6:	08 95       	ret

000040c8 <__divmodhi4>:
    40c8:	97 fb       	bst	r25, 7
    40ca:	09 2e       	mov	r0, r25
    40cc:	07 26       	eor	r0, r23
    40ce:	0a d0       	rcall	.+20     	; 0x40e4 <__divmodhi4_neg1>
    40d0:	77 fd       	sbrc	r23, 7
    40d2:	04 d0       	rcall	.+8      	; 0x40dc <__divmodhi4_neg2>
    40d4:	e5 df       	rcall	.-54     	; 0x40a0 <__udivmodhi4>
    40d6:	06 d0       	rcall	.+12     	; 0x40e4 <__divmodhi4_neg1>
    40d8:	00 20       	and	r0, r0
    40da:	1a f4       	brpl	.+6      	; 0x40e2 <__divmodhi4_exit>

000040dc <__divmodhi4_neg2>:
    40dc:	70 95       	com	r23
    40de:	61 95       	neg	r22
    40e0:	7f 4f       	sbci	r23, 0xFF	; 255

000040e2 <__divmodhi4_exit>:
    40e2:	08 95       	ret

000040e4 <__divmodhi4_neg1>:
    40e4:	f6 f7       	brtc	.-4      	; 0x40e2 <__divmodhi4_exit>
    40e6:	90 95       	com	r25
    40e8:	81 95       	neg	r24
    40ea:	9f 4f       	sbci	r25, 0xFF	; 255
    40ec:	08 95       	ret

000040ee <_exit>:
    40ee:	f8 94       	cli

000040f0 <__stop_program>:
    40f0:	ff cf       	rjmp	.-2      	; 0x40f0 <__stop_program>
